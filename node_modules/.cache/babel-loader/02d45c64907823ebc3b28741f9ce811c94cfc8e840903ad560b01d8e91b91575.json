{"ast":null,"code":"import { Encoder } from \"./Encoder.mjs\";\n/**\n * @deprecated No longer supported.\n */\nexport var defaultEncodeOptions = undefined;\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode(value, options) {\n  var encoder = new Encoder(options);\n  return encoder.encodeSharedRef(value);\n}","map":{"version":3,"names":["Encoder","defaultEncodeOptions","undefined","encode","value","options","encoder","encodeSharedRef"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algorand-msgpack\\src\\encode.ts"],"sourcesContent":["import { Encoder } from \"./Encoder\";\nimport type { EncoderOptions } from \"./Encoder\";\nimport type { SplitUndefined } from \"./context\";\n\n/**\n * @deprecated Use {@link EncoderOptions} instead.\n */\nexport type EncodeOptions = never;\n\n/**\n * @deprecated No longer supported.\n */\nexport const defaultEncodeOptions: never = undefined as never;\n\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode<ContextType = undefined>(\n  value: unknown,\n  options?: EncoderOptions<SplitUndefined<ContextType>>,\n): Uint8Array {\n  const encoder = new Encoder(options);\n  return encoder.encodeSharedRef(value);\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAY;AASpC;;;AAGA,OAAO,IAAMC,oBAAoB,GAAUC,SAAkB;AAE7D;;;;;;AAMA,OAAM,SAAUC,MAAMA,CACpBC,KAAc,EACdC,OAAqD;EAErD,IAAMC,OAAO,GAAG,IAAIN,OAAO,CAACK,OAAO,CAAC;EACpC,OAAOC,OAAO,CAACC,eAAe,CAACH,KAAK,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}