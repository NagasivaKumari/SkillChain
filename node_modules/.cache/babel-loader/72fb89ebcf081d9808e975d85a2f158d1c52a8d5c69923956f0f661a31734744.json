{"ast":null,"code":"import { decodeJSON, encodeMsgpack } from '../../../encoding/encoding.js';\nimport JSONRequest from '../jsonrequest.js';\nimport { setHeaders } from './compile.js';\nimport { DryrunResponse } from './models/types.js';\nexport default class Dryrun extends JSONRequest {\n  constructor(c, dr) {\n    super(c);\n    this.blob = encodeMsgpack(dr);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/teal/dryrun';\n  }\n  executeRequest(headers, customOptions) {\n    const txHeaders = setHeaders(headers);\n    return this.c.post({\n      relativePath: this.path(),\n      data: this.blob,\n      requestHeaders: txHeaders,\n      customOptions\n    });\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response) {\n    return decodeJSON(response.getJSONText(), DryrunResponse);\n  }\n}","map":{"version":3,"names":["decodeJSON","encodeMsgpack","JSONRequest","setHeaders","DryrunResponse","Dryrun","constructor","c","dr","blob","path","executeRequest","headers","customOptions","txHeaders","post","relativePath","data","requestHeaders","prepare","response","getJSONText"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\algod\\dryrun.ts"],"sourcesContent":["import { HTTPClient, HTTPClientResponse } from '../../client.js';\nimport { decodeJSON, encodeMsgpack } from '../../../encoding/encoding.js';\nimport JSONRequest from '../jsonrequest.js';\nimport { setHeaders } from './compile.js';\nimport { DryrunResponse } from './models/types.js';\nimport * as modelsv2 from './models/types.js';\n\nexport default class Dryrun extends JSONRequest<DryrunResponse> {\n  private blob: Uint8Array;\n\n  constructor(c: HTTPClient, dr: modelsv2.DryrunRequest) {\n    super(c);\n    this.blob = encodeMsgpack(dr);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/teal/dryrun';\n  }\n\n  protected executeRequest(\n    headers?: Record<string, string>,\n    customOptions?: Record<string, unknown>\n  ): Promise<HTTPClientResponse> {\n    const txHeaders = setHeaders(headers);\n    return this.c.post({\n      relativePath: this.path(),\n      data: this.blob,\n      requestHeaders: txHeaders,\n      customOptions,\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response: HTTPClientResponse): DryrunResponse {\n    return decodeJSON(response.getJSONText(), DryrunResponse);\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,EAAEC,aAAa,QAAQ,+BAA+B;AACzE,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,cAAc,QAAQ,mBAAmB;AAGlD,eAAc,MAAOC,MAAO,SAAQH,WAA2B;EAG7DI,YAAYC,CAAa,EAAEC,EAA0B;IACnD,KAAK,CAACD,CAAC,CAAC;IACR,IAAI,CAACE,IAAI,GAAGR,aAAa,CAACO,EAAE,CAAC;EAC/B;EAEA;EACAE,IAAIA,CAAA;IACF,OAAO,iBAAiB;EAC1B;EAEUC,cAAcA,CACtBC,OAAgC,EAChCC,aAAuC;IAEvC,MAAMC,SAAS,GAAGX,UAAU,CAACS,OAAO,CAAC;IACrC,OAAO,IAAI,CAACL,CAAC,CAACQ,IAAI,CAAC;MACjBC,YAAY,EAAE,IAAI,CAACN,IAAI,EAAE;MACzBO,IAAI,EAAE,IAAI,CAACR,IAAI;MACfS,cAAc,EAAEJ,SAAS;MACzBD;KACD,CAAC;EACJ;EAEA;EACAM,OAAOA,CAACC,QAA4B;IAClC,OAAOpB,UAAU,CAACoB,QAAQ,CAACC,WAAW,EAAE,EAAEjB,cAAc,CAAC;EAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}