{"ast":null,"code":"import JSONbigWithoutConfig from 'json-bigint';\nimport IntDecoding from '../types/intDecoding.js';\nconst JSONbig = JSONbigWithoutConfig({\n  useNativeBigInt: true,\n  strict: true\n});\n/**\n * Parse JSON with additional options.\n * @param str - The JSON string to parse.\n * @param options - Configures how integers in this JSON string will be decoded. See the\n *   `IntDecoding` enum for more details.\n */\nexport function parseJSON(str, {\n  intDecoding\n}) {\n  if (intDecoding !== IntDecoding.SAFE && intDecoding !== IntDecoding.UNSAFE && intDecoding !== IntDecoding.BIGINT && intDecoding !== IntDecoding.MIXED) {\n    throw new Error(`Invalid intDecoding option: ${intDecoding}`);\n  }\n  return JSONbig.parse(str, (_, value) => {\n    if (value != null && typeof value === 'object' && Object.getPrototypeOf(value) == null) {\n      // JSONbig.parse objects are created with Object.create(null) and thus have a null prototype\n      // let us remedy that\n      Object.setPrototypeOf(value, Object.prototype);\n    }\n    if (typeof value === 'bigint') {\n      if (intDecoding === IntDecoding.SAFE && value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`Integer exceeds maximum safe integer: ${value.toString()}. Try parsing with a different intDecoding option.`);\n      }\n      if (intDecoding === IntDecoding.BIGINT || intDecoding === IntDecoding.MIXED && value > Number.MAX_SAFE_INTEGER) {\n        return value;\n      }\n      // JSONbig.parse converts number to BigInts if they are >= 10**15. This is smaller than\n      // Number.MAX_SAFE_INTEGER, so we can convert some BigInts back to normal numbers.\n      return Number(value);\n    }\n    if (typeof value === 'number') {\n      if (intDecoding === IntDecoding.BIGINT && Number.isInteger(value)) {\n        return BigInt(value);\n      }\n    }\n    return value;\n  });\n}\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * This functions differs from the built-in JSON.stringify in that it supports serializing BigInts.\n *\n * This function takes the same arguments as the built-in JSON.stringify function.\n *\n * @param value - A JavaScript value, usually an object or array, to be converted.\n * @param replacer - A function that transforms the results.\n * @param space - Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n */\nexport function stringifyJSON(value, replacer, space) {\n  return JSONbig.stringify(value, replacer, space);\n}\n/**\n * ArrayEqual takes two arrays and return true if equal, false otherwise\n */\nexport function arrayEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  return Array.from(a).every((val, i) => val === b[i]);\n}\n/**\n * ConcatArrays takes n number arrays and returns a joint Uint8Array\n * @param arrs - An arbitrary number of n array-like number list arguments\n * @returns [a,b]\n */\nexport function concatArrays(...arrs) {\n  const size = arrs.reduce((sum, arr) => sum + arr.length, 0);\n  const c = new Uint8Array(size);\n  let offset = 0;\n  for (let i = 0; i < arrs.length; i++) {\n    c.set(arrs[i], offset);\n    offset += arrs[i].length;\n  }\n  return c;\n}\n/**\n * Remove undefined properties from an object\n * @param obj - An object, preferably one with some undefined properties\n * @returns A copy of the object with undefined properties removed\n */\nexport function removeUndefinedProperties(obj) {\n  const mutableCopy = {\n    ...obj\n  };\n  Object.keys(mutableCopy).forEach(key => {\n    if (typeof mutableCopy[key] === 'undefined') delete mutableCopy[key];\n  });\n  return mutableCopy;\n}\n/**\n * Check whether the environment is Node.js (as opposed to the browser)\n * @returns True if Node.js environment, false otherwise\n */\nexport function isNode() {\n  return (\n    // @ts-ignore\n    typeof process === 'object' &&\n    // @ts-ignore\n    typeof process.versions === 'object' &&\n    // @ts-ignore\n    typeof process.versions.node !== 'undefined'\n  );\n}\n/**\n * Check whether the environment is ReactNative\n * @returns True if ReactNative, false otherwise\n */\nexport function isReactNative() {\n  const {\n    navigator\n  } = globalThis;\n  if (typeof navigator === 'object' && navigator.product === 'ReactNative') {\n    return true;\n  }\n  return false;\n}\nexport function ensureSafeInteger(value) {\n  if (typeof value === 'undefined') {\n    throw new Error('Value is undefined');\n  }\n  if (typeof value === 'bigint') {\n    if (value > BigInt(Number.MAX_SAFE_INTEGER) || value < BigInt(Number.MIN_SAFE_INTEGER)) {\n      throw new Error(`BigInt value ${value} is not a safe integer`);\n    }\n    return Number(value);\n  }\n  if (typeof value === 'number') {\n    if (Number.isSafeInteger(value)) {\n      return value;\n    }\n    throw new Error(`Value ${value} is not a safe integer`);\n  }\n  throw new Error(`Unexpected type ${typeof value}, ${value}`);\n}\nexport function ensureSafeUnsignedInteger(value) {\n  const intValue = ensureSafeInteger(value);\n  if (intValue < 0) {\n    throw new Error(`Value ${intValue} is negative`);\n  }\n  return intValue;\n}\nexport function ensureBigInt(value) {\n  if (typeof value === 'undefined') {\n    throw new Error('Value is undefined');\n  }\n  if (typeof value === 'bigint') {\n    return value;\n  }\n  if (typeof value === 'number') {\n    if (!Number.isSafeInteger(value)) {\n      throw new Error(`Value ${value} is not a safe integer`);\n    }\n    return BigInt(value);\n  }\n  throw new Error(`Unexpected type ${typeof value}, ${value}`);\n}\nexport function ensureUint64(value) {\n  const bigIntValue = ensureBigInt(value);\n  if (bigIntValue < 0 || bigIntValue > BigInt('0xffffffffffffffff')) {\n    throw new Error(`Value ${bigIntValue} is not a uint64`);\n  }\n  return bigIntValue;\n}","map":{"version":3,"names":["JSONbigWithoutConfig","IntDecoding","JSONbig","useNativeBigInt","strict","parseJSON","str","intDecoding","SAFE","UNSAFE","BIGINT","MIXED","Error","parse","_","value","Object","getPrototypeOf","setPrototypeOf","prototype","Number","MAX_SAFE_INTEGER","toString","isInteger","BigInt","stringifyJSON","replacer","space","stringify","arrayEqual","a","b","length","Array","from","every","val","i","concatArrays","arrs","size","reduce","sum","arr","c","Uint8Array","offset","set","removeUndefinedProperties","obj","mutableCopy","keys","forEach","key","isNode","process","versions","node","isReactNative","navigator","globalThis","product","ensureSafeInteger","MIN_SAFE_INTEGER","isSafeInteger","ensureSafeUnsignedInteger","intValue","ensureBigInt","ensureUint64","bigIntValue"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\utils\\utils.ts"],"sourcesContent":["import JSONbigWithoutConfig from 'json-bigint';\nimport IntDecoding from '../types/intDecoding.js';\n\nconst JSONbig = JSONbigWithoutConfig({\n  useNativeBigInt: true,\n  strict: true,\n});\n\nexport interface ParseJSONOptions {\n  intDecoding: IntDecoding;\n}\n\n/**\n * Parse JSON with additional options.\n * @param str - The JSON string to parse.\n * @param options - Configures how integers in this JSON string will be decoded. See the\n *   `IntDecoding` enum for more details.\n */\nexport function parseJSON(str: string, { intDecoding }: ParseJSONOptions) {\n  if (\n    intDecoding !== IntDecoding.SAFE &&\n    intDecoding !== IntDecoding.UNSAFE &&\n    intDecoding !== IntDecoding.BIGINT &&\n    intDecoding !== IntDecoding.MIXED\n  ) {\n    throw new Error(`Invalid intDecoding option: ${intDecoding}`);\n  }\n  return JSONbig.parse(str, (_, value) => {\n    if (\n      value != null &&\n      typeof value === 'object' &&\n      Object.getPrototypeOf(value) == null\n    ) {\n      // JSONbig.parse objects are created with Object.create(null) and thus have a null prototype\n      // let us remedy that\n      Object.setPrototypeOf(value, Object.prototype);\n    }\n\n    if (typeof value === 'bigint') {\n      if (intDecoding === IntDecoding.SAFE && value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(\n          `Integer exceeds maximum safe integer: ${value.toString()}. Try parsing with a different intDecoding option.`\n        );\n      }\n      if (\n        intDecoding === IntDecoding.BIGINT ||\n        (intDecoding === IntDecoding.MIXED && value > Number.MAX_SAFE_INTEGER)\n      ) {\n        return value;\n      }\n      // JSONbig.parse converts number to BigInts if they are >= 10**15. This is smaller than\n      // Number.MAX_SAFE_INTEGER, so we can convert some BigInts back to normal numbers.\n      return Number(value);\n    }\n\n    if (typeof value === 'number') {\n      if (intDecoding === IntDecoding.BIGINT && Number.isInteger(value)) {\n        return BigInt(value);\n      }\n    }\n\n    return value;\n  });\n}\n\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * This functions differs from the built-in JSON.stringify in that it supports serializing BigInts.\n *\n * This function takes the same arguments as the built-in JSON.stringify function.\n *\n * @param value - A JavaScript value, usually an object or array, to be converted.\n * @param replacer - A function that transforms the results.\n * @param space - Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n */\nexport function stringifyJSON(\n  value: any,\n  replacer?: (this: any, key: string, value: any) => any,\n  space?: string | number\n): string {\n  return JSONbig.stringify(value, replacer, space);\n}\n\n/**\n * ArrayEqual takes two arrays and return true if equal, false otherwise\n */\nexport function arrayEqual<T>(a: ArrayLike<T>, b: ArrayLike<T>): boolean {\n  if (a.length !== b.length) {\n    return false;\n  }\n  return Array.from(a).every((val, i) => val === b[i]);\n}\n\n/**\n * ConcatArrays takes n number arrays and returns a joint Uint8Array\n * @param arrs - An arbitrary number of n array-like number list arguments\n * @returns [a,b]\n */\nexport function concatArrays(...arrs: ArrayLike<number>[]) {\n  const size = arrs.reduce((sum, arr) => sum + arr.length, 0);\n  const c = new Uint8Array(size);\n\n  let offset = 0;\n  for (let i = 0; i < arrs.length; i++) {\n    c.set(arrs[i], offset);\n    offset += arrs[i].length;\n  }\n\n  return c;\n}\n\n/**\n * Remove undefined properties from an object\n * @param obj - An object, preferably one with some undefined properties\n * @returns A copy of the object with undefined properties removed\n */\nexport function removeUndefinedProperties(\n  obj: Record<string | number | symbol, any>\n) {\n  const mutableCopy = { ...obj };\n  Object.keys(mutableCopy).forEach((key) => {\n    if (typeof mutableCopy[key] === 'undefined') delete mutableCopy[key];\n  });\n  return mutableCopy;\n}\n\n/**\n * Check whether the environment is Node.js (as opposed to the browser)\n * @returns True if Node.js environment, false otherwise\n */\nexport function isNode() {\n  return (\n    // @ts-ignore\n    typeof process === 'object' &&\n    // @ts-ignore\n    typeof process.versions === 'object' &&\n    // @ts-ignore\n    typeof process.versions.node !== 'undefined'\n  );\n}\n\n/**\n * Check whether the environment is ReactNative\n * @returns True if ReactNative, false otherwise\n */\nexport function isReactNative() {\n  const { navigator } = globalThis as { navigator?: { product?: string } };\n  if (typeof navigator === 'object' && navigator.product === 'ReactNative') {\n    return true;\n  }\n  return false;\n}\n\nexport function ensureSafeInteger(value: unknown): number {\n  if (typeof value === 'undefined') {\n    throw new Error('Value is undefined');\n  }\n  if (typeof value === 'bigint') {\n    if (\n      value > BigInt(Number.MAX_SAFE_INTEGER) ||\n      value < BigInt(Number.MIN_SAFE_INTEGER)\n    ) {\n      throw new Error(`BigInt value ${value} is not a safe integer`);\n    }\n    return Number(value);\n  }\n  if (typeof value === 'number') {\n    if (Number.isSafeInteger(value)) {\n      return value;\n    }\n    throw new Error(`Value ${value} is not a safe integer`);\n  }\n  throw new Error(`Unexpected type ${typeof value}, ${value}`);\n}\n\nexport function ensureSafeUnsignedInteger(value: unknown): number {\n  const intValue = ensureSafeInteger(value);\n  if (intValue < 0) {\n    throw new Error(`Value ${intValue} is negative`);\n  }\n  return intValue;\n}\n\nexport function ensureBigInt(value: unknown): bigint {\n  if (typeof value === 'undefined') {\n    throw new Error('Value is undefined');\n  }\n  if (typeof value === 'bigint') {\n    return value;\n  }\n  if (typeof value === 'number') {\n    if (!Number.isSafeInteger(value)) {\n      throw new Error(`Value ${value} is not a safe integer`);\n    }\n    return BigInt(value);\n  }\n  throw new Error(`Unexpected type ${typeof value}, ${value}`);\n}\n\nexport function ensureUint64(value: unknown): bigint {\n  const bigIntValue = ensureBigInt(value);\n  if (bigIntValue < 0 || bigIntValue > BigInt('0xffffffffffffffff')) {\n    throw new Error(`Value ${bigIntValue} is not a uint64`);\n  }\n  return bigIntValue;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}