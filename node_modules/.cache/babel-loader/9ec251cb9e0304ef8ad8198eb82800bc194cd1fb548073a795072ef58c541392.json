{"ast":null,"code":"import * as nacl from './nacl/naclWrappers.js';\nimport { msgpackRawEncode } from './encoding/encoding.js';\nimport * as utils from './utils/utils.js';\nconst ALGORAND_MAX_TX_GROUP_SIZE = 16;\nconst TX_GROUP_TAG = new TextEncoder().encode('TG');\nfunction txGroupPreimage(txnHashes) {\n  if (txnHashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {\n    throw new Error(`${txnHashes.length} transactions grouped together but max group size is ${ALGORAND_MAX_TX_GROUP_SIZE}`);\n  }\n  if (txnHashes.length === 0) {\n    throw new Error('Cannot compute group ID of zero transactions');\n  }\n  const bytes = msgpackRawEncode({\n    txlist: txnHashes\n  });\n  return utils.concatArrays(TX_GROUP_TAG, bytes);\n}\n/**\n * computeGroupID returns group ID for a group of transactions\n * @param txns - array of transactions\n * @returns Uint8Array\n */\nexport function computeGroupID(txns) {\n  const hashes = [];\n  for (const txn of txns) {\n    hashes.push(txn.rawTxID());\n  }\n  const toBeHashed = txGroupPreimage(hashes);\n  const gid = nacl.genericHash(toBeHashed);\n  return Uint8Array.from(gid);\n}\n/**\n * assignGroupID assigns group id to a given list of unsigned transactions\n * @param txns - array of transactions. The array elements will be modified with the group id\n */\nexport function assignGroupID(txns) {\n  const gid = computeGroupID(txns);\n  for (const txn of txns) {\n    txn.group = gid;\n  }\n  return txns;\n}","map":{"version":3,"names":["nacl","msgpackRawEncode","utils","ALGORAND_MAX_TX_GROUP_SIZE","TX_GROUP_TAG","TextEncoder","encode","txGroupPreimage","txnHashes","length","Error","bytes","txlist","concatArrays","computeGroupID","txns","hashes","txn","push","rawTxID","toBeHashed","gid","genericHash","Uint8Array","from","assignGroupID","group"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\group.ts"],"sourcesContent":["import { Transaction } from './transaction.js';\nimport * as nacl from './nacl/naclWrappers.js';\nimport { msgpackRawEncode } from './encoding/encoding.js';\nimport * as utils from './utils/utils.js';\n\nconst ALGORAND_MAX_TX_GROUP_SIZE = 16;\nconst TX_GROUP_TAG = new TextEncoder().encode('TG');\n\nfunction txGroupPreimage(txnHashes: Uint8Array[]): Uint8Array {\n  if (txnHashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {\n    throw new Error(\n      `${txnHashes.length} transactions grouped together but max group size is ${ALGORAND_MAX_TX_GROUP_SIZE}`\n    );\n  }\n  if (txnHashes.length === 0) {\n    throw new Error('Cannot compute group ID of zero transactions');\n  }\n  const bytes = msgpackRawEncode({\n    txlist: txnHashes,\n  });\n  return utils.concatArrays(TX_GROUP_TAG, bytes);\n}\n\n/**\n * computeGroupID returns group ID for a group of transactions\n * @param txns - array of transactions\n * @returns Uint8Array\n */\nexport function computeGroupID(txns: ReadonlyArray<Transaction>) {\n  const hashes: Uint8Array[] = [];\n  for (const txn of txns) {\n    hashes.push(txn.rawTxID());\n  }\n\n  const toBeHashed = txGroupPreimage(hashes);\n  const gid = nacl.genericHash(toBeHashed);\n  return Uint8Array.from(gid);\n}\n\n/**\n * assignGroupID assigns group id to a given list of unsigned transactions\n * @param txns - array of transactions. The array elements will be modified with the group id\n */\nexport function assignGroupID(txns: Transaction[]) {\n  const gid = computeGroupID(txns);\n  for (const txn of txns) {\n    txn.group = gid;\n  }\n  return txns;\n}\n"],"mappings":"AACA,OAAO,KAAKA,IAAI,MAAM,wBAAwB;AAC9C,SAASC,gBAAgB,QAAQ,wBAAwB;AACzD,OAAO,KAAKC,KAAK,MAAM,kBAAkB;AAEzC,MAAMC,0BAA0B,GAAG,EAAE;AACrC,MAAMC,YAAY,GAAG,IAAIC,WAAW,EAAE,CAACC,MAAM,CAAC,IAAI,CAAC;AAEnD,SAASC,eAAeA,CAACC,SAAuB;EAC9C,IAAIA,SAAS,CAACC,MAAM,GAAGN,0BAA0B,EAAE;IACjD,MAAM,IAAIO,KAAK,CACb,GAAGF,SAAS,CAACC,MAAM,wDAAwDN,0BAA0B,EAAE,CACxG;EACH;EACA,IAAIK,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,MAAMC,KAAK,GAAGV,gBAAgB,CAAC;IAC7BW,MAAM,EAAEJ;GACT,CAAC;EACF,OAAON,KAAK,CAACW,YAAY,CAACT,YAAY,EAAEO,KAAK,CAAC;AAChD;AAEA;;;;;AAKA,OAAM,SAAUG,cAAcA,CAACC,IAAgC;EAC7D,MAAMC,MAAM,GAAiB,EAAE;EAC/B,KAAK,MAAMC,GAAG,IAAIF,IAAI,EAAE;IACtBC,MAAM,CAACE,IAAI,CAACD,GAAG,CAACE,OAAO,EAAE,CAAC;EAC5B;EAEA,MAAMC,UAAU,GAAGb,eAAe,CAACS,MAAM,CAAC;EAC1C,MAAMK,GAAG,GAAGrB,IAAI,CAACsB,WAAW,CAACF,UAAU,CAAC;EACxC,OAAOG,UAAU,CAACC,IAAI,CAACH,GAAG,CAAC;AAC7B;AAEA;;;;AAIA,OAAM,SAAUI,aAAaA,CAACV,IAAmB;EAC/C,MAAMM,GAAG,GAAGP,cAAc,CAACC,IAAI,CAAC;EAChC,KAAK,MAAME,GAAG,IAAIF,IAAI,EAAE;IACtBE,GAAG,CAACS,KAAK,GAAGL,GAAG;EACjB;EACA,OAAON,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}