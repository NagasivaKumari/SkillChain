{"ast":null,"code":"/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n/* eslint-disable no-use-before-define */\nimport { ensureBigInt, ensureSafeInteger } from '../../../../utils/utils.js';\nimport { NamedMapSchema, ArraySchema, Uint64Schema, StringSchema, BooleanSchema, ByteArraySchema, OptionalSchema } from '../../../../encoding/schema/index.js';\nimport { base64ToBytes } from '../../../../encoding/binarydata.js';\nimport { Block } from '../../../../types/block.js';\nimport { LedgerStateDelta } from '../../../../types/statedelta.js';\nimport { SignedTransaction } from '../../../../signedTransaction.js';\nimport { Address } from '../../../../encoding/address.js';\nimport { UntypedValue } from '../../untypedmodel.js';\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'address',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'amount',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'amount-without-pending-rewards',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'min-balance',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'pending-rewards',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'rewards',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'status',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'total-apps-opted-in',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total-assets-opted-in',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total-created-apps',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total-created-assets',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'apps-local-state',\n        valueSchema: new OptionalSchema(new ArraySchema(ApplicationLocalState.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'apps-total-extra-pages',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'apps-total-schema',\n        valueSchema: new OptionalSchema(ApplicationStateSchema.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'assets',\n        valueSchema: new OptionalSchema(new ArraySchema(AssetHolding.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'auth-addr',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'created-apps',\n        valueSchema: new OptionalSchema(new ArraySchema(Application.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'created-assets',\n        valueSchema: new OptionalSchema(new ArraySchema(Asset.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'incentive-eligible',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'last-heartbeat',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'last-proposed',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'participation',\n        valueSchema: new OptionalSchema(AccountParticipation.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'reward-base',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'sig-type',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'total-box-bytes',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'total-boxes',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param minBalance - MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param incentiveEligible - Whether or not the account can receive block incentives if its balance is in\n   * range at proposal time.\n   * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their\n   * online status.\n   * @param lastProposed - The round in which this account last proposed the block.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\n   * values.\n   * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    minBalance,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    createdApps,\n    createdAssets,\n    incentiveEligible,\n    lastHeartbeat,\n    lastProposed,\n    participation,\n    rewardBase,\n    sigType,\n    totalBoxBytes,\n    totalBoxes\n  }) {\n    this.address = address;\n    this.amount = ensureBigInt(amount);\n    this.amountWithoutPendingRewards = ensureBigInt(amountWithoutPendingRewards);\n    this.minBalance = ensureBigInt(minBalance);\n    this.pendingRewards = ensureBigInt(pendingRewards);\n    this.rewards = ensureBigInt(rewards);\n    this.round = ensureBigInt(round);\n    this.status = status;\n    this.totalAppsOptedIn = ensureSafeInteger(totalAppsOptedIn);\n    this.totalAssetsOptedIn = ensureSafeInteger(totalAssetsOptedIn);\n    this.totalCreatedApps = ensureSafeInteger(totalCreatedApps);\n    this.totalCreatedAssets = ensureSafeInteger(totalCreatedAssets);\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = typeof appsTotalExtraPages === 'undefined' ? undefined : ensureSafeInteger(appsTotalExtraPages);\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = typeof authAddr === 'string' ? Address.fromString(authAddr) : authAddr;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.incentiveEligible = incentiveEligible;\n    this.lastHeartbeat = typeof lastHeartbeat === 'undefined' ? undefined : ensureSafeInteger(lastHeartbeat);\n    this.lastProposed = typeof lastProposed === 'undefined' ? undefined : ensureSafeInteger(lastProposed);\n    this.participation = participation;\n    this.rewardBase = typeof rewardBase === 'undefined' ? undefined : ensureBigInt(rewardBase);\n    this.sigType = sigType;\n    this.totalBoxBytes = typeof totalBoxBytes === 'undefined' ? undefined : ensureSafeInteger(totalBoxBytes);\n    this.totalBoxes = typeof totalBoxes === 'undefined' ? undefined : ensureSafeInteger(totalBoxes);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Account.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['address', this.address], ['amount', this.amount], ['amount-without-pending-rewards', this.amountWithoutPendingRewards], ['min-balance', this.minBalance], ['pending-rewards', this.pendingRewards], ['rewards', this.rewards], ['round', this.round], ['status', this.status], ['total-apps-opted-in', this.totalAppsOptedIn], ['total-assets-opted-in', this.totalAssetsOptedIn], ['total-created-apps', this.totalCreatedApps], ['total-created-assets', this.totalCreatedAssets], ['apps-local-state', typeof this.appsLocalState !== 'undefined' ? this.appsLocalState.map(v => v.toEncodingData()) : undefined], ['apps-total-extra-pages', this.appsTotalExtraPages], ['apps-total-schema', typeof this.appsTotalSchema !== 'undefined' ? this.appsTotalSchema.toEncodingData() : undefined], ['assets', typeof this.assets !== 'undefined' ? this.assets.map(v => v.toEncodingData()) : undefined], ['auth-addr', typeof this.authAddr !== 'undefined' ? this.authAddr.toString() : undefined], ['created-apps', typeof this.createdApps !== 'undefined' ? this.createdApps.map(v => v.toEncodingData()) : undefined], ['created-assets', typeof this.createdAssets !== 'undefined' ? this.createdAssets.map(v => v.toEncodingData()) : undefined], ['incentive-eligible', this.incentiveEligible], ['last-heartbeat', this.lastHeartbeat], ['last-proposed', this.lastProposed], ['participation', typeof this.participation !== 'undefined' ? this.participation.toEncodingData() : undefined], ['reward-base', this.rewardBase], ['sig-type', this.sigType], ['total-box-bytes', this.totalBoxBytes], ['total-boxes', this.totalBoxes]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Account: ${data}`);\n    }\n    return new Account({\n      address: data.get('address'),\n      amount: data.get('amount'),\n      amountWithoutPendingRewards: data.get('amount-without-pending-rewards'),\n      minBalance: data.get('min-balance'),\n      pendingRewards: data.get('pending-rewards'),\n      rewards: data.get('rewards'),\n      round: data.get('round'),\n      status: data.get('status'),\n      totalAppsOptedIn: data.get('total-apps-opted-in'),\n      totalAssetsOptedIn: data.get('total-assets-opted-in'),\n      totalCreatedApps: data.get('total-created-apps'),\n      totalCreatedAssets: data.get('total-created-assets'),\n      appsLocalState: typeof data.get('apps-local-state') !== 'undefined' ? data.get('apps-local-state').map(v => ApplicationLocalState.fromEncodingData(v)) : undefined,\n      appsTotalExtraPages: data.get('apps-total-extra-pages'),\n      appsTotalSchema: typeof data.get('apps-total-schema') !== 'undefined' ? ApplicationStateSchema.fromEncodingData(data.get('apps-total-schema')) : undefined,\n      assets: typeof data.get('assets') !== 'undefined' ? data.get('assets').map(v => AssetHolding.fromEncodingData(v)) : undefined,\n      authAddr: data.get('auth-addr'),\n      createdApps: typeof data.get('created-apps') !== 'undefined' ? data.get('created-apps').map(v => Application.fromEncodingData(v)) : undefined,\n      createdAssets: typeof data.get('created-assets') !== 'undefined' ? data.get('created-assets').map(v => Asset.fromEncodingData(v)) : undefined,\n      incentiveEligible: data.get('incentive-eligible'),\n      lastHeartbeat: data.get('last-heartbeat'),\n      lastProposed: data.get('last-proposed'),\n      participation: typeof data.get('participation') !== 'undefined' ? AccountParticipation.fromEncodingData(data.get('participation')) : undefined,\n      rewardBase: data.get('reward-base'),\n      sigType: data.get('sig-type'),\n      totalBoxBytes: data.get('total-box-bytes'),\n      totalBoxes: data.get('total-boxes')\n    });\n  }\n}\n/**\n * AccountApplicationResponse describes the account's application local state and\n * global state (AppLocalState and AppParams, if either exists) for a specific\n * application ID. Global state will only be returned if the provided address is\n * the application's creator.\n */\nexport class AccountApplicationResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'app-local-state',\n        valueSchema: new OptionalSchema(ApplicationLocalState.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'created-app',\n        valueSchema: new OptionalSchema(ApplicationParams.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AccountApplicationResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param appLocalState - (appl) the application local data stored in this account.\n   * The raw account uses `AppLocalState` for this type.\n   * @param createdApp - (appp) parameters of the application created by this account including app\n   * global data.\n   * The raw account uses `AppParams` for this type.\n   */\n  constructor({\n    round,\n    appLocalState,\n    createdApp\n  }) {\n    this.round = ensureBigInt(round);\n    this.appLocalState = appLocalState;\n    this.createdApp = createdApp;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountApplicationResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['round', this.round], ['app-local-state', typeof this.appLocalState !== 'undefined' ? this.appLocalState.toEncodingData() : undefined], ['created-app', typeof this.createdApp !== 'undefined' ? this.createdApp.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountApplicationResponse: ${data}`);\n    }\n    return new AccountApplicationResponse({\n      round: data.get('round'),\n      appLocalState: typeof data.get('app-local-state') !== 'undefined' ? ApplicationLocalState.fromEncodingData(data.get('app-local-state')) : undefined,\n      createdApp: typeof data.get('created-app') !== 'undefined' ? ApplicationParams.fromEncodingData(data.get('created-app')) : undefined\n    });\n  }\n}\n/**\n * AccountAssetHolding describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID.\n */\nexport class AccountAssetHolding {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'asset-holding',\n        valueSchema: AssetHolding.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'asset-params',\n        valueSchema: new OptionalSchema(AssetParams.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AccountAssetHolding` object.\n   * @param assetHolding - (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   * @param assetParams - (apar) parameters of the asset held by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  constructor({\n    assetHolding,\n    assetParams\n  }) {\n    this.assetHolding = assetHolding;\n    this.assetParams = assetParams;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountAssetHolding.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['asset-holding', this.assetHolding.toEncodingData()], ['asset-params', typeof this.assetParams !== 'undefined' ? this.assetParams.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountAssetHolding: ${data}`);\n    }\n    return new AccountAssetHolding({\n      assetHolding: AssetHolding.fromEncodingData(data.get('asset-holding') ?? new Map()),\n      assetParams: typeof data.get('asset-params') !== 'undefined' ? AssetParams.fromEncodingData(data.get('asset-params')) : undefined\n    });\n  }\n}\n/**\n * AccountAssetResponse describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID. Asset parameters will only be\n * returned if the provided address is the asset's creator.\n */\nexport class AccountAssetResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'asset-holding',\n        valueSchema: new OptionalSchema(AssetHolding.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'created-asset',\n        valueSchema: new OptionalSchema(AssetParams.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AccountAssetResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param assetHolding - (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   * @param createdAsset - (apar) parameters of the asset created by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  constructor({\n    round,\n    assetHolding,\n    createdAsset\n  }) {\n    this.round = ensureBigInt(round);\n    this.assetHolding = assetHolding;\n    this.createdAsset = createdAsset;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountAssetResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['round', this.round], ['asset-holding', typeof this.assetHolding !== 'undefined' ? this.assetHolding.toEncodingData() : undefined], ['created-asset', typeof this.createdAsset !== 'undefined' ? this.createdAsset.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountAssetResponse: ${data}`);\n    }\n    return new AccountAssetResponse({\n      round: data.get('round'),\n      assetHolding: typeof data.get('asset-holding') !== 'undefined' ? AssetHolding.fromEncodingData(data.get('asset-holding')) : undefined,\n      createdAsset: typeof data.get('created-asset') !== 'undefined' ? AssetParams.fromEncodingData(data.get('created-asset')) : undefined\n    });\n  }\n}\n/**\n * AccountAssetsInformationResponse contains a list of assets held by an account.\n */\nexport class AccountAssetsInformationResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'asset-holdings',\n        valueSchema: new OptionalSchema(new ArraySchema(AccountAssetHolding.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AccountAssetsInformationResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param assetHoldings -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    round,\n    assetHoldings,\n    nextToken\n  }) {\n    this.round = ensureSafeInteger(round);\n    this.assetHoldings = assetHoldings;\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountAssetsInformationResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['round', this.round], ['asset-holdings', typeof this.assetHoldings !== 'undefined' ? this.assetHoldings.map(v => v.toEncodingData()) : undefined], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountAssetsInformationResponse: ${data}`);\n    }\n    return new AccountAssetsInformationResponse({\n      round: data.get('round'),\n      assetHoldings: typeof data.get('asset-holdings') !== 'undefined' ? data.get('asset-holdings').map(v => AccountAssetHolding.fromEncodingData(v)) : undefined,\n      nextToken: data.get('next-token')\n    });\n  }\n}\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'selection-participation-key',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'vote-first-valid',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'vote-key-dilution',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'vote-last-valid',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'vote-participation-key',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'state-proof-key',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey\n  }) {\n    this.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? base64ToBytes(selectionParticipationKey) : selectionParticipationKey;\n    this.voteFirstValid = ensureBigInt(voteFirstValid);\n    this.voteKeyDilution = ensureBigInt(voteKeyDilution);\n    this.voteLastValid = ensureBigInt(voteLastValid);\n    this.voteParticipationKey = typeof voteParticipationKey === 'string' ? base64ToBytes(voteParticipationKey) : voteParticipationKey;\n    this.stateProofKey = typeof stateProofKey === 'string' ? base64ToBytes(stateProofKey) : stateProofKey;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountParticipation.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['selection-participation-key', this.selectionParticipationKey], ['vote-first-valid', this.voteFirstValid], ['vote-key-dilution', this.voteKeyDilution], ['vote-last-valid', this.voteLastValid], ['vote-participation-key', this.voteParticipationKey], ['state-proof-key', this.stateProofKey]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountParticipation: ${data}`);\n    }\n    return new AccountParticipation({\n      selectionParticipationKey: data.get('selection-participation-key'),\n      voteFirstValid: data.get('vote-first-valid'),\n      voteKeyDilution: data.get('vote-key-dilution'),\n      voteLastValid: data.get('vote-last-valid'),\n      voteParticipationKey: data.get('vote-participation-key'),\n      stateProofKey: data.get('state-proof-key')\n    });\n  }\n}\n/**\n * Application state delta.\n */\nexport class AccountStateDelta {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'address',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'delta',\n        valueSchema: new ArraySchema(EvalDeltaKeyValue.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor({\n    address,\n    delta\n  }) {\n    this.address = address;\n    this.delta = delta;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountStateDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['address', this.address], ['delta', this.delta.map(v => v.toEncodingData())]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountStateDelta: ${data}`);\n    }\n    return new AccountStateDelta({\n      address: data.get('address'),\n      delta: (data.get('delta') ?? []).map(v => EvalDeltaKeyValue.fromEncodingData(v))\n    });\n  }\n}\n/**\n * The logged messages from an app call along with the app ID and outer transaction\n * ID. Logs appear in the same order that they were emitted.\n */\nexport class AppCallLogs {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'application-index',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'logs',\n        valueSchema: new ArraySchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'txId',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AppCallLogs` object.\n   * @param applicationIndex - The application from which the logs were generated\n   * @param logs - An array of logs\n   * @param txid - The transaction ID of the outer app call that lead to these logs\n   */\n  constructor({\n    applicationIndex,\n    logs,\n    txid\n  }) {\n    this.applicationIndex = ensureSafeInteger(applicationIndex);\n    this.logs = logs;\n    this.txid = txid;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AppCallLogs.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['application-index', this.applicationIndex], ['logs', this.logs], ['txId', this.txid]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppCallLogs: ${data}`);\n    }\n    return new AppCallLogs({\n      applicationIndex: data.get('application-index'),\n      logs: data.get('logs'),\n      txid: data.get('txId')\n    });\n  }\n}\n/**\n * Application index and its parameters\n */\nexport class Application {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'params',\n        valueSchema: ApplicationParams.encodingSchema,\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   */\n  constructor({\n    id,\n    params\n  }) {\n    this.id = ensureBigInt(id);\n    this.params = params;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Application.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['id', this.id], ['params', this.params.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Application: ${data}`);\n    }\n    return new Application({\n      id: data.get('id'),\n      params: ApplicationParams.fromEncodingData(data.get('params') ?? new Map())\n    });\n  }\n}\n/**\n * An application's initial global/local/box states that were accessed during\n * simulation.\n */\nexport class ApplicationInitialStates {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'app-boxes',\n        valueSchema: new OptionalSchema(ApplicationKVStorage.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'app-globals',\n        valueSchema: new OptionalSchema(ApplicationKVStorage.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'app-locals',\n        valueSchema: new OptionalSchema(new ArraySchema(ApplicationKVStorage.encodingSchema)),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationInitialStates` object.\n   * @param id - Application index.\n   * @param appBoxes - An application's global/local/box state.\n   * @param appGlobals - An application's global/local/box state.\n   * @param appLocals - An application's initial local states tied to different accounts.\n   */\n  constructor({\n    id,\n    appBoxes,\n    appGlobals,\n    appLocals\n  }) {\n    this.id = ensureBigInt(id);\n    this.appBoxes = appBoxes;\n    this.appGlobals = appGlobals;\n    this.appLocals = appLocals;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationInitialStates.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['id', this.id], ['app-boxes', typeof this.appBoxes !== 'undefined' ? this.appBoxes.toEncodingData() : undefined], ['app-globals', typeof this.appGlobals !== 'undefined' ? this.appGlobals.toEncodingData() : undefined], ['app-locals', typeof this.appLocals !== 'undefined' ? this.appLocals.map(v => v.toEncodingData()) : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationInitialStates: ${data}`);\n    }\n    return new ApplicationInitialStates({\n      id: data.get('id'),\n      appBoxes: typeof data.get('app-boxes') !== 'undefined' ? ApplicationKVStorage.fromEncodingData(data.get('app-boxes')) : undefined,\n      appGlobals: typeof data.get('app-globals') !== 'undefined' ? ApplicationKVStorage.fromEncodingData(data.get('app-globals')) : undefined,\n      appLocals: typeof data.get('app-locals') !== 'undefined' ? data.get('app-locals').map(v => ApplicationKVStorage.fromEncodingData(v)) : undefined\n    });\n  }\n}\n/**\n * An application's global/local/box state.\n */\nexport class ApplicationKVStorage {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'kvs',\n        valueSchema: new ArraySchema(AvmKeyValue.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'account',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationKVStorage` object.\n   * @param kvs - Key-Value pairs representing application states.\n   * @param account - The address of the account associated with the local state.\n   */\n  constructor({\n    kvs,\n    account\n  }) {\n    this.kvs = kvs;\n    this.account = typeof account === 'string' ? Address.fromString(account) : account;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationKVStorage.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['kvs', this.kvs.map(v => v.toEncodingData())], ['account', typeof this.account !== 'undefined' ? this.account.toString() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationKVStorage: ${data}`);\n    }\n    return new ApplicationKVStorage({\n      kvs: (data.get('kvs') ?? []).map(v => AvmKeyValue.fromEncodingData(v)),\n      account: data.get('account')\n    });\n  }\n}\n/**\n * References an account's local state for an application.\n */\nexport class ApplicationLocalReference {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'account',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'app',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationLocalReference` object.\n   * @param account - Address of the account with the local state.\n   * @param app - Application ID of the local state application.\n   */\n  constructor({\n    account,\n    app\n  }) {\n    this.account = typeof account === 'string' ? Address.fromString(account) : account;\n    this.app = ensureBigInt(app);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationLocalReference.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['account', this.account.toString()], ['app', this.app]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLocalReference: ${data}`);\n    }\n    return new ApplicationLocalReference({\n      account: data.get('account'),\n      app: data.get('app')\n    });\n  }\n}\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'schema',\n        valueSchema: ApplicationStateSchema.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'key-value',\n        valueSchema: new OptionalSchema(new ArraySchema(TealKeyValue.encodingSchema)),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param keyValue - (tkv) storage.\n   */\n  constructor({\n    id,\n    schema,\n    keyValue\n  }) {\n    this.id = ensureBigInt(id);\n    this.schema = schema;\n    this.keyValue = keyValue;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationLocalState.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['id', this.id], ['schema', this.schema.toEncodingData()], ['key-value', typeof this.keyValue !== 'undefined' ? this.keyValue.map(v => v.toEncodingData()) : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLocalState: ${data}`);\n    }\n    return new ApplicationLocalState({\n      id: data.get('id'),\n      schema: ApplicationStateSchema.fromEncodingData(data.get('schema') ?? new Map()),\n      keyValue: typeof data.get('key-value') !== 'undefined' ? data.get('key-value').map(v => TealKeyValue.fromEncodingData(v)) : undefined\n    });\n  }\n}\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'approval-program',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'clear-state-program',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'creator',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'extra-program-pages',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'global-state',\n        valueSchema: new OptionalSchema(new ArraySchema(TealKeyValue.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'global-state-schema',\n        valueSchema: new OptionalSchema(ApplicationStateSchema.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'local-state-schema',\n        valueSchema: new OptionalSchema(ApplicationStateSchema.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - (gs) global state\n   * @param globalStateSchema - (gsch) global schema\n   * @param localStateSchema - (lsch) local schema\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema\n  }) {\n    this.approvalProgram = typeof approvalProgram === 'string' ? base64ToBytes(approvalProgram) : approvalProgram;\n    this.clearStateProgram = typeof clearStateProgram === 'string' ? base64ToBytes(clearStateProgram) : clearStateProgram;\n    this.creator = typeof creator === 'string' ? Address.fromString(creator) : creator;\n    this.extraProgramPages = typeof extraProgramPages === 'undefined' ? undefined : ensureSafeInteger(extraProgramPages);\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationParams.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['approval-program', this.approvalProgram], ['clear-state-program', this.clearStateProgram], ['creator', this.creator.toString()], ['extra-program-pages', this.extraProgramPages], ['global-state', typeof this.globalState !== 'undefined' ? this.globalState.map(v => v.toEncodingData()) : undefined], ['global-state-schema', typeof this.globalStateSchema !== 'undefined' ? this.globalStateSchema.toEncodingData() : undefined], ['local-state-schema', typeof this.localStateSchema !== 'undefined' ? this.localStateSchema.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationParams: ${data}`);\n    }\n    return new ApplicationParams({\n      approvalProgram: data.get('approval-program'),\n      clearStateProgram: data.get('clear-state-program'),\n      creator: data.get('creator'),\n      extraProgramPages: data.get('extra-program-pages'),\n      globalState: typeof data.get('global-state') !== 'undefined' ? data.get('global-state').map(v => TealKeyValue.fromEncodingData(v)) : undefined,\n      globalStateSchema: typeof data.get('global-state-schema') !== 'undefined' ? ApplicationStateSchema.fromEncodingData(data.get('global-state-schema')) : undefined,\n      localStateSchema: typeof data.get('local-state-schema') !== 'undefined' ? ApplicationStateSchema.fromEncodingData(data.get('local-state-schema')) : undefined\n    });\n  }\n}\n/**\n * An operation against an application's global/local/box state.\n */\nexport class ApplicationStateOperation {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'app-state-type',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'key',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'operation',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'account',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'new-value',\n        valueSchema: new OptionalSchema(AvmValue.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationStateOperation` object.\n   * @param appStateType - Type of application state. Value `g` is **global state**, `l` is **local\n   * state**, `b` is **boxes**.\n   * @param key - The key (name) of the global/local/box state.\n   * @param operation - Operation type. Value `w` is **write**, `d` is **delete**.\n   * @param account - For local state changes, the address of the account associated with the local\n   * state.\n   * @param newValue - Represents an AVM value.\n   */\n  constructor({\n    appStateType,\n    key,\n    operation,\n    account,\n    newValue\n  }) {\n    this.appStateType = appStateType;\n    this.key = typeof key === 'string' ? base64ToBytes(key) : key;\n    this.operation = operation;\n    this.account = typeof account === 'string' ? Address.fromString(account) : account;\n    this.newValue = newValue;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationStateOperation.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['app-state-type', this.appStateType], ['key', this.key], ['operation', this.operation], ['account', typeof this.account !== 'undefined' ? this.account.toString() : undefined], ['new-value', typeof this.newValue !== 'undefined' ? this.newValue.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationStateOperation: ${data}`);\n    }\n    return new ApplicationStateOperation({\n      appStateType: data.get('app-state-type'),\n      key: data.get('key'),\n      operation: data.get('operation'),\n      account: data.get('account'),\n      newValue: typeof data.get('new-value') !== 'undefined' ? AvmValue.fromEncodingData(data.get('new-value')) : undefined\n    });\n  }\n}\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'num-byte-slice',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'num-uint',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numByteSlice - (nbs) num of byte slices.\n   * @param numUint - (nui) num of uints.\n   */\n  constructor({\n    numByteSlice,\n    numUint\n  }) {\n    this.numByteSlice = ensureSafeInteger(numByteSlice);\n    this.numUint = ensureSafeInteger(numUint);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationStateSchema.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['num-byte-slice', this.numByteSlice], ['num-uint', this.numUint]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationStateSchema: ${data}`);\n    }\n    return new ApplicationStateSchema({\n      numByteSlice: data.get('num-byte-slice'),\n      numUint: data.get('num-uint')\n    });\n  }\n}\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'index',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'params',\n        valueSchema: AssetParams.encodingSchema,\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor({\n    index,\n    params\n  }) {\n    this.index = ensureBigInt(index);\n    this.params = params;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Asset.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['index', this.index], ['params', this.params.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Asset: ${data}`);\n    }\n    return new Asset({\n      index: data.get('index'),\n      params: AssetParams.fromEncodingData(data.get('params') ?? new Map())\n    });\n  }\n}\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'amount',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'asset-id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'is-frozen',\n        valueSchema: new BooleanSchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen\n  }) {\n    this.amount = ensureBigInt(amount);\n    this.assetId = ensureBigInt(assetId);\n    this.isFrozen = isFrozen;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetHolding.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['amount', this.amount], ['asset-id', this.assetId], ['is-frozen', this.isFrozen]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHolding: ${data}`);\n    }\n    return new AssetHolding({\n      amount: data.get('amount'),\n      assetId: data.get('asset-id'),\n      isFrozen: data.get('is-frozen')\n    });\n  }\n}\n/**\n * References an asset held by an account.\n */\nexport class AssetHoldingReference {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'account',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'asset',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AssetHoldingReference` object.\n   * @param account - Address of the account holding the asset.\n   * @param asset - Asset ID of the holding.\n   */\n  constructor({\n    account,\n    asset\n  }) {\n    this.account = typeof account === 'string' ? Address.fromString(account) : account;\n    this.asset = ensureBigInt(asset);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetHoldingReference.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['account', this.account.toString()], ['asset', this.asset]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHoldingReference: ${data}`);\n    }\n    return new AssetHoldingReference({\n      account: data.get('account'),\n      asset: data.get('asset')\n    });\n  }\n}\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'creator',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'decimals',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'clawback',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'default-frozen',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'freeze',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'manager',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'metadata-hash',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'name',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'name-b64',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'reserve',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'unit-name',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'unit-name-b64',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'url',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'url-b64',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64\n  }) {\n    this.creator = creator;\n    this.decimals = ensureSafeInteger(decimals);\n    this.total = ensureBigInt(total);\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash = typeof metadataHash === 'string' ? base64ToBytes(metadataHash) : metadataHash;\n    this.name = name;\n    this.nameB64 = typeof nameB64 === 'string' ? base64ToBytes(nameB64) : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 = typeof unitNameB64 === 'string' ? base64ToBytes(unitNameB64) : unitNameB64;\n    this.url = url;\n    this.urlB64 = typeof urlB64 === 'string' ? base64ToBytes(urlB64) : urlB64;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetParams.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['creator', this.creator], ['decimals', this.decimals], ['total', this.total], ['clawback', this.clawback], ['default-frozen', this.defaultFrozen], ['freeze', this.freeze], ['manager', this.manager], ['metadata-hash', this.metadataHash], ['name', this.name], ['name-b64', this.nameB64], ['reserve', this.reserve], ['unit-name', this.unitName], ['unit-name-b64', this.unitNameB64], ['url', this.url], ['url-b64', this.urlB64]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetParams: ${data}`);\n    }\n    return new AssetParams({\n      creator: data.get('creator'),\n      decimals: data.get('decimals'),\n      total: data.get('total'),\n      clawback: data.get('clawback'),\n      defaultFrozen: data.get('default-frozen'),\n      freeze: data.get('freeze'),\n      manager: data.get('manager'),\n      metadataHash: data.get('metadata-hash'),\n      name: data.get('name'),\n      nameB64: data.get('name-b64'),\n      reserve: data.get('reserve'),\n      unitName: data.get('unit-name'),\n      unitNameB64: data.get('unit-name-b64'),\n      url: data.get('url'),\n      urlB64: data.get('url-b64')\n    });\n  }\n}\n/**\n * Represents an AVM key-value pair in an application store.\n */\nexport class AvmKeyValue {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'key',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'value',\n        valueSchema: AvmValue.encodingSchema,\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AvmKeyValue` object.\n   * @param key -\n   * @param value - Represents an AVM value.\n   */\n  constructor({\n    key,\n    value\n  }) {\n    this.key = typeof key === 'string' ? base64ToBytes(key) : key;\n    this.value = value;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AvmKeyValue.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['key', this.key], ['value', this.value.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AvmKeyValue: ${data}`);\n    }\n    return new AvmKeyValue({\n      key: data.get('key'),\n      value: AvmValue.fromEncodingData(data.get('value') ?? new Map())\n    });\n  }\n}\n/**\n * Represents an AVM value.\n */\nexport class AvmValue {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'type',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'bytes',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'uint',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AvmValue` object.\n   * @param type - value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\n   * @param bytes - bytes value.\n   * @param uint - uint value.\n   */\n  constructor({\n    type,\n    bytes,\n    uint\n  }) {\n    this.type = ensureSafeInteger(type);\n    this.bytes = typeof bytes === 'string' ? base64ToBytes(bytes) : bytes;\n    this.uint = typeof uint === 'undefined' ? undefined : ensureBigInt(uint);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AvmValue.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['type', this.type], ['bytes', this.bytes], ['uint', this.uint]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AvmValue: ${data}`);\n    }\n    return new AvmValue({\n      type: data.get('type'),\n      bytes: data.get('bytes'),\n      uint: data.get('uint')\n    });\n  }\n}\n/**\n * Hash of a block header.\n */\nexport class BlockHashResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'blockHash',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BlockHashResponse` object.\n   * @param blockhash - Block header hash.\n   */\n  constructor({\n    blockhash\n  }) {\n    this.blockhash = blockhash;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BlockHashResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['blockHash', this.blockhash]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockHashResponse: ${data}`);\n    }\n    return new BlockHashResponse({\n      blockhash: data.get('blockHash')\n    });\n  }\n}\n/**\n * All logs emitted in the given round. Each app call, whether top-level or inner,\n * that contains logs results in a separate AppCallLogs object. Therefore there may\n * be multiple AppCallLogs with the same application ID and outer transaction ID in\n * the event of multiple inner app calls to the same app. App calls with no logs\n * are not included in the response. AppCallLogs are returned in the same order\n * that their corresponding app call appeared in the block (pre-order traversal of\n * inner app calls)\n */\nexport class BlockLogsResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'logs',\n        valueSchema: new ArraySchema(AppCallLogs.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BlockLogsResponse` object.\n   * @param logs -\n   */\n  constructor({\n    logs\n  }) {\n    this.logs = logs;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BlockLogsResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['logs', this.logs.map(v => v.toEncodingData())]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockLogsResponse: ${data}`);\n    }\n    return new BlockLogsResponse({\n      logs: (data.get('logs') ?? []).map(v => AppCallLogs.fromEncodingData(v))\n    });\n  }\n}\n/**\n * Encoded block object.\n */\nexport class BlockResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'block',\n        valueSchema: Block.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'cert',\n        valueSchema: new OptionalSchema(UntypedValue.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BlockResponse` object.\n   * @param block - Block header data.\n   * @param cert - Optional certificate object. This is only included when the format is set to\n   * message pack.\n   */\n  constructor({\n    block,\n    cert\n  }) {\n    this.block = block;\n    this.cert = cert;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BlockResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['block', this.block.toEncodingData()], ['cert', typeof this.cert !== 'undefined' ? this.cert.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockResponse: ${data}`);\n    }\n    return new BlockResponse({\n      block: Block.fromEncodingData(data.get('block') ?? new Map()),\n      cert: typeof data.get('cert') !== 'undefined' ? UntypedValue.fromEncodingData(data.get('cert')) : undefined\n    });\n  }\n}\n/**\n * Top level transaction IDs in a block.\n */\nexport class BlockTxidsResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'blockTxids',\n        valueSchema: new ArraySchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BlockTxidsResponse` object.\n   * @param blocktxids - Block transaction IDs.\n   */\n  constructor({\n    blocktxids\n  }) {\n    this.blocktxids = blocktxids;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BlockTxidsResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['blockTxids', this.blocktxids]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockTxidsResponse: ${data}`);\n    }\n    return new BlockTxidsResponse({\n      blocktxids: data.get('blockTxids')\n    });\n  }\n}\n/**\n * Box name and its content.\n */\nexport class Box {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'name',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'value',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param round - The round for which this information is relevant\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor({\n    name,\n    round,\n    value\n  }) {\n    this.name = typeof name === 'string' ? base64ToBytes(name) : name;\n    this.round = ensureBigInt(round);\n    this.value = typeof value === 'string' ? base64ToBytes(value) : value;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Box.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['name', this.name], ['round', this.round], ['value', this.value]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Box: ${data}`);\n    }\n    return new Box({\n      name: data.get('name'),\n      round: data.get('round'),\n      value: data.get('value')\n    });\n  }\n}\n/**\n * Box descriptor describes a Box.\n */\nexport class BoxDescriptor {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'name',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor({\n    name\n  }) {\n    this.name = typeof name === 'string' ? base64ToBytes(name) : name;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BoxDescriptor.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['name', this.name]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BoxDescriptor: ${data}`);\n    }\n    return new BoxDescriptor({\n      name: data.get('name')\n    });\n  }\n}\n/**\n * References a box of an application.\n */\nexport class BoxReference {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'app',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'name',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BoxReference` object.\n   * @param app - Application ID which this box belongs to\n   * @param name - Base64 encoded box name\n   */\n  constructor({\n    app,\n    name\n  }) {\n    this.app = ensureBigInt(app);\n    this.name = typeof name === 'string' ? base64ToBytes(name) : name;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BoxReference.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['app', this.app], ['name', this.name]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BoxReference: ${data}`);\n    }\n    return new BoxReference({\n      app: data.get('app'),\n      name: data.get('name')\n    });\n  }\n}\n/**\n * Box names of an application\n */\nexport class BoxesResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'boxes',\n        valueSchema: new ArraySchema(BoxDescriptor.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param boxes -\n   */\n  constructor({\n    boxes\n  }) {\n    this.boxes = boxes;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BoxesResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['boxes', this.boxes.map(v => v.toEncodingData())]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BoxesResponse: ${data}`);\n    }\n    return new BoxesResponse({\n      boxes: (data.get('boxes') ?? []).map(v => BoxDescriptor.fromEncodingData(v))\n    });\n  }\n}\nexport class BuildVersion {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'branch',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'build_number',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'channel',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'commit_hash',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'major',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'minor',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BuildVersion` object.\n   * @param branch -\n   * @param buildNumber -\n   * @param channel -\n   * @param commitHash -\n   * @param major -\n   * @param minor -\n   */\n  constructor({\n    branch,\n    buildNumber,\n    channel,\n    commitHash,\n    major,\n    minor\n  }) {\n    this.branch = branch;\n    this.buildNumber = ensureSafeInteger(buildNumber);\n    this.channel = channel;\n    this.commitHash = commitHash;\n    this.major = ensureSafeInteger(major);\n    this.minor = ensureSafeInteger(minor);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BuildVersion.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['branch', this.branch], ['build_number', this.buildNumber], ['channel', this.channel], ['commit_hash', this.commitHash], ['major', this.major], ['minor', this.minor]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BuildVersion: ${data}`);\n    }\n    return new BuildVersion({\n      branch: data.get('branch'),\n      buildNumber: data.get('build_number'),\n      channel: data.get('channel'),\n      commitHash: data.get('commit_hash'),\n      major: data.get('major'),\n      minor: data.get('minor')\n    });\n  }\n}\n/**\n * Teal compile Result\n */\nexport class CompileResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'hash',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'result',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'sourcemap',\n        valueSchema: new OptionalSchema(UntypedValue.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `CompileResponse` object.\n   * @param hash - base32 SHA512_256 of program bytes (Address style)\n   * @param result - base64 encoded program bytes\n   * @param sourcemap - JSON of the source map\n   */\n  constructor({\n    hash,\n    result,\n    sourcemap\n  }) {\n    this.hash = hash;\n    this.result = result;\n    this.sourcemap = sourcemap;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return CompileResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['hash', this.hash], ['result', this.result], ['sourcemap', typeof this.sourcemap !== 'undefined' ? this.sourcemap.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded CompileResponse: ${data}`);\n    }\n    return new CompileResponse({\n      hash: data.get('hash'),\n      result: data.get('result'),\n      sourcemap: typeof data.get('sourcemap') !== 'undefined' ? UntypedValue.fromEncodingData(data.get('sourcemap')) : undefined\n    });\n  }\n}\n/**\n * Teal disassembly Result\n */\nexport class DisassembleResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'result',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `DisassembleResponse` object.\n   * @param result - disassembled Teal code\n   */\n  constructor({\n    result\n  }) {\n    this.result = result;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return DisassembleResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['result', this.result]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DisassembleResponse: ${data}`);\n    }\n    return new DisassembleResponse({\n      result: data.get('result')\n    });\n  }\n}\n/**\n * Request data type for dryrun endpoint. Given the Transactions and simulated\n * ledger state upload, run TEAL scripts and return debugging information.\n */\nexport class DryrunRequest {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'accounts',\n        valueSchema: new ArraySchema(Account.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'apps',\n        valueSchema: new ArraySchema(Application.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'latest-timestamp',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'protocol-version',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'sources',\n        valueSchema: new ArraySchema(DryrunSource.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'txns',\n        valueSchema: new ArraySchema(SignedTransaction.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `DryrunRequest` object.\n   * @param accounts -\n   * @param apps -\n   * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n   * confirmed timestamp this algod is attached to.\n   * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\n   * whatever the current protocol of the network this algod is running in.\n   * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\n   * network this algod is attached to.\n   * @param sources -\n   * @param txns -\n   */\n  constructor({\n    accounts,\n    apps,\n    latestTimestamp,\n    protocolVersion,\n    round,\n    sources,\n    txns\n  }) {\n    this.accounts = accounts;\n    this.apps = apps;\n    this.latestTimestamp = ensureSafeInteger(latestTimestamp);\n    this.protocolVersion = protocolVersion;\n    this.round = ensureBigInt(round);\n    this.sources = sources;\n    this.txns = txns;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return DryrunRequest.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['accounts', this.accounts.map(v => v.toEncodingData())], ['apps', this.apps.map(v => v.toEncodingData())], ['latest-timestamp', this.latestTimestamp], ['protocol-version', this.protocolVersion], ['round', this.round], ['sources', this.sources.map(v => v.toEncodingData())], ['txns', this.txns.map(v => v.toEncodingData())]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DryrunRequest: ${data}`);\n    }\n    return new DryrunRequest({\n      accounts: (data.get('accounts') ?? []).map(v => Account.fromEncodingData(v)),\n      apps: (data.get('apps') ?? []).map(v => Application.fromEncodingData(v)),\n      latestTimestamp: data.get('latest-timestamp'),\n      protocolVersion: data.get('protocol-version'),\n      round: data.get('round'),\n      sources: (data.get('sources') ?? []).map(v => DryrunSource.fromEncodingData(v)),\n      txns: (data.get('txns') ?? []).map(v => SignedTransaction.fromEncodingData(v))\n    });\n  }\n}\n/**\n * DryrunResponse contains per-txn debug information from a dryrun.\n */\nexport class DryrunResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'error',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'protocol-version',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'txns',\n        valueSchema: new ArraySchema(DryrunTxnResult.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `DryrunResponse` object.\n   * @param error -\n   * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\n   * @param txns -\n   */\n  constructor({\n    error,\n    protocolVersion,\n    txns\n  }) {\n    this.error = error;\n    this.protocolVersion = protocolVersion;\n    this.txns = txns;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return DryrunResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['error', this.error], ['protocol-version', this.protocolVersion], ['txns', this.txns.map(v => v.toEncodingData())]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DryrunResponse: ${data}`);\n    }\n    return new DryrunResponse({\n      error: data.get('error'),\n      protocolVersion: data.get('protocol-version'),\n      txns: (data.get('txns') ?? []).map(v => DryrunTxnResult.fromEncodingData(v))\n    });\n  }\n}\n/**\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\n * transactions or application state.\n */\nexport class DryrunSource {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'app-index',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'field-name',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'source',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'txn-index',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `DryrunSource` object.\n   * @param appIndex -\n   * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n   * Approval Program or Clear State Program of application[this.AppIndex].\n   * @param source -\n   * @param txnIndex -\n   */\n  constructor({\n    appIndex,\n    fieldName,\n    source,\n    txnIndex\n  }) {\n    this.appIndex = ensureBigInt(appIndex);\n    this.fieldName = fieldName;\n    this.source = source;\n    this.txnIndex = ensureSafeInteger(txnIndex);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return DryrunSource.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['app-index', this.appIndex], ['field-name', this.fieldName], ['source', this.source], ['txn-index', this.txnIndex]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DryrunSource: ${data}`);\n    }\n    return new DryrunSource({\n      appIndex: data.get('app-index'),\n      fieldName: data.get('field-name'),\n      source: data.get('source'),\n      txnIndex: data.get('txn-index')\n    });\n  }\n}\n/**\n * Stores the TEAL eval step data\n */\nexport class DryrunState {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'line',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'pc',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'stack',\n        valueSchema: new ArraySchema(TealValue.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'error',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'scratch',\n        valueSchema: new OptionalSchema(new ArraySchema(TealValue.encodingSchema)),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `DryrunState` object.\n   * @param line - Line number\n   * @param pc - Program counter\n   * @param stack -\n   * @param error - Evaluation error if any\n   * @param scratch -\n   */\n  constructor({\n    line,\n    pc,\n    stack,\n    error,\n    scratch\n  }) {\n    this.line = ensureSafeInteger(line);\n    this.pc = ensureSafeInteger(pc);\n    this.stack = stack;\n    this.error = error;\n    this.scratch = scratch;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return DryrunState.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['line', this.line], ['pc', this.pc], ['stack', this.stack.map(v => v.toEncodingData())], ['error', this.error], ['scratch', typeof this.scratch !== 'undefined' ? this.scratch.map(v => v.toEncodingData()) : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DryrunState: ${data}`);\n    }\n    return new DryrunState({\n      line: data.get('line'),\n      pc: data.get('pc'),\n      stack: (data.get('stack') ?? []).map(v => TealValue.fromEncodingData(v)),\n      error: data.get('error'),\n      scratch: typeof data.get('scratch') !== 'undefined' ? data.get('scratch').map(v => TealValue.fromEncodingData(v)) : undefined\n    });\n  }\n}\n/**\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\n * information and state updates from a dryrun.\n */\nexport class DryrunTxnResult {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'disassembly',\n        valueSchema: new ArraySchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'app-call-messages',\n        valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n        omitEmpty: true\n      }, {\n        key: 'app-call-trace',\n        valueSchema: new OptionalSchema(new ArraySchema(DryrunState.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'budget-added',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'budget-consumed',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'global-delta',\n        valueSchema: new OptionalSchema(new ArraySchema(EvalDeltaKeyValue.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'local-deltas',\n        valueSchema: new OptionalSchema(new ArraySchema(AccountStateDelta.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'logic-sig-disassembly',\n        valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n        omitEmpty: true\n      }, {\n        key: 'logic-sig-messages',\n        valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n        omitEmpty: true\n      }, {\n        key: 'logic-sig-trace',\n        valueSchema: new OptionalSchema(new ArraySchema(DryrunState.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'logs',\n        valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `DryrunTxnResult` object.\n   * @param disassembly - Disassembled program line by line.\n   * @param appCallMessages -\n   * @param appCallTrace -\n   * @param budgetAdded - Budget added during execution of app call transaction.\n   * @param budgetConsumed - Budget consumed during execution of app call transaction.\n   * @param globalDelta - Application state delta.\n   * @param localDeltas -\n   * @param logicSigDisassembly - Disassembled lsig program line by line.\n   * @param logicSigMessages -\n   * @param logicSigTrace -\n   * @param logs -\n   */\n  constructor({\n    disassembly,\n    appCallMessages,\n    appCallTrace,\n    budgetAdded,\n    budgetConsumed,\n    globalDelta,\n    localDeltas,\n    logicSigDisassembly,\n    logicSigMessages,\n    logicSigTrace,\n    logs\n  }) {\n    this.disassembly = disassembly;\n    this.appCallMessages = appCallMessages;\n    this.appCallTrace = appCallTrace;\n    this.budgetAdded = typeof budgetAdded === 'undefined' ? undefined : ensureSafeInteger(budgetAdded);\n    this.budgetConsumed = typeof budgetConsumed === 'undefined' ? undefined : ensureSafeInteger(budgetConsumed);\n    this.globalDelta = globalDelta;\n    this.localDeltas = localDeltas;\n    this.logicSigDisassembly = logicSigDisassembly;\n    this.logicSigMessages = logicSigMessages;\n    this.logicSigTrace = logicSigTrace;\n    this.logs = logs;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return DryrunTxnResult.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['disassembly', this.disassembly], ['app-call-messages', this.appCallMessages], ['app-call-trace', typeof this.appCallTrace !== 'undefined' ? this.appCallTrace.map(v => v.toEncodingData()) : undefined], ['budget-added', this.budgetAdded], ['budget-consumed', this.budgetConsumed], ['global-delta', typeof this.globalDelta !== 'undefined' ? this.globalDelta.map(v => v.toEncodingData()) : undefined], ['local-deltas', typeof this.localDeltas !== 'undefined' ? this.localDeltas.map(v => v.toEncodingData()) : undefined], ['logic-sig-disassembly', this.logicSigDisassembly], ['logic-sig-messages', this.logicSigMessages], ['logic-sig-trace', typeof this.logicSigTrace !== 'undefined' ? this.logicSigTrace.map(v => v.toEncodingData()) : undefined], ['logs', this.logs]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DryrunTxnResult: ${data}`);\n    }\n    return new DryrunTxnResult({\n      disassembly: data.get('disassembly'),\n      appCallMessages: data.get('app-call-messages'),\n      appCallTrace: typeof data.get('app-call-trace') !== 'undefined' ? data.get('app-call-trace').map(v => DryrunState.fromEncodingData(v)) : undefined,\n      budgetAdded: data.get('budget-added'),\n      budgetConsumed: data.get('budget-consumed'),\n      globalDelta: typeof data.get('global-delta') !== 'undefined' ? data.get('global-delta').map(v => EvalDeltaKeyValue.fromEncodingData(v)) : undefined,\n      localDeltas: typeof data.get('local-deltas') !== 'undefined' ? data.get('local-deltas').map(v => AccountStateDelta.fromEncodingData(v)) : undefined,\n      logicSigDisassembly: data.get('logic-sig-disassembly'),\n      logicSigMessages: data.get('logic-sig-messages'),\n      logicSigTrace: typeof data.get('logic-sig-trace') !== 'undefined' ? data.get('logic-sig-trace').map(v => DryrunState.fromEncodingData(v)) : undefined,\n      logs: data.get('logs')\n    });\n  }\n}\n/**\n * An error response with optional data field.\n */\nexport class ErrorResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'message',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'data',\n        valueSchema: new OptionalSchema(UntypedValue.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor({\n    message,\n    data\n  }) {\n    this.message = message;\n    this.data = data;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ErrorResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['message', this.message], ['data', typeof this.data !== 'undefined' ? this.data.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ErrorResponse: ${data}`);\n    }\n    return new ErrorResponse({\n      message: data.get('message'),\n      data: typeof data.get('data') !== 'undefined' ? UntypedValue.fromEncodingData(data.get('data')) : undefined\n    });\n  }\n}\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'action',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'bytes',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'uint',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    action,\n    bytes,\n    uint\n  }) {\n    this.action = ensureSafeInteger(action);\n    this.bytes = bytes;\n    this.uint = typeof uint === 'undefined' ? undefined : ensureBigInt(uint);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return EvalDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['action', this.action], ['bytes', this.bytes], ['uint', this.uint]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded EvalDelta: ${data}`);\n    }\n    return new EvalDelta({\n      action: data.get('action'),\n      bytes: data.get('bytes'),\n      uint: data.get('uint')\n    });\n  }\n}\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'key',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'value',\n        valueSchema: EvalDelta.encodingSchema,\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor({\n    key,\n    value\n  }) {\n    this.key = key;\n    this.value = value;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return EvalDeltaKeyValue.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['key', this.key], ['value', this.value.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded EvalDeltaKeyValue: ${data}`);\n    }\n    return new EvalDeltaKeyValue({\n      key: data.get('key'),\n      value: EvalDelta.fromEncodingData(data.get('value') ?? new Map())\n    });\n  }\n}\n/**\n * Response containing the timestamp offset in seconds\n */\nexport class GetBlockTimeStampOffsetResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'offset',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `GetBlockTimeStampOffsetResponse` object.\n   * @param offset - Timestamp offset in seconds.\n   */\n  constructor({\n    offset\n  }) {\n    this.offset = ensureSafeInteger(offset);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return GetBlockTimeStampOffsetResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['offset', this.offset]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded GetBlockTimeStampOffsetResponse: ${data}`);\n    }\n    return new GetBlockTimeStampOffsetResponse({\n      offset: data.get('offset')\n    });\n  }\n}\n/**\n * Response containing the ledger's minimum sync round\n */\nexport class GetSyncRoundResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `GetSyncRoundResponse` object.\n   * @param round - The minimum sync round for the ledger.\n   */\n  constructor({\n    round\n  }) {\n    this.round = ensureBigInt(round);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return GetSyncRoundResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['round', this.round]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded GetSyncRoundResponse: ${data}`);\n    }\n    return new GetSyncRoundResponse({\n      round: data.get('round')\n    });\n  }\n}\n/**\n * A single Delta containing the key, the previous value and the current value for\n * a single round.\n */\nexport class KvDelta {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'key',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'value',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `KvDelta` object.\n   * @param key - The key, base64 encoded.\n   * @param value - The new value of the KV store entry, base64 encoded.\n   */\n  constructor({\n    key,\n    value\n  }) {\n    this.key = typeof key === 'string' ? base64ToBytes(key) : key;\n    this.value = typeof value === 'string' ? base64ToBytes(value) : value;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return KvDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['key', this.key], ['value', this.value]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded KvDelta: ${data}`);\n    }\n    return new KvDelta({\n      key: data.get('key'),\n      value: data.get('value')\n    });\n  }\n}\n/**\n * Contains a ledger delta for a single transaction group\n */\nexport class LedgerStateDeltaForTransactionGroup {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'Delta',\n        valueSchema: LedgerStateDelta.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'Ids',\n        valueSchema: new ArraySchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `LedgerStateDeltaForTransactionGroup` object.\n   * @param delta - Ledger StateDelta object\n   * @param ids -\n   */\n  constructor({\n    delta,\n    ids\n  }) {\n    this.delta = delta;\n    this.ids = ids;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return LedgerStateDeltaForTransactionGroup.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Delta', this.delta.toEncodingData()], ['Ids', this.ids]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded LedgerStateDeltaForTransactionGroup: ${data}`);\n    }\n    return new LedgerStateDeltaForTransactionGroup({\n      delta: LedgerStateDelta.fromEncodingData(data.get('Delta') ?? new Map()),\n      ids: data.get('Ids')\n    });\n  }\n}\n/**\n * Proof of membership and position of a light block header.\n */\nexport class LightBlockHeaderProof {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'index',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'proof',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'treedepth',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `LightBlockHeaderProof` object.\n   * @param index - The index of the light block header in the vector commitment tree\n   * @param proof - The encoded proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  constructor({\n    index,\n    proof,\n    treedepth\n  }) {\n    this.index = ensureSafeInteger(index);\n    this.proof = typeof proof === 'string' ? base64ToBytes(proof) : proof;\n    this.treedepth = ensureSafeInteger(treedepth);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return LightBlockHeaderProof.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['index', this.index], ['proof', this.proof], ['treedepth', this.treedepth]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded LightBlockHeaderProof: ${data}`);\n    }\n    return new LightBlockHeaderProof({\n      index: data.get('index'),\n      proof: data.get('proof'),\n      treedepth: data.get('treedepth')\n    });\n  }\n}\n/**\n *\n */\nexport class NodeStatusResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'catchup-time',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'last-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'last-version',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'next-version',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'next-version-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'next-version-supported',\n        valueSchema: new BooleanSchema(),\n        omitEmpty: true\n      }, {\n        key: 'stopped-at-unsupported-round',\n        valueSchema: new BooleanSchema(),\n        omitEmpty: true\n      }, {\n        key: 'time-since-last-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'catchpoint',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'catchpoint-acquired-blocks',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'catchpoint-processed-accounts',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'catchpoint-processed-kvs',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'catchpoint-total-accounts',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'catchpoint-total-blocks',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'catchpoint-total-kvs',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'catchpoint-verified-accounts',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'catchpoint-verified-kvs',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'last-catchpoint',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-delay',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-next-protocol-vote-before',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-no-votes',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-node-vote',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-vote-rounds',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-votes',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-votes-required',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-yes-votes',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `NodeStatusResponse` object.\n   * @param catchupTime - CatchupTime in nanoseconds\n   * @param lastRound - LastRound indicates the last round seen\n   * @param lastVersion - LastVersion indicates the last consensus version supported\n   * @param nextVersion - NextVersion of consensus protocol to use\n   * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\n   * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\n   * by this node\n   * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\n   * rounds and has stopped making progress\n   * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\n   * @param catchpoint - The current catchpoint that is being caught up to\n   * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\n   * catchup\n   * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\n   * far as part of the catchup\n   * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * processed so far as part of the catchup\n   * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\n   * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\n   * catchup\n   * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\n   * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\n   * far as part of the catchup\n   * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * verified so far as part of the catchup\n   * @param lastCatchpoint - The last catchpoint seen by the node\n   * @param upgradeDelay - Upgrade delay\n   * @param upgradeNextProtocolVoteBefore - Next protocol round\n   * @param upgradeNoVotes - No votes cast for consensus upgrade\n   * @param upgradeNodeVote - This node's upgrade vote\n   * @param upgradeVoteRounds - Total voting rounds for current upgrade\n   * @param upgradeVotes - Total votes cast for consensus upgrade\n   * @param upgradeVotesRequired - Yes votes required for consensus upgrade\n   * @param upgradeYesVotes - Yes votes cast for consensus upgrade\n   */\n  constructor({\n    catchupTime,\n    lastRound,\n    lastVersion,\n    nextVersion,\n    nextVersionRound,\n    nextVersionSupported,\n    stoppedAtUnsupportedRound,\n    timeSinceLastRound,\n    catchpoint,\n    catchpointAcquiredBlocks,\n    catchpointProcessedAccounts,\n    catchpointProcessedKvs,\n    catchpointTotalAccounts,\n    catchpointTotalBlocks,\n    catchpointTotalKvs,\n    catchpointVerifiedAccounts,\n    catchpointVerifiedKvs,\n    lastCatchpoint,\n    upgradeDelay,\n    upgradeNextProtocolVoteBefore,\n    upgradeNoVotes,\n    upgradeNodeVote,\n    upgradeVoteRounds,\n    upgradeVotes,\n    upgradeVotesRequired,\n    upgradeYesVotes\n  }) {\n    this.catchupTime = ensureBigInt(catchupTime);\n    this.lastRound = ensureBigInt(lastRound);\n    this.lastVersion = lastVersion;\n    this.nextVersion = nextVersion;\n    this.nextVersionRound = ensureBigInt(nextVersionRound);\n    this.nextVersionSupported = nextVersionSupported;\n    this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n    this.timeSinceLastRound = ensureBigInt(timeSinceLastRound);\n    this.catchpoint = catchpoint;\n    this.catchpointAcquiredBlocks = typeof catchpointAcquiredBlocks === 'undefined' ? undefined : ensureSafeInteger(catchpointAcquiredBlocks);\n    this.catchpointProcessedAccounts = typeof catchpointProcessedAccounts === 'undefined' ? undefined : ensureSafeInteger(catchpointProcessedAccounts);\n    this.catchpointProcessedKvs = typeof catchpointProcessedKvs === 'undefined' ? undefined : ensureSafeInteger(catchpointProcessedKvs);\n    this.catchpointTotalAccounts = typeof catchpointTotalAccounts === 'undefined' ? undefined : ensureSafeInteger(catchpointTotalAccounts);\n    this.catchpointTotalBlocks = typeof catchpointTotalBlocks === 'undefined' ? undefined : ensureSafeInteger(catchpointTotalBlocks);\n    this.catchpointTotalKvs = typeof catchpointTotalKvs === 'undefined' ? undefined : ensureSafeInteger(catchpointTotalKvs);\n    this.catchpointVerifiedAccounts = typeof catchpointVerifiedAccounts === 'undefined' ? undefined : ensureSafeInteger(catchpointVerifiedAccounts);\n    this.catchpointVerifiedKvs = typeof catchpointVerifiedKvs === 'undefined' ? undefined : ensureSafeInteger(catchpointVerifiedKvs);\n    this.lastCatchpoint = lastCatchpoint;\n    this.upgradeDelay = typeof upgradeDelay === 'undefined' ? undefined : ensureBigInt(upgradeDelay);\n    this.upgradeNextProtocolVoteBefore = typeof upgradeNextProtocolVoteBefore === 'undefined' ? undefined : ensureBigInt(upgradeNextProtocolVoteBefore);\n    this.upgradeNoVotes = typeof upgradeNoVotes === 'undefined' ? undefined : ensureSafeInteger(upgradeNoVotes);\n    this.upgradeNodeVote = upgradeNodeVote;\n    this.upgradeVoteRounds = typeof upgradeVoteRounds === 'undefined' ? undefined : ensureSafeInteger(upgradeVoteRounds);\n    this.upgradeVotes = typeof upgradeVotes === 'undefined' ? undefined : ensureSafeInteger(upgradeVotes);\n    this.upgradeVotesRequired = typeof upgradeVotesRequired === 'undefined' ? undefined : ensureSafeInteger(upgradeVotesRequired);\n    this.upgradeYesVotes = typeof upgradeYesVotes === 'undefined' ? undefined : ensureSafeInteger(upgradeYesVotes);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return NodeStatusResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['catchup-time', this.catchupTime], ['last-round', this.lastRound], ['last-version', this.lastVersion], ['next-version', this.nextVersion], ['next-version-round', this.nextVersionRound], ['next-version-supported', this.nextVersionSupported], ['stopped-at-unsupported-round', this.stoppedAtUnsupportedRound], ['time-since-last-round', this.timeSinceLastRound], ['catchpoint', this.catchpoint], ['catchpoint-acquired-blocks', this.catchpointAcquiredBlocks], ['catchpoint-processed-accounts', this.catchpointProcessedAccounts], ['catchpoint-processed-kvs', this.catchpointProcessedKvs], ['catchpoint-total-accounts', this.catchpointTotalAccounts], ['catchpoint-total-blocks', this.catchpointTotalBlocks], ['catchpoint-total-kvs', this.catchpointTotalKvs], ['catchpoint-verified-accounts', this.catchpointVerifiedAccounts], ['catchpoint-verified-kvs', this.catchpointVerifiedKvs], ['last-catchpoint', this.lastCatchpoint], ['upgrade-delay', this.upgradeDelay], ['upgrade-next-protocol-vote-before', this.upgradeNextProtocolVoteBefore], ['upgrade-no-votes', this.upgradeNoVotes], ['upgrade-node-vote', this.upgradeNodeVote], ['upgrade-vote-rounds', this.upgradeVoteRounds], ['upgrade-votes', this.upgradeVotes], ['upgrade-votes-required', this.upgradeVotesRequired], ['upgrade-yes-votes', this.upgradeYesVotes]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded NodeStatusResponse: ${data}`);\n    }\n    return new NodeStatusResponse({\n      catchupTime: data.get('catchup-time'),\n      lastRound: data.get('last-round'),\n      lastVersion: data.get('last-version'),\n      nextVersion: data.get('next-version'),\n      nextVersionRound: data.get('next-version-round'),\n      nextVersionSupported: data.get('next-version-supported'),\n      stoppedAtUnsupportedRound: data.get('stopped-at-unsupported-round'),\n      timeSinceLastRound: data.get('time-since-last-round'),\n      catchpoint: data.get('catchpoint'),\n      catchpointAcquiredBlocks: data.get('catchpoint-acquired-blocks'),\n      catchpointProcessedAccounts: data.get('catchpoint-processed-accounts'),\n      catchpointProcessedKvs: data.get('catchpoint-processed-kvs'),\n      catchpointTotalAccounts: data.get('catchpoint-total-accounts'),\n      catchpointTotalBlocks: data.get('catchpoint-total-blocks'),\n      catchpointTotalKvs: data.get('catchpoint-total-kvs'),\n      catchpointVerifiedAccounts: data.get('catchpoint-verified-accounts'),\n      catchpointVerifiedKvs: data.get('catchpoint-verified-kvs'),\n      lastCatchpoint: data.get('last-catchpoint'),\n      upgradeDelay: data.get('upgrade-delay'),\n      upgradeNextProtocolVoteBefore: data.get('upgrade-next-protocol-vote-before'),\n      upgradeNoVotes: data.get('upgrade-no-votes'),\n      upgradeNodeVote: data.get('upgrade-node-vote'),\n      upgradeVoteRounds: data.get('upgrade-vote-rounds'),\n      upgradeVotes: data.get('upgrade-votes'),\n      upgradeVotesRequired: data.get('upgrade-votes-required'),\n      upgradeYesVotes: data.get('upgrade-yes-votes')\n    });\n  }\n}\n/**\n * Details about a pending transaction. If the transaction was recently confirmed,\n * includes confirmation details like the round and reward details.\n */\nexport class PendingTransactionResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'pool-error',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'txn',\n        valueSchema: SignedTransaction.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'application-index',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'asset-closing-amount',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'asset-index',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'close-rewards',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'closing-amount',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'confirmed-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'global-state-delta',\n        valueSchema: new OptionalSchema(new ArraySchema(EvalDeltaKeyValue.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'inner-txns',\n        valueSchema: new OptionalSchema(new ArraySchema(PendingTransactionResponse.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'local-state-delta',\n        valueSchema: new OptionalSchema(new ArraySchema(AccountStateDelta.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'logs',\n        valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),\n        omitEmpty: true\n      }, {\n        key: 'receiver-rewards',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'sender-rewards',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `PendingTransactionResponse` object.\n   * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\n   * (and specifies why that happened). An empty string indicates the transaction\n   * wasn't kicked out of this node's txpool due to an error.\n   * @param txn - The raw signed transaction.\n   * @param applicationIndex - The application index if the transaction was found and it created an\n   * application.\n   * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\n   * @param assetIndex - The asset index if the transaction was found and it created an asset.\n   * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\n   * @param closingAmount - Closing amount for the transaction.\n   * @param confirmedRound - The round where this transaction was confirmed, if present.\n   * @param globalStateDelta - Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param localStateDelta - Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - Logs for the application being executed by this transaction.\n   * @param receiverRewards - Rewards in microalgos applied to the receiver account.\n   * @param senderRewards - Rewards in microalgos applied to the sender account.\n   */\n  constructor({\n    poolError,\n    txn,\n    applicationIndex,\n    assetClosingAmount,\n    assetIndex,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    globalStateDelta,\n    innerTxns,\n    localStateDelta,\n    logs,\n    receiverRewards,\n    senderRewards\n  }) {\n    this.poolError = poolError;\n    this.txn = txn;\n    this.applicationIndex = typeof applicationIndex === 'undefined' ? undefined : ensureBigInt(applicationIndex);\n    this.assetClosingAmount = typeof assetClosingAmount === 'undefined' ? undefined : ensureBigInt(assetClosingAmount);\n    this.assetIndex = typeof assetIndex === 'undefined' ? undefined : ensureBigInt(assetIndex);\n    this.closeRewards = typeof closeRewards === 'undefined' ? undefined : ensureBigInt(closeRewards);\n    this.closingAmount = typeof closingAmount === 'undefined' ? undefined : ensureBigInt(closingAmount);\n    this.confirmedRound = typeof confirmedRound === 'undefined' ? undefined : ensureBigInt(confirmedRound);\n    this.globalStateDelta = globalStateDelta;\n    this.innerTxns = innerTxns;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.receiverRewards = typeof receiverRewards === 'undefined' ? undefined : ensureBigInt(receiverRewards);\n    this.senderRewards = typeof senderRewards === 'undefined' ? undefined : ensureBigInt(senderRewards);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return PendingTransactionResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['pool-error', this.poolError], ['txn', this.txn.toEncodingData()], ['application-index', this.applicationIndex], ['asset-closing-amount', this.assetClosingAmount], ['asset-index', this.assetIndex], ['close-rewards', this.closeRewards], ['closing-amount', this.closingAmount], ['confirmed-round', this.confirmedRound], ['global-state-delta', typeof this.globalStateDelta !== 'undefined' ? this.globalStateDelta.map(v => v.toEncodingData()) : undefined], ['inner-txns', typeof this.innerTxns !== 'undefined' ? this.innerTxns.map(v => v.toEncodingData()) : undefined], ['local-state-delta', typeof this.localStateDelta !== 'undefined' ? this.localStateDelta.map(v => v.toEncodingData()) : undefined], ['logs', this.logs], ['receiver-rewards', this.receiverRewards], ['sender-rewards', this.senderRewards]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded PendingTransactionResponse: ${data}`);\n    }\n    return new PendingTransactionResponse({\n      poolError: data.get('pool-error'),\n      txn: SignedTransaction.fromEncodingData(data.get('txn') ?? new Map()),\n      applicationIndex: data.get('application-index'),\n      assetClosingAmount: data.get('asset-closing-amount'),\n      assetIndex: data.get('asset-index'),\n      closeRewards: data.get('close-rewards'),\n      closingAmount: data.get('closing-amount'),\n      confirmedRound: data.get('confirmed-round'),\n      globalStateDelta: typeof data.get('global-state-delta') !== 'undefined' ? data.get('global-state-delta').map(v => EvalDeltaKeyValue.fromEncodingData(v)) : undefined,\n      innerTxns: typeof data.get('inner-txns') !== 'undefined' ? data.get('inner-txns').map(v => PendingTransactionResponse.fromEncodingData(v)) : undefined,\n      localStateDelta: typeof data.get('local-state-delta') !== 'undefined' ? data.get('local-state-delta').map(v => AccountStateDelta.fromEncodingData(v)) : undefined,\n      logs: data.get('logs'),\n      receiverRewards: data.get('receiver-rewards'),\n      senderRewards: data.get('sender-rewards')\n    });\n  }\n}\n/**\n * A potentially truncated list of transactions currently in the node's transaction\n * pool. You can compute whether or not the list is truncated if the number of\n * elements in the **top-transactions** array is fewer than **total-transactions**.\n */\nexport class PendingTransactionsResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'top-transactions',\n        valueSchema: new ArraySchema(SignedTransaction.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'total-transactions',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `PendingTransactionsResponse` object.\n   * @param topTransactions - An array of signed transaction objects.\n   * @param totalTransactions - Total number of transactions in the pool.\n   */\n  constructor({\n    topTransactions,\n    totalTransactions\n  }) {\n    this.topTransactions = topTransactions;\n    this.totalTransactions = ensureSafeInteger(totalTransactions);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return PendingTransactionsResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['top-transactions', this.topTransactions.map(v => v.toEncodingData())], ['total-transactions', this.totalTransactions]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded PendingTransactionsResponse: ${data}`);\n    }\n    return new PendingTransactionsResponse({\n      topTransactions: (data.get('top-transactions') ?? []).map(v => SignedTransaction.fromEncodingData(v)),\n      totalTransactions: data.get('total-transactions')\n    });\n  }\n}\n/**\n * Transaction ID of the submission.\n */\nexport class PostTransactionsResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'txId',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `PostTransactionsResponse` object.\n   * @param txid - encoding of the transaction hash.\n   */\n  constructor({\n    txid\n  }) {\n    this.txid = txid;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return PostTransactionsResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['txId', this.txid]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded PostTransactionsResponse: ${data}`);\n    }\n    return new PostTransactionsResponse({\n      txid: data.get('txId')\n    });\n  }\n}\n/**\n * A write operation into a scratch slot.\n */\nexport class ScratchChange {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'new-value',\n        valueSchema: AvmValue.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'slot',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ScratchChange` object.\n   * @param newValue - Represents an AVM value.\n   * @param slot - The scratch slot written.\n   */\n  constructor({\n    newValue,\n    slot\n  }) {\n    this.newValue = newValue;\n    this.slot = ensureSafeInteger(slot);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ScratchChange.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['new-value', this.newValue.toEncodingData()], ['slot', this.slot]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ScratchChange: ${data}`);\n    }\n    return new ScratchChange({\n      newValue: AvmValue.fromEncodingData(data.get('new-value') ?? new Map()),\n      slot: data.get('slot')\n    });\n  }\n}\n/**\n * Initial states of resources that were accessed during simulation.\n */\nexport class SimulateInitialStates {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'app-initial-states',\n        valueSchema: new OptionalSchema(new ArraySchema(ApplicationInitialStates.encodingSchema)),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulateInitialStates` object.\n   * @param appInitialStates - The initial states of accessed application before simulation. The order of this\n   * array is arbitrary.\n   */\n  constructor({\n    appInitialStates\n  }) {\n    this.appInitialStates = appInitialStates;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulateInitialStates.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['app-initial-states', typeof this.appInitialStates !== 'undefined' ? this.appInitialStates.map(v => v.toEncodingData()) : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateInitialStates: ${data}`);\n    }\n    return new SimulateInitialStates({\n      appInitialStates: typeof data.get('app-initial-states') !== 'undefined' ? data.get('app-initial-states').map(v => ApplicationInitialStates.fromEncodingData(v)) : undefined\n    });\n  }\n}\n/**\n * Request type for simulation endpoint.\n */\nexport class SimulateRequest {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'txn-groups',\n        valueSchema: new ArraySchema(SimulateRequestTransactionGroup.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'allow-empty-signatures',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'allow-more-logging',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'allow-unnamed-resources',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'exec-trace-config',\n        valueSchema: new OptionalSchema(SimulateTraceConfig.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'extra-opcode-budget',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'fix-signers',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulateRequest` object.\n   * @param txnGroups - The transaction groups to simulate.\n   * @param allowEmptySignatures - Allows transactions without signatures to be simulated as if they had correct\n   * signatures.\n   * @param allowMoreLogging - Lifts limits on log opcode usage during simulation.\n   * @param allowUnnamedResources - Allows access to unnamed resources during simulation.\n   * @param execTraceConfig - An object that configures simulation execution trace.\n   * @param extraOpcodeBudget - Applies extra opcode budget during simulation for each transaction group.\n   * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed\n   * during evaluation.\n   * @param round - If provided, specifies the round preceding the simulation. State changes through\n   * this round will be used to run this simulation. Usually only the 4 most recent\n   * rounds will be available (controlled by the node config value MaxAcctLookback).\n   * If not specified, defaults to the latest available round.\n   */\n  constructor({\n    txnGroups,\n    allowEmptySignatures,\n    allowMoreLogging,\n    allowUnnamedResources,\n    execTraceConfig,\n    extraOpcodeBudget,\n    fixSigners,\n    round\n  }) {\n    this.txnGroups = txnGroups;\n    this.allowEmptySignatures = allowEmptySignatures;\n    this.allowMoreLogging = allowMoreLogging;\n    this.allowUnnamedResources = allowUnnamedResources;\n    this.execTraceConfig = execTraceConfig;\n    this.extraOpcodeBudget = typeof extraOpcodeBudget === 'undefined' ? undefined : ensureSafeInteger(extraOpcodeBudget);\n    this.fixSigners = fixSigners;\n    this.round = typeof round === 'undefined' ? undefined : ensureBigInt(round);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulateRequest.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['txn-groups', this.txnGroups.map(v => v.toEncodingData())], ['allow-empty-signatures', this.allowEmptySignatures], ['allow-more-logging', this.allowMoreLogging], ['allow-unnamed-resources', this.allowUnnamedResources], ['exec-trace-config', typeof this.execTraceConfig !== 'undefined' ? this.execTraceConfig.toEncodingData() : undefined], ['extra-opcode-budget', this.extraOpcodeBudget], ['fix-signers', this.fixSigners], ['round', this.round]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateRequest: ${data}`);\n    }\n    return new SimulateRequest({\n      txnGroups: (data.get('txn-groups') ?? []).map(v => SimulateRequestTransactionGroup.fromEncodingData(v)),\n      allowEmptySignatures: data.get('allow-empty-signatures'),\n      allowMoreLogging: data.get('allow-more-logging'),\n      allowUnnamedResources: data.get('allow-unnamed-resources'),\n      execTraceConfig: typeof data.get('exec-trace-config') !== 'undefined' ? SimulateTraceConfig.fromEncodingData(data.get('exec-trace-config')) : undefined,\n      extraOpcodeBudget: data.get('extra-opcode-budget'),\n      fixSigners: data.get('fix-signers'),\n      round: data.get('round')\n    });\n  }\n}\n/**\n * A transaction group to simulate.\n */\nexport class SimulateRequestTransactionGroup {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'txns',\n        valueSchema: new ArraySchema(SignedTransaction.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulateRequestTransactionGroup` object.\n   * @param txns - An atomic transaction group.\n   */\n  constructor({\n    txns\n  }) {\n    this.txns = txns;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulateRequestTransactionGroup.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['txns', this.txns.map(v => v.toEncodingData())]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateRequestTransactionGroup: ${data}`);\n    }\n    return new SimulateRequestTransactionGroup({\n      txns: (data.get('txns') ?? []).map(v => SignedTransaction.fromEncodingData(v))\n    });\n  }\n}\n/**\n * Result of a transaction group simulation.\n */\nexport class SimulateResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'last-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'txn-groups',\n        valueSchema: new ArraySchema(SimulateTransactionGroupResult.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'version',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'eval-overrides',\n        valueSchema: new OptionalSchema(SimulationEvalOverrides.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'exec-trace-config',\n        valueSchema: new OptionalSchema(SimulateTraceConfig.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'initial-states',\n        valueSchema: new OptionalSchema(SimulateInitialStates.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulateResponse` object.\n   * @param lastRound - The round immediately preceding this simulation. State changes through this\n   * round were used to run this simulation.\n   * @param txnGroups - A result object for each transaction group that was simulated.\n   * @param version - The version of this response object.\n   * @param evalOverrides - The set of parameters and limits override during simulation. If this set of\n   * parameters is present, then evaluation parameters may differ from standard\n   * evaluation in certain ways.\n   * @param execTraceConfig - An object that configures simulation execution trace.\n   * @param initialStates - Initial states of resources that were accessed during simulation.\n   */\n  constructor({\n    lastRound,\n    txnGroups,\n    version,\n    evalOverrides,\n    execTraceConfig,\n    initialStates\n  }) {\n    this.lastRound = ensureBigInt(lastRound);\n    this.txnGroups = txnGroups;\n    this.version = ensureSafeInteger(version);\n    this.evalOverrides = evalOverrides;\n    this.execTraceConfig = execTraceConfig;\n    this.initialStates = initialStates;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulateResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['last-round', this.lastRound], ['txn-groups', this.txnGroups.map(v => v.toEncodingData())], ['version', this.version], ['eval-overrides', typeof this.evalOverrides !== 'undefined' ? this.evalOverrides.toEncodingData() : undefined], ['exec-trace-config', typeof this.execTraceConfig !== 'undefined' ? this.execTraceConfig.toEncodingData() : undefined], ['initial-states', typeof this.initialStates !== 'undefined' ? this.initialStates.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateResponse: ${data}`);\n    }\n    return new SimulateResponse({\n      lastRound: data.get('last-round'),\n      txnGroups: (data.get('txn-groups') ?? []).map(v => SimulateTransactionGroupResult.fromEncodingData(v)),\n      version: data.get('version'),\n      evalOverrides: typeof data.get('eval-overrides') !== 'undefined' ? SimulationEvalOverrides.fromEncodingData(data.get('eval-overrides')) : undefined,\n      execTraceConfig: typeof data.get('exec-trace-config') !== 'undefined' ? SimulateTraceConfig.fromEncodingData(data.get('exec-trace-config')) : undefined,\n      initialStates: typeof data.get('initial-states') !== 'undefined' ? SimulateInitialStates.fromEncodingData(data.get('initial-states')) : undefined\n    });\n  }\n}\n/**\n * An object that configures simulation execution trace.\n */\nexport class SimulateTraceConfig {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'enable',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'scratch-change',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'stack-change',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'state-change',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulateTraceConfig` object.\n   * @param enable - A boolean option for opting in execution trace features simulation endpoint.\n   * @param scratchChange - A boolean option enabling returning scratch slot changes together with execution\n   * trace during simulation.\n   * @param stackChange - A boolean option enabling returning stack changes together with execution trace\n   * during simulation.\n   * @param stateChange - A boolean option enabling returning application state changes (global, local,\n   * and box changes) with the execution trace during simulation.\n   */\n  constructor({\n    enable,\n    scratchChange,\n    stackChange,\n    stateChange\n  }) {\n    this.enable = enable;\n    this.scratchChange = scratchChange;\n    this.stackChange = stackChange;\n    this.stateChange = stateChange;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulateTraceConfig.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['enable', this.enable], ['scratch-change', this.scratchChange], ['stack-change', this.stackChange], ['state-change', this.stateChange]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateTraceConfig: ${data}`);\n    }\n    return new SimulateTraceConfig({\n      enable: data.get('enable'),\n      scratchChange: data.get('scratch-change'),\n      stackChange: data.get('stack-change'),\n      stateChange: data.get('state-change')\n    });\n  }\n}\n/**\n * Simulation result for an atomic transaction group\n */\nexport class SimulateTransactionGroupResult {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'txn-results',\n        valueSchema: new ArraySchema(SimulateTransactionResult.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'app-budget-added',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'app-budget-consumed',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'failed-at',\n        valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n        omitEmpty: true\n      }, {\n        key: 'failure-message',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'unnamed-resources-accessed',\n        valueSchema: new OptionalSchema(SimulateUnnamedResourcesAccessed.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulateTransactionGroupResult` object.\n   * @param txnResults - Simulation result for individual transactions\n   * @param appBudgetAdded - Total budget added during execution of app calls in the transaction group.\n   * @param appBudgetConsumed - Total budget consumed during execution of app calls in the transaction group.\n   * @param failedAt - If present, indicates which transaction in this group caused the failure. This\n   * array represents the path to the failing transaction. Indexes are zero based,\n   * the first element indicates the top-level transaction, and successive elements\n   * indicate deeper inner transactions.\n   * @param failureMessage - If present, indicates that the transaction group failed and specifies why that\n   * happened\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  constructor({\n    txnResults,\n    appBudgetAdded,\n    appBudgetConsumed,\n    failedAt,\n    failureMessage,\n    unnamedResourcesAccessed\n  }) {\n    this.txnResults = txnResults;\n    this.appBudgetAdded = typeof appBudgetAdded === 'undefined' ? undefined : ensureSafeInteger(appBudgetAdded);\n    this.appBudgetConsumed = typeof appBudgetConsumed === 'undefined' ? undefined : ensureSafeInteger(appBudgetConsumed);\n    this.failedAt = typeof failedAt === 'undefined' ? undefined : failedAt.map(ensureSafeInteger);\n    this.failureMessage = failureMessage;\n    this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulateTransactionGroupResult.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['txn-results', this.txnResults.map(v => v.toEncodingData())], ['app-budget-added', this.appBudgetAdded], ['app-budget-consumed', this.appBudgetConsumed], ['failed-at', this.failedAt], ['failure-message', this.failureMessage], ['unnamed-resources-accessed', typeof this.unnamedResourcesAccessed !== 'undefined' ? this.unnamedResourcesAccessed.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateTransactionGroupResult: ${data}`);\n    }\n    return new SimulateTransactionGroupResult({\n      txnResults: (data.get('txn-results') ?? []).map(v => SimulateTransactionResult.fromEncodingData(v)),\n      appBudgetAdded: data.get('app-budget-added'),\n      appBudgetConsumed: data.get('app-budget-consumed'),\n      failedAt: data.get('failed-at'),\n      failureMessage: data.get('failure-message'),\n      unnamedResourcesAccessed: typeof data.get('unnamed-resources-accessed') !== 'undefined' ? SimulateUnnamedResourcesAccessed.fromEncodingData(data.get('unnamed-resources-accessed')) : undefined\n    });\n  }\n}\n/**\n * Simulation result for an individual transaction\n */\nexport class SimulateTransactionResult {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'txn-result',\n        valueSchema: PendingTransactionResponse.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'app-budget-consumed',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'exec-trace',\n        valueSchema: new OptionalSchema(SimulationTransactionExecTrace.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'fixed-signer',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'logic-sig-budget-consumed',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'unnamed-resources-accessed',\n        valueSchema: new OptionalSchema(SimulateUnnamedResourcesAccessed.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulateTransactionResult` object.\n   * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,\n   * includes confirmation details like the round and reward details.\n   * @param appBudgetConsumed - Budget used during execution of an app call transaction. This value includes\n   * budged used by inner app calls spawned by this transaction.\n   * @param execTrace - The execution trace of calling an app or a logic sig, containing the inner app\n   * call trace in a recursive way.\n   * @param fixedSigner - The account that needed to sign this transaction when no signature was provided\n   * and the provided signer was incorrect.\n   * @param logicSigBudgetConsumed - Budget used during execution of a logic sig transaction.\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  constructor({\n    txnResult,\n    appBudgetConsumed,\n    execTrace,\n    fixedSigner,\n    logicSigBudgetConsumed,\n    unnamedResourcesAccessed\n  }) {\n    this.txnResult = txnResult;\n    this.appBudgetConsumed = typeof appBudgetConsumed === 'undefined' ? undefined : ensureSafeInteger(appBudgetConsumed);\n    this.execTrace = execTrace;\n    this.fixedSigner = typeof fixedSigner === 'string' ? Address.fromString(fixedSigner) : fixedSigner;\n    this.logicSigBudgetConsumed = typeof logicSigBudgetConsumed === 'undefined' ? undefined : ensureSafeInteger(logicSigBudgetConsumed);\n    this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulateTransactionResult.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['txn-result', this.txnResult.toEncodingData()], ['app-budget-consumed', this.appBudgetConsumed], ['exec-trace', typeof this.execTrace !== 'undefined' ? this.execTrace.toEncodingData() : undefined], ['fixed-signer', typeof this.fixedSigner !== 'undefined' ? this.fixedSigner.toString() : undefined], ['logic-sig-budget-consumed', this.logicSigBudgetConsumed], ['unnamed-resources-accessed', typeof this.unnamedResourcesAccessed !== 'undefined' ? this.unnamedResourcesAccessed.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateTransactionResult: ${data}`);\n    }\n    return new SimulateTransactionResult({\n      txnResult: PendingTransactionResponse.fromEncodingData(data.get('txn-result') ?? new Map()),\n      appBudgetConsumed: data.get('app-budget-consumed'),\n      execTrace: typeof data.get('exec-trace') !== 'undefined' ? SimulationTransactionExecTrace.fromEncodingData(data.get('exec-trace')) : undefined,\n      fixedSigner: data.get('fixed-signer'),\n      logicSigBudgetConsumed: data.get('logic-sig-budget-consumed'),\n      unnamedResourcesAccessed: typeof data.get('unnamed-resources-accessed') !== 'undefined' ? SimulateUnnamedResourcesAccessed.fromEncodingData(data.get('unnamed-resources-accessed')) : undefined\n    });\n  }\n}\n/**\n * These are resources that were accessed by this group that would normally have\n * caused failure, but were allowed in simulation. Depending on where this object\n * is in the response, the unnamed resources it contains may or may not qualify for\n * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n * the resources do qualify, but if this is a field in SimulateTransactionResult,\n * they do not qualify. In order to make this group valid for actual submission,\n * resources that qualify for group sharing can be made available by any\n * transaction of the group; otherwise, resources must be placed in the same\n * transaction which accessed them.\n */\nexport class SimulateUnnamedResourcesAccessed {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'accounts',\n        valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n        omitEmpty: true\n      }, {\n        key: 'app-locals',\n        valueSchema: new OptionalSchema(new ArraySchema(ApplicationLocalReference.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'apps',\n        valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n        omitEmpty: true\n      }, {\n        key: 'asset-holdings',\n        valueSchema: new OptionalSchema(new ArraySchema(AssetHoldingReference.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'assets',\n        valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n        omitEmpty: true\n      }, {\n        key: 'boxes',\n        valueSchema: new OptionalSchema(new ArraySchema(BoxReference.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'extra-box-refs',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulateUnnamedResourcesAccessed` object.\n   * @param accounts - The unnamed accounts that were referenced. The order of this array is arbitrary.\n   * @param appLocals - The unnamed application local states that were referenced. The order of this\n   * array is arbitrary.\n   * @param apps - The unnamed applications that were referenced. The order of this array is\n   * arbitrary.\n   * @param assetHoldings - The unnamed asset holdings that were referenced. The order of this array is\n   * arbitrary.\n   * @param assets - The unnamed assets that were referenced. The order of this array is arbitrary.\n   * @param boxes - The unnamed boxes that were referenced. The order of this array is arbitrary.\n   * @param extraBoxRefs - The number of extra box references used to increase the IO budget. This is in\n   * addition to the references defined in the input transaction group and any\n   * referenced to unnamed boxes.\n   */\n  constructor({\n    accounts,\n    appLocals,\n    apps,\n    assetHoldings,\n    assets,\n    boxes,\n    extraBoxRefs\n  }) {\n    this.accounts = typeof accounts !== 'undefined' ? accounts.map(addr => typeof addr === 'string' ? Address.fromString(addr) : addr) : undefined;\n    this.appLocals = appLocals;\n    this.apps = typeof apps === 'undefined' ? undefined : apps.map(ensureBigInt);\n    this.assetHoldings = assetHoldings;\n    this.assets = typeof assets === 'undefined' ? undefined : assets.map(ensureBigInt);\n    this.boxes = boxes;\n    this.extraBoxRefs = typeof extraBoxRefs === 'undefined' ? undefined : ensureSafeInteger(extraBoxRefs);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulateUnnamedResourcesAccessed.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['accounts', typeof this.accounts !== 'undefined' ? this.accounts.map(v => v.toString()) : undefined], ['app-locals', typeof this.appLocals !== 'undefined' ? this.appLocals.map(v => v.toEncodingData()) : undefined], ['apps', this.apps], ['asset-holdings', typeof this.assetHoldings !== 'undefined' ? this.assetHoldings.map(v => v.toEncodingData()) : undefined], ['assets', this.assets], ['boxes', typeof this.boxes !== 'undefined' ? this.boxes.map(v => v.toEncodingData()) : undefined], ['extra-box-refs', this.extraBoxRefs]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateUnnamedResourcesAccessed: ${data}`);\n    }\n    return new SimulateUnnamedResourcesAccessed({\n      accounts: data.get('accounts'),\n      appLocals: typeof data.get('app-locals') !== 'undefined' ? data.get('app-locals').map(v => ApplicationLocalReference.fromEncodingData(v)) : undefined,\n      apps: data.get('apps'),\n      assetHoldings: typeof data.get('asset-holdings') !== 'undefined' ? data.get('asset-holdings').map(v => AssetHoldingReference.fromEncodingData(v)) : undefined,\n      assets: data.get('assets'),\n      boxes: typeof data.get('boxes') !== 'undefined' ? data.get('boxes').map(v => BoxReference.fromEncodingData(v)) : undefined,\n      extraBoxRefs: data.get('extra-box-refs')\n    });\n  }\n}\n/**\n * The set of parameters and limits override during simulation. If this set of\n * parameters is present, then evaluation parameters may differ from standard\n * evaluation in certain ways.\n */\nexport class SimulationEvalOverrides {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'allow-empty-signatures',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'allow-unnamed-resources',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'extra-opcode-budget',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'fix-signers',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'max-log-calls',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'max-log-size',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulationEvalOverrides` object.\n   * @param allowEmptySignatures - If true, transactions without signatures are allowed and simulated as if they\n   * were properly signed.\n   * @param allowUnnamedResources - If true, allows access to unnamed resources during simulation.\n   * @param extraOpcodeBudget - The extra opcode budget added to each transaction group during simulation\n   * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed\n   * during evaluation.\n   * @param maxLogCalls - The maximum log calls one can make during simulation\n   * @param maxLogSize - The maximum byte number to log during simulation\n   */\n  constructor({\n    allowEmptySignatures,\n    allowUnnamedResources,\n    extraOpcodeBudget,\n    fixSigners,\n    maxLogCalls,\n    maxLogSize\n  }) {\n    this.allowEmptySignatures = allowEmptySignatures;\n    this.allowUnnamedResources = allowUnnamedResources;\n    this.extraOpcodeBudget = typeof extraOpcodeBudget === 'undefined' ? undefined : ensureSafeInteger(extraOpcodeBudget);\n    this.fixSigners = fixSigners;\n    this.maxLogCalls = typeof maxLogCalls === 'undefined' ? undefined : ensureSafeInteger(maxLogCalls);\n    this.maxLogSize = typeof maxLogSize === 'undefined' ? undefined : ensureSafeInteger(maxLogSize);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulationEvalOverrides.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['allow-empty-signatures', this.allowEmptySignatures], ['allow-unnamed-resources', this.allowUnnamedResources], ['extra-opcode-budget', this.extraOpcodeBudget], ['fix-signers', this.fixSigners], ['max-log-calls', this.maxLogCalls], ['max-log-size', this.maxLogSize]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulationEvalOverrides: ${data}`);\n    }\n    return new SimulationEvalOverrides({\n      allowEmptySignatures: data.get('allow-empty-signatures'),\n      allowUnnamedResources: data.get('allow-unnamed-resources'),\n      extraOpcodeBudget: data.get('extra-opcode-budget'),\n      fixSigners: data.get('fix-signers'),\n      maxLogCalls: data.get('max-log-calls'),\n      maxLogSize: data.get('max-log-size')\n    });\n  }\n}\n/**\n * The set of trace information and effect from evaluating a single opcode.\n */\nexport class SimulationOpcodeTraceUnit {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'pc',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'scratch-changes',\n        valueSchema: new OptionalSchema(new ArraySchema(ScratchChange.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'spawned-inners',\n        valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n        omitEmpty: true\n      }, {\n        key: 'stack-additions',\n        valueSchema: new OptionalSchema(new ArraySchema(AvmValue.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'stack-pop-count',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'state-changes',\n        valueSchema: new OptionalSchema(new ArraySchema(ApplicationStateOperation.encodingSchema)),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulationOpcodeTraceUnit` object.\n   * @param pc - The program counter of the current opcode being evaluated.\n   * @param scratchChanges - The writes into scratch slots.\n   * @param spawnedInners - The indexes of the traces for inner transactions spawned by this opcode, if any.\n   * @param stackAdditions - The values added by this opcode to the stack.\n   * @param stackPopCount - The number of deleted stack values by this opcode.\n   * @param stateChanges - The operations against the current application's states.\n   */\n  constructor({\n    pc,\n    scratchChanges,\n    spawnedInners,\n    stackAdditions,\n    stackPopCount,\n    stateChanges\n  }) {\n    this.pc = ensureSafeInteger(pc);\n    this.scratchChanges = scratchChanges;\n    this.spawnedInners = typeof spawnedInners === 'undefined' ? undefined : spawnedInners.map(ensureSafeInteger);\n    this.stackAdditions = stackAdditions;\n    this.stackPopCount = typeof stackPopCount === 'undefined' ? undefined : ensureSafeInteger(stackPopCount);\n    this.stateChanges = stateChanges;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulationOpcodeTraceUnit.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['pc', this.pc], ['scratch-changes', typeof this.scratchChanges !== 'undefined' ? this.scratchChanges.map(v => v.toEncodingData()) : undefined], ['spawned-inners', this.spawnedInners], ['stack-additions', typeof this.stackAdditions !== 'undefined' ? this.stackAdditions.map(v => v.toEncodingData()) : undefined], ['stack-pop-count', this.stackPopCount], ['state-changes', typeof this.stateChanges !== 'undefined' ? this.stateChanges.map(v => v.toEncodingData()) : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulationOpcodeTraceUnit: ${data}`);\n    }\n    return new SimulationOpcodeTraceUnit({\n      pc: data.get('pc'),\n      scratchChanges: typeof data.get('scratch-changes') !== 'undefined' ? data.get('scratch-changes').map(v => ScratchChange.fromEncodingData(v)) : undefined,\n      spawnedInners: data.get('spawned-inners'),\n      stackAdditions: typeof data.get('stack-additions') !== 'undefined' ? data.get('stack-additions').map(v => AvmValue.fromEncodingData(v)) : undefined,\n      stackPopCount: data.get('stack-pop-count'),\n      stateChanges: typeof data.get('state-changes') !== 'undefined' ? data.get('state-changes').map(v => ApplicationStateOperation.fromEncodingData(v)) : undefined\n    });\n  }\n}\n/**\n * The execution trace of calling an app or a logic sig, containing the inner app\n * call trace in a recursive way.\n */\nexport class SimulationTransactionExecTrace {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'approval-program-hash',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'approval-program-trace',\n        valueSchema: new OptionalSchema(new ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'clear-state-program-hash',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'clear-state-program-trace',\n        valueSchema: new OptionalSchema(new ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'clear-state-rollback',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'clear-state-rollback-error',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'inner-trace',\n        valueSchema: new OptionalSchema(new ArraySchema(SimulationTransactionExecTrace.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'logic-sig-hash',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'logic-sig-trace',\n        valueSchema: new OptionalSchema(new ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SimulationTransactionExecTrace` object.\n   * @param approvalProgramHash - SHA512_256 hash digest of the approval program executed in transaction.\n   * @param approvalProgramTrace - Program trace that contains a trace of opcode effects in an approval program.\n   * @param clearStateProgramHash - SHA512_256 hash digest of the clear state program executed in transaction.\n   * @param clearStateProgramTrace - Program trace that contains a trace of opcode effects in a clear state program.\n   * @param clearStateRollback - If true, indicates that the clear state program failed and any persistent state\n   * changes it produced should be reverted once the program exits.\n   * @param clearStateRollbackError - The error message explaining why the clear state program failed. This field will\n   * only be populated if clear-state-rollback is true and the failure was due to an\n   * execution error.\n   * @param innerTrace - An array of SimulationTransactionExecTrace representing the execution trace of\n   * any inner transactions executed.\n   * @param logicSigHash - SHA512_256 hash digest of the logic sig executed in transaction.\n   * @param logicSigTrace - Program trace that contains a trace of opcode effects in a logic sig.\n   */\n  constructor({\n    approvalProgramHash,\n    approvalProgramTrace,\n    clearStateProgramHash,\n    clearStateProgramTrace,\n    clearStateRollback,\n    clearStateRollbackError,\n    innerTrace,\n    logicSigHash,\n    logicSigTrace\n  }) {\n    this.approvalProgramHash = typeof approvalProgramHash === 'string' ? base64ToBytes(approvalProgramHash) : approvalProgramHash;\n    this.approvalProgramTrace = approvalProgramTrace;\n    this.clearStateProgramHash = typeof clearStateProgramHash === 'string' ? base64ToBytes(clearStateProgramHash) : clearStateProgramHash;\n    this.clearStateProgramTrace = clearStateProgramTrace;\n    this.clearStateRollback = clearStateRollback;\n    this.clearStateRollbackError = clearStateRollbackError;\n    this.innerTrace = innerTrace;\n    this.logicSigHash = typeof logicSigHash === 'string' ? base64ToBytes(logicSigHash) : logicSigHash;\n    this.logicSigTrace = logicSigTrace;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SimulationTransactionExecTrace.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['approval-program-hash', this.approvalProgramHash], ['approval-program-trace', typeof this.approvalProgramTrace !== 'undefined' ? this.approvalProgramTrace.map(v => v.toEncodingData()) : undefined], ['clear-state-program-hash', this.clearStateProgramHash], ['clear-state-program-trace', typeof this.clearStateProgramTrace !== 'undefined' ? this.clearStateProgramTrace.map(v => v.toEncodingData()) : undefined], ['clear-state-rollback', this.clearStateRollback], ['clear-state-rollback-error', this.clearStateRollbackError], ['inner-trace', typeof this.innerTrace !== 'undefined' ? this.innerTrace.map(v => v.toEncodingData()) : undefined], ['logic-sig-hash', this.logicSigHash], ['logic-sig-trace', typeof this.logicSigTrace !== 'undefined' ? this.logicSigTrace.map(v => v.toEncodingData()) : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulationTransactionExecTrace: ${data}`);\n    }\n    return new SimulationTransactionExecTrace({\n      approvalProgramHash: data.get('approval-program-hash'),\n      approvalProgramTrace: typeof data.get('approval-program-trace') !== 'undefined' ? data.get('approval-program-trace').map(v => SimulationOpcodeTraceUnit.fromEncodingData(v)) : undefined,\n      clearStateProgramHash: data.get('clear-state-program-hash'),\n      clearStateProgramTrace: typeof data.get('clear-state-program-trace') !== 'undefined' ? data.get('clear-state-program-trace').map(v => SimulationOpcodeTraceUnit.fromEncodingData(v)) : undefined,\n      clearStateRollback: data.get('clear-state-rollback'),\n      clearStateRollbackError: data.get('clear-state-rollback-error'),\n      innerTrace: typeof data.get('inner-trace') !== 'undefined' ? data.get('inner-trace').map(v => SimulationTransactionExecTrace.fromEncodingData(v)) : undefined,\n      logicSigHash: data.get('logic-sig-hash'),\n      logicSigTrace: typeof data.get('logic-sig-trace') !== 'undefined' ? data.get('logic-sig-trace').map(v => SimulationOpcodeTraceUnit.fromEncodingData(v)) : undefined\n    });\n  }\n}\n/**\n * Represents a state proof and its corresponding message\n */\nexport class StateProof {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'Message',\n        valueSchema: StateProofMessage.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'StateProof',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `StateProof` object.\n   * @param message - Represents the message that the state proofs are attesting to.\n   * @param stateproof - The encoded StateProof for the message.\n   */\n  constructor({\n    message,\n    stateproof\n  }) {\n    this.message = message;\n    this.stateproof = typeof stateproof === 'string' ? base64ToBytes(stateproof) : stateproof;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateProof.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Message', this.message.toEncodingData()], ['StateProof', this.stateproof]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProof: ${data}`);\n    }\n    return new StateProof({\n      message: StateProofMessage.fromEncodingData(data.get('Message') ?? new Map()),\n      stateproof: data.get('StateProof')\n    });\n  }\n}\n/**\n * Represents the message that the state proofs are attesting to.\n */\nexport class StateProofMessage {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'BlockHeadersCommitment',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'FirstAttestedRound',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'LastAttestedRound',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'LnProvenWeight',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'VotersCommitment',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `StateProofMessage` object.\n   * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\n   * interval.\n   * @param firstattestedround - The first round the message attests to.\n   * @param lastattestedround - The last round the message attests to.\n   * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\n   * of precision. This value would be used to verify the next state proof.\n   * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\n   */\n  constructor({\n    blockheaderscommitment,\n    firstattestedround,\n    lastattestedround,\n    lnprovenweight,\n    voterscommitment\n  }) {\n    this.blockheaderscommitment = typeof blockheaderscommitment === 'string' ? base64ToBytes(blockheaderscommitment) : blockheaderscommitment;\n    this.firstattestedround = ensureBigInt(firstattestedround);\n    this.lastattestedround = ensureBigInt(lastattestedround);\n    this.lnprovenweight = ensureBigInt(lnprovenweight);\n    this.voterscommitment = typeof voterscommitment === 'string' ? base64ToBytes(voterscommitment) : voterscommitment;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateProofMessage.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['BlockHeadersCommitment', this.blockheaderscommitment], ['FirstAttestedRound', this.firstattestedround], ['LastAttestedRound', this.lastattestedround], ['LnProvenWeight', this.lnprovenweight], ['VotersCommitment', this.voterscommitment]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofMessage: ${data}`);\n    }\n    return new StateProofMessage({\n      blockheaderscommitment: data.get('BlockHeadersCommitment'),\n      firstattestedround: data.get('FirstAttestedRound'),\n      lastattestedround: data.get('LastAttestedRound'),\n      lnprovenweight: data.get('LnProvenWeight'),\n      voterscommitment: data.get('VotersCommitment')\n    });\n  }\n}\n/**\n * Supply represents the current supply of MicroAlgos in the system.\n */\nexport class SupplyResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'current_round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'online-money',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total-money',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `SupplyResponse` object.\n   * @param currentRound - Round\n   * @param onlineMoney - OnlineMoney\n   * @param totalMoney - TotalMoney\n   */\n  constructor({\n    currentRound,\n    onlineMoney,\n    totalMoney\n  }) {\n    this.currentRound = ensureBigInt(currentRound);\n    this.onlineMoney = ensureBigInt(onlineMoney);\n    this.totalMoney = ensureBigInt(totalMoney);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return SupplyResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['current_round', this.currentRound], ['online-money', this.onlineMoney], ['total-money', this.totalMoney]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SupplyResponse: ${data}`);\n    }\n    return new SupplyResponse({\n      currentRound: data.get('current_round'),\n      onlineMoney: data.get('online-money'),\n      totalMoney: data.get('total-money')\n    });\n  }\n}\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'key',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'value',\n        valueSchema: TealValue.encodingSchema,\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor({\n    key,\n    value\n  }) {\n    this.key = typeof key === 'string' ? base64ToBytes(key) : key;\n    this.value = value;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TealKeyValue.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['key', this.key], ['value', this.value.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TealKeyValue: ${data}`);\n    }\n    return new TealKeyValue({\n      key: data.get('key'),\n      value: TealValue.fromEncodingData(data.get('value') ?? new Map())\n    });\n  }\n}\n/**\n * Represents a TEAL value.\n */\nexport class TealValue {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'bytes',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'type',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'uint',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TealValue` object.\n   * @param bytes - (tb) bytes value.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    bytes,\n    type,\n    uint\n  }) {\n    this.bytes = typeof bytes === 'string' ? base64ToBytes(bytes) : bytes;\n    this.type = ensureSafeInteger(type);\n    this.uint = ensureBigInt(uint);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TealValue.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['bytes', this.bytes], ['type', this.type], ['uint', this.uint]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TealValue: ${data}`);\n    }\n    return new TealValue({\n      bytes: data.get('bytes'),\n      type: data.get('type'),\n      uint: data.get('uint')\n    });\n  }\n}\n/**\n * Response containing all ledger state deltas for transaction groups, with their\n * associated Ids, in a single round.\n */\nexport class TransactionGroupLedgerStateDeltasForRoundResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'Deltas',\n        valueSchema: new ArraySchema(LedgerStateDeltaForTransactionGroup.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionGroupLedgerStateDeltasForRoundResponse` object.\n   * @param deltas -\n   */\n  constructor({\n    deltas\n  }) {\n    this.deltas = deltas;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionGroupLedgerStateDeltasForRoundResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Deltas', this.deltas.map(v => v.toEncodingData())]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionGroupLedgerStateDeltasForRoundResponse: ${data}`);\n    }\n    return new TransactionGroupLedgerStateDeltasForRoundResponse({\n      deltas: (data.get('Deltas') ?? []).map(v => LedgerStateDeltaForTransactionGroup.fromEncodingData(v))\n    });\n  }\n}\n/**\n * TransactionParams contains the parameters that help a client construct a new\n * transaction.\n */\nexport class TransactionParametersResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'consensus-version',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'fee',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'genesis-hash',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'genesis-id',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'last-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'min-fee',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionParametersResponse` object.\n   * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\n   * as of LastRound.\n   * @param fee - Fee is the suggested transaction fee\n   * Fee is in units of micro-Algos per byte.\n   * Fee may fall to zero but transactions must still have a fee of\n   * at least MinTxnFee for the current network protocol.\n   * @param genesisHash - GenesisHash is the hash of the genesis block.\n   * @param genesisId - GenesisID is an ID listed in the genesis block.\n   * @param lastRound - LastRound indicates the last round seen\n   * @param minFee - The minimum transaction fee (not per byte) required for the\n   * txn to validate for the current network protocol.\n   */\n  constructor({\n    consensusVersion,\n    fee,\n    genesisHash,\n    genesisId,\n    lastRound,\n    minFee\n  }) {\n    this.consensusVersion = consensusVersion;\n    this.fee = ensureBigInt(fee);\n    this.genesisHash = typeof genesisHash === 'string' ? base64ToBytes(genesisHash) : genesisHash;\n    this.genesisId = genesisId;\n    this.lastRound = ensureBigInt(lastRound);\n    this.minFee = ensureBigInt(minFee);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionParametersResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['consensus-version', this.consensusVersion], ['fee', this.fee], ['genesis-hash', this.genesisHash], ['genesis-id', this.genesisId], ['last-round', this.lastRound], ['min-fee', this.minFee]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionParametersResponse: ${data}`);\n    }\n    return new TransactionParametersResponse({\n      consensusVersion: data.get('consensus-version'),\n      fee: data.get('fee'),\n      genesisHash: data.get('genesis-hash'),\n      genesisId: data.get('genesis-id'),\n      lastRound: data.get('last-round'),\n      minFee: data.get('min-fee')\n    });\n  }\n}\n/**\n * Proof of transaction in a block.\n */\nexport class TransactionProofResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'idx',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'proof',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'stibhash',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'treedepth',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'hashtype',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionProofResponse` object.\n   * @param idx - Index of the transaction in the block's payset.\n   * @param proof - Proof of transaction membership.\n   * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   * @param hashtype - The type of hash function used to create the proof, must be one of:\n   * * sha512_256\n   * * sha256\n   */\n  constructor({\n    idx,\n    proof,\n    stibhash,\n    treedepth,\n    hashtype\n  }) {\n    this.idx = ensureSafeInteger(idx);\n    this.proof = typeof proof === 'string' ? base64ToBytes(proof) : proof;\n    this.stibhash = typeof stibhash === 'string' ? base64ToBytes(stibhash) : stibhash;\n    this.treedepth = ensureSafeInteger(treedepth);\n    this.hashtype = hashtype;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionProofResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['idx', this.idx], ['proof', this.proof], ['stibhash', this.stibhash], ['treedepth', this.treedepth], ['hashtype', this.hashtype]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionProofResponse: ${data}`);\n    }\n    return new TransactionProofResponse({\n      idx: data.get('idx'),\n      proof: data.get('proof'),\n      stibhash: data.get('stibhash'),\n      treedepth: data.get('treedepth'),\n      hashtype: data.get('hashtype')\n    });\n  }\n}\n/**\n * algod version information.\n */\nexport class Version {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'build',\n        valueSchema: BuildVersion.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'genesis_hash_b64',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'genesis_id',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'versions',\n        valueSchema: new ArraySchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Version` object.\n   * @param build -\n   * @param genesisHashB64 -\n   * @param genesisId -\n   * @param versions -\n   */\n  constructor({\n    build,\n    genesisHashB64,\n    genesisId,\n    versions\n  }) {\n    this.build = build;\n    this.genesisHashB64 = typeof genesisHashB64 === 'string' ? base64ToBytes(genesisHashB64) : genesisHashB64;\n    this.genesisId = genesisId;\n    this.versions = versions;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Version.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['build', this.build.toEncodingData()], ['genesis_hash_b64', this.genesisHashB64], ['genesis_id', this.genesisId], ['versions', this.versions]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Version: ${data}`);\n    }\n    return new Version({\n      build: BuildVersion.fromEncodingData(data.get('build') ?? new Map()),\n      genesisHashB64: data.get('genesis_hash_b64'),\n      genesisId: data.get('genesis_id'),\n      versions: data.get('versions')\n    });\n  }\n}","map":{"version":3,"names":["ensureBigInt","ensureSafeInteger","NamedMapSchema","ArraySchema","Uint64Schema","StringSchema","BooleanSchema","ByteArraySchema","OptionalSchema","base64ToBytes","Block","LedgerStateDelta","SignedTransaction","Address","UntypedValue","Account","encodingSchema","encodingSchemaValue","pushEntries","key","valueSchema","omitEmpty","ApplicationLocalState","ApplicationStateSchema","AssetHolding","Application","Asset","AccountParticipation","constructor","address","amount","amountWithoutPendingRewards","minBalance","pendingRewards","rewards","round","status","totalAppsOptedIn","totalAssetsOptedIn","totalCreatedApps","totalCreatedAssets","appsLocalState","appsTotalExtraPages","appsTotalSchema","assets","authAddr","createdApps","createdAssets","incentiveEligible","lastHeartbeat","lastProposed","participation","rewardBase","sigType","totalBoxBytes","totalBoxes","undefined","fromString","getEncodingSchema","toEncodingData","Map","map","v","toString","fromEncodingData","data","Error","get","AccountApplicationResponse","ApplicationParams","appLocalState","createdApp","AccountAssetHolding","AssetParams","assetHolding","assetParams","AccountAssetResponse","createdAsset","AccountAssetsInformationResponse","assetHoldings","nextToken","selectionParticipationKey","voteFirstValid","voteKeyDilution","voteLastValid","voteParticipationKey","stateProofKey","AccountStateDelta","EvalDeltaKeyValue","delta","AppCallLogs","applicationIndex","logs","txid","id","params","ApplicationInitialStates","ApplicationKVStorage","appBoxes","appGlobals","appLocals","AvmKeyValue","kvs","account","ApplicationLocalReference","app","TealKeyValue","schema","keyValue","approvalProgram","clearStateProgram","creator","extraProgramPages","globalState","globalStateSchema","localStateSchema","ApplicationStateOperation","AvmValue","appStateType","operation","newValue","numByteSlice","numUint","index","assetId","isFrozen","AssetHoldingReference","asset","decimals","total","clawback","defaultFrozen","freeze","manager","metadataHash","name","nameB64","reserve","unitName","unitNameB64","url","urlB64","value","type","bytes","uint","BlockHashResponse","blockhash","BlockLogsResponse","BlockResponse","block","cert","BlockTxidsResponse","blocktxids","Box","BoxDescriptor","BoxReference","BoxesResponse","boxes","BuildVersion","branch","buildNumber","channel","commitHash","major","minor","CompileResponse","hash","result","sourcemap","DisassembleResponse","DryrunRequest","DryrunSource","accounts","apps","latestTimestamp","protocolVersion","sources","txns","DryrunResponse","DryrunTxnResult","error","appIndex","fieldName","source","txnIndex","DryrunState","TealValue","line","pc","stack","scratch","disassembly","appCallMessages","appCallTrace","budgetAdded","budgetConsumed","globalDelta","localDeltas","logicSigDisassembly","logicSigMessages","logicSigTrace","ErrorResponse","message","EvalDelta","action","GetBlockTimeStampOffsetResponse","offset","GetSyncRoundResponse","KvDelta","LedgerStateDeltaForTransactionGroup","ids","LightBlockHeaderProof","proof","treedepth","NodeStatusResponse","catchupTime","lastRound","lastVersion","nextVersion","nextVersionRound","nextVersionSupported","stoppedAtUnsupportedRound","timeSinceLastRound","catchpoint","catchpointAcquiredBlocks","catchpointProcessedAccounts","catchpointProcessedKvs","catchpointTotalAccounts","catchpointTotalBlocks","catchpointTotalKvs","catchpointVerifiedAccounts","catchpointVerifiedKvs","lastCatchpoint","upgradeDelay","upgradeNextProtocolVoteBefore","upgradeNoVotes","upgradeNodeVote","upgradeVoteRounds","upgradeVotes","upgradeVotesRequired","upgradeYesVotes","PendingTransactionResponse","poolError","txn","assetClosingAmount","assetIndex","closeRewards","closingAmount","confirmedRound","globalStateDelta","innerTxns","localStateDelta","receiverRewards","senderRewards","PendingTransactionsResponse","topTransactions","totalTransactions","PostTransactionsResponse","ScratchChange","slot","SimulateInitialStates","appInitialStates","SimulateRequest","SimulateRequestTransactionGroup","SimulateTraceConfig","txnGroups","allowEmptySignatures","allowMoreLogging","allowUnnamedResources","execTraceConfig","extraOpcodeBudget","fixSigners","SimulateResponse","SimulateTransactionGroupResult","SimulationEvalOverrides","version","evalOverrides","initialStates","enable","scratchChange","stackChange","stateChange","SimulateTransactionResult","SimulateUnnamedResourcesAccessed","txnResults","appBudgetAdded","appBudgetConsumed","failedAt","failureMessage","unnamedResourcesAccessed","SimulationTransactionExecTrace","txnResult","execTrace","fixedSigner","logicSigBudgetConsumed","extraBoxRefs","addr","maxLogCalls","maxLogSize","SimulationOpcodeTraceUnit","scratchChanges","spawnedInners","stackAdditions","stackPopCount","stateChanges","approvalProgramHash","approvalProgramTrace","clearStateProgramHash","clearStateProgramTrace","clearStateRollback","clearStateRollbackError","innerTrace","logicSigHash","StateProof","StateProofMessage","stateproof","blockheaderscommitment","firstattestedround","lastattestedround","lnprovenweight","voterscommitment","SupplyResponse","currentRound","onlineMoney","totalMoney","TransactionGroupLedgerStateDeltasForRoundResponse","deltas","TransactionParametersResponse","consensusVersion","fee","genesisHash","genesisId","minFee","TransactionProofResponse","idx","stibhash","hashtype","Version","build","genesisHashB64","versions"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\algod\\models\\types.ts"],"sourcesContent":["/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n\n/* eslint-disable no-use-before-define */\nimport { ensureBigInt, ensureSafeInteger } from '../../../../utils/utils.js';\nimport { Encodable, Schema } from '../../../../encoding/encoding.js';\nimport {\n  NamedMapSchema,\n  ArraySchema,\n  Uint64Schema,\n  StringSchema,\n  BooleanSchema,\n  ByteArraySchema,\n  OptionalSchema,\n} from '../../../../encoding/schema/index.js';\nimport { base64ToBytes } from '../../../../encoding/binarydata.js';\nimport { Block } from '../../../../types/block.js';\nimport { LedgerStateDelta } from '../../../../types/statedelta.js';\nimport { SignedTransaction } from '../../../../signedTransaction.js';\nimport { Address } from '../../../../encoding/address.js';\nimport { UntypedValue } from '../../untypedmodel.js';\n\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'address', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'amount-without-pending-rewards',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'min-balance',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'pending-rewards',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        { key: 'rewards', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'status', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'total-apps-opted-in',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-assets-opted-in',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-created-apps',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-created-assets',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'apps-local-state',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(ApplicationLocalState.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'apps-total-extra-pages',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'apps-total-schema',\n          valueSchema: new OptionalSchema(\n            ApplicationStateSchema.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'assets',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(AssetHolding.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'auth-addr',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'created-apps',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(Application.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'created-assets',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(Asset.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'incentive-eligible',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'last-heartbeat',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'last-proposed',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'participation',\n          valueSchema: new OptionalSchema(AccountParticipation.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'reward-base',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'sig-type',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-box-bytes',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-boxes',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * the account public key\n   */\n  public address: string;\n\n  /**\n   * (algo) total number of MicroAlgos in the account\n   */\n  public amount: bigint;\n\n  /**\n   * specifies the amount of MicroAlgos in the account, without the pending rewards.\n   */\n  public amountWithoutPendingRewards: bigint;\n\n  /**\n   * MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   */\n  public minBalance: bigint;\n\n  /**\n   * amount of MicroAlgos of pending rewards in this account.\n   */\n  public pendingRewards: bigint;\n\n  /**\n   * (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   */\n  public rewards: bigint;\n\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: bigint;\n\n  /**\n   * (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   */\n  public status: string;\n\n  /**\n   * The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   */\n  public totalAppsOptedIn: number;\n\n  /**\n   * The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   */\n  public totalAssetsOptedIn: number;\n\n  /**\n   * The count of all apps (AppParams objects) created by this account.\n   */\n  public totalCreatedApps: number;\n\n  /**\n   * The count of all assets (AssetParams objects) created by this account.\n   */\n  public totalCreatedAssets: number;\n\n  /**\n   * (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   */\n  public appsLocalState?: ApplicationLocalState[];\n\n  /**\n   * (teap) the sum of all extra application program pages for this account.\n   */\n  public appsTotalExtraPages?: number;\n\n  /**\n   * (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   */\n  public appsTotalSchema?: ApplicationStateSchema;\n\n  /**\n   * (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   */\n  public assets?: AssetHolding[];\n\n  /**\n   * (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   */\n  public authAddr?: Address;\n\n  /**\n   * (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   */\n  public createdApps?: Application[];\n\n  /**\n   * (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   */\n  public createdAssets?: Asset[];\n\n  /**\n   * Whether or not the account can receive block incentives if its balance is in\n   * range at proposal time.\n   */\n  public incentiveEligible?: boolean;\n\n  /**\n   * The round in which this account last went online, or explicitly renewed their\n   * online status.\n   */\n  public lastHeartbeat?: number;\n\n  /**\n   * The round in which this account last proposed the block.\n   */\n  public lastProposed?: number;\n\n  /**\n   * AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   */\n  public participation?: AccountParticipation;\n\n  /**\n   * (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   */\n  public rewardBase?: bigint;\n\n  /**\n   * Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   */\n  public sigType?: string;\n\n  /**\n   * (tbxb) The total number of bytes used by this account's app's box keys and\n   * values.\n   */\n  public totalBoxBytes?: number;\n\n  /**\n   * (tbx) The number of existing boxes created by this account's app.\n   */\n  public totalBoxes?: number;\n\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param minBalance - MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param incentiveEligible - Whether or not the account can receive block incentives if its balance is in\n   * range at proposal time.\n   * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their\n   * online status.\n   * @param lastProposed - The round in which this account last proposed the block.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\n   * values.\n   * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    minBalance,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    createdApps,\n    createdAssets,\n    incentiveEligible,\n    lastHeartbeat,\n    lastProposed,\n    participation,\n    rewardBase,\n    sigType,\n    totalBoxBytes,\n    totalBoxes,\n  }: {\n    address: string;\n    amount: number | bigint;\n    amountWithoutPendingRewards: number | bigint;\n    minBalance: number | bigint;\n    pendingRewards: number | bigint;\n    rewards: number | bigint;\n    round: number | bigint;\n    status: string;\n    totalAppsOptedIn: number | bigint;\n    totalAssetsOptedIn: number | bigint;\n    totalCreatedApps: number | bigint;\n    totalCreatedAssets: number | bigint;\n    appsLocalState?: ApplicationLocalState[];\n    appsTotalExtraPages?: number | bigint;\n    appsTotalSchema?: ApplicationStateSchema;\n    assets?: AssetHolding[];\n    authAddr?: Address | string;\n    createdApps?: Application[];\n    createdAssets?: Asset[];\n    incentiveEligible?: boolean;\n    lastHeartbeat?: number | bigint;\n    lastProposed?: number | bigint;\n    participation?: AccountParticipation;\n    rewardBase?: number | bigint;\n    sigType?: string;\n    totalBoxBytes?: number | bigint;\n    totalBoxes?: number | bigint;\n  }) {\n    this.address = address;\n    this.amount = ensureBigInt(amount);\n    this.amountWithoutPendingRewards = ensureBigInt(\n      amountWithoutPendingRewards\n    );\n    this.minBalance = ensureBigInt(minBalance);\n    this.pendingRewards = ensureBigInt(pendingRewards);\n    this.rewards = ensureBigInt(rewards);\n    this.round = ensureBigInt(round);\n    this.status = status;\n    this.totalAppsOptedIn = ensureSafeInteger(totalAppsOptedIn);\n    this.totalAssetsOptedIn = ensureSafeInteger(totalAssetsOptedIn);\n    this.totalCreatedApps = ensureSafeInteger(totalCreatedApps);\n    this.totalCreatedAssets = ensureSafeInteger(totalCreatedAssets);\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages =\n      typeof appsTotalExtraPages === 'undefined'\n        ? undefined\n        : ensureSafeInteger(appsTotalExtraPages);\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr =\n      typeof authAddr === 'string' ? Address.fromString(authAddr) : authAddr;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.incentiveEligible = incentiveEligible;\n    this.lastHeartbeat =\n      typeof lastHeartbeat === 'undefined'\n        ? undefined\n        : ensureSafeInteger(lastHeartbeat);\n    this.lastProposed =\n      typeof lastProposed === 'undefined'\n        ? undefined\n        : ensureSafeInteger(lastProposed);\n    this.participation = participation;\n    this.rewardBase =\n      typeof rewardBase === 'undefined' ? undefined : ensureBigInt(rewardBase);\n    this.sigType = sigType;\n    this.totalBoxBytes =\n      typeof totalBoxBytes === 'undefined'\n        ? undefined\n        : ensureSafeInteger(totalBoxBytes);\n    this.totalBoxes =\n      typeof totalBoxes === 'undefined'\n        ? undefined\n        : ensureSafeInteger(totalBoxes);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Account.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['address', this.address],\n      ['amount', this.amount],\n      ['amount-without-pending-rewards', this.amountWithoutPendingRewards],\n      ['min-balance', this.minBalance],\n      ['pending-rewards', this.pendingRewards],\n      ['rewards', this.rewards],\n      ['round', this.round],\n      ['status', this.status],\n      ['total-apps-opted-in', this.totalAppsOptedIn],\n      ['total-assets-opted-in', this.totalAssetsOptedIn],\n      ['total-created-apps', this.totalCreatedApps],\n      ['total-created-assets', this.totalCreatedAssets],\n      [\n        'apps-local-state',\n        typeof this.appsLocalState !== 'undefined'\n          ? this.appsLocalState.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['apps-total-extra-pages', this.appsTotalExtraPages],\n      [\n        'apps-total-schema',\n        typeof this.appsTotalSchema !== 'undefined'\n          ? this.appsTotalSchema.toEncodingData()\n          : undefined,\n      ],\n      [\n        'assets',\n        typeof this.assets !== 'undefined'\n          ? this.assets.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      [\n        'auth-addr',\n        typeof this.authAddr !== 'undefined'\n          ? this.authAddr.toString()\n          : undefined,\n      ],\n      [\n        'created-apps',\n        typeof this.createdApps !== 'undefined'\n          ? this.createdApps.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      [\n        'created-assets',\n        typeof this.createdAssets !== 'undefined'\n          ? this.createdAssets.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['incentive-eligible', this.incentiveEligible],\n      ['last-heartbeat', this.lastHeartbeat],\n      ['last-proposed', this.lastProposed],\n      [\n        'participation',\n        typeof this.participation !== 'undefined'\n          ? this.participation.toEncodingData()\n          : undefined,\n      ],\n      ['reward-base', this.rewardBase],\n      ['sig-type', this.sigType],\n      ['total-box-bytes', this.totalBoxBytes],\n      ['total-boxes', this.totalBoxes],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Account {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Account: ${data}`);\n    }\n    return new Account({\n      address: data.get('address'),\n      amount: data.get('amount'),\n      amountWithoutPendingRewards: data.get('amount-without-pending-rewards'),\n      minBalance: data.get('min-balance'),\n      pendingRewards: data.get('pending-rewards'),\n      rewards: data.get('rewards'),\n      round: data.get('round'),\n      status: data.get('status'),\n      totalAppsOptedIn: data.get('total-apps-opted-in'),\n      totalAssetsOptedIn: data.get('total-assets-opted-in'),\n      totalCreatedApps: data.get('total-created-apps'),\n      totalCreatedAssets: data.get('total-created-assets'),\n      appsLocalState:\n        typeof data.get('apps-local-state') !== 'undefined'\n          ? data\n              .get('apps-local-state')\n              .map((v: unknown) => ApplicationLocalState.fromEncodingData(v))\n          : undefined,\n      appsTotalExtraPages: data.get('apps-total-extra-pages'),\n      appsTotalSchema:\n        typeof data.get('apps-total-schema') !== 'undefined'\n          ? ApplicationStateSchema.fromEncodingData(\n              data.get('apps-total-schema')\n            )\n          : undefined,\n      assets:\n        typeof data.get('assets') !== 'undefined'\n          ? data\n              .get('assets')\n              .map((v: unknown) => AssetHolding.fromEncodingData(v))\n          : undefined,\n      authAddr: data.get('auth-addr'),\n      createdApps:\n        typeof data.get('created-apps') !== 'undefined'\n          ? data\n              .get('created-apps')\n              .map((v: unknown) => Application.fromEncodingData(v))\n          : undefined,\n      createdAssets:\n        typeof data.get('created-assets') !== 'undefined'\n          ? data\n              .get('created-assets')\n              .map((v: unknown) => Asset.fromEncodingData(v))\n          : undefined,\n      incentiveEligible: data.get('incentive-eligible'),\n      lastHeartbeat: data.get('last-heartbeat'),\n      lastProposed: data.get('last-proposed'),\n      participation:\n        typeof data.get('participation') !== 'undefined'\n          ? AccountParticipation.fromEncodingData(data.get('participation'))\n          : undefined,\n      rewardBase: data.get('reward-base'),\n      sigType: data.get('sig-type'),\n      totalBoxBytes: data.get('total-box-bytes'),\n      totalBoxes: data.get('total-boxes'),\n    });\n  }\n}\n\n/**\n * AccountApplicationResponse describes the account's application local state and\n * global state (AppLocalState and AppParams, if either exists) for a specific\n * application ID. Global state will only be returned if the provided address is\n * the application's creator.\n */\nexport class AccountApplicationResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'app-local-state',\n          valueSchema: new OptionalSchema(ApplicationLocalState.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'created-app',\n          valueSchema: new OptionalSchema(ApplicationParams.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: bigint;\n\n  /**\n   * (appl) the application local data stored in this account.\n   * The raw account uses `AppLocalState` for this type.\n   */\n  public appLocalState?: ApplicationLocalState;\n\n  /**\n   * (appp) parameters of the application created by this account including app\n   * global data.\n   * The raw account uses `AppParams` for this type.\n   */\n  public createdApp?: ApplicationParams;\n\n  /**\n   * Creates a new `AccountApplicationResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param appLocalState - (appl) the application local data stored in this account.\n   * The raw account uses `AppLocalState` for this type.\n   * @param createdApp - (appp) parameters of the application created by this account including app\n   * global data.\n   * The raw account uses `AppParams` for this type.\n   */\n  constructor({\n    round,\n    appLocalState,\n    createdApp,\n  }: {\n    round: number | bigint;\n    appLocalState?: ApplicationLocalState;\n    createdApp?: ApplicationParams;\n  }) {\n    this.round = ensureBigInt(round);\n    this.appLocalState = appLocalState;\n    this.createdApp = createdApp;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AccountApplicationResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['round', this.round],\n      [\n        'app-local-state',\n        typeof this.appLocalState !== 'undefined'\n          ? this.appLocalState.toEncodingData()\n          : undefined,\n      ],\n      [\n        'created-app',\n        typeof this.createdApp !== 'undefined'\n          ? this.createdApp.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AccountApplicationResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountApplicationResponse: ${data}`);\n    }\n    return new AccountApplicationResponse({\n      round: data.get('round'),\n      appLocalState:\n        typeof data.get('app-local-state') !== 'undefined'\n          ? ApplicationLocalState.fromEncodingData(data.get('app-local-state'))\n          : undefined,\n      createdApp:\n        typeof data.get('created-app') !== 'undefined'\n          ? ApplicationParams.fromEncodingData(data.get('created-app'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * AccountAssetHolding describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID.\n */\nexport class AccountAssetHolding implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'asset-holding',\n          valueSchema: AssetHolding.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'asset-params',\n          valueSchema: new OptionalSchema(AssetParams.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   */\n  public assetHolding: AssetHolding;\n\n  /**\n   * (apar) parameters of the asset held by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  public assetParams?: AssetParams;\n\n  /**\n   * Creates a new `AccountAssetHolding` object.\n   * @param assetHolding - (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   * @param assetParams - (apar) parameters of the asset held by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  constructor({\n    assetHolding,\n    assetParams,\n  }: {\n    assetHolding: AssetHolding;\n    assetParams?: AssetParams;\n  }) {\n    this.assetHolding = assetHolding;\n    this.assetParams = assetParams;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AccountAssetHolding.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['asset-holding', this.assetHolding.toEncodingData()],\n      [\n        'asset-params',\n        typeof this.assetParams !== 'undefined'\n          ? this.assetParams.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AccountAssetHolding {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountAssetHolding: ${data}`);\n    }\n    return new AccountAssetHolding({\n      assetHolding: AssetHolding.fromEncodingData(\n        data.get('asset-holding') ?? new Map()\n      ),\n      assetParams:\n        typeof data.get('asset-params') !== 'undefined'\n          ? AssetParams.fromEncodingData(data.get('asset-params'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * AccountAssetResponse describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID. Asset parameters will only be\n * returned if the provided address is the asset's creator.\n */\nexport class AccountAssetResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'asset-holding',\n          valueSchema: new OptionalSchema(AssetHolding.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'created-asset',\n          valueSchema: new OptionalSchema(AssetParams.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: bigint;\n\n  /**\n   * (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   */\n  public assetHolding?: AssetHolding;\n\n  /**\n   * (apar) parameters of the asset created by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  public createdAsset?: AssetParams;\n\n  /**\n   * Creates a new `AccountAssetResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param assetHolding - (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   * @param createdAsset - (apar) parameters of the asset created by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  constructor({\n    round,\n    assetHolding,\n    createdAsset,\n  }: {\n    round: number | bigint;\n    assetHolding?: AssetHolding;\n    createdAsset?: AssetParams;\n  }) {\n    this.round = ensureBigInt(round);\n    this.assetHolding = assetHolding;\n    this.createdAsset = createdAsset;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AccountAssetResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['round', this.round],\n      [\n        'asset-holding',\n        typeof this.assetHolding !== 'undefined'\n          ? this.assetHolding.toEncodingData()\n          : undefined,\n      ],\n      [\n        'created-asset',\n        typeof this.createdAsset !== 'undefined'\n          ? this.createdAsset.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AccountAssetResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountAssetResponse: ${data}`);\n    }\n    return new AccountAssetResponse({\n      round: data.get('round'),\n      assetHolding:\n        typeof data.get('asset-holding') !== 'undefined'\n          ? AssetHolding.fromEncodingData(data.get('asset-holding'))\n          : undefined,\n      createdAsset:\n        typeof data.get('created-asset') !== 'undefined'\n          ? AssetParams.fromEncodingData(data.get('created-asset'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * AccountAssetsInformationResponse contains a list of assets held by an account.\n */\nexport class AccountAssetsInformationResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'asset-holdings',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(AccountAssetHolding.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: number;\n\n  public assetHoldings?: AccountAssetHolding[];\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AccountAssetsInformationResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param assetHoldings -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    round,\n    assetHoldings,\n    nextToken,\n  }: {\n    round: number | bigint;\n    assetHoldings?: AccountAssetHolding[];\n    nextToken?: string;\n  }) {\n    this.round = ensureSafeInteger(round);\n    this.assetHoldings = assetHoldings;\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AccountAssetsInformationResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['round', this.round],\n      [\n        'asset-holdings',\n        typeof this.assetHoldings !== 'undefined'\n          ? this.assetHoldings.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AccountAssetsInformationResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(\n        `Invalid decoded AccountAssetsInformationResponse: ${data}`\n      );\n    }\n    return new AccountAssetsInformationResponse({\n      round: data.get('round'),\n      assetHoldings:\n        typeof data.get('asset-holdings') !== 'undefined'\n          ? data\n              .get('asset-holdings')\n              .map((v: unknown) => AccountAssetHolding.fromEncodingData(v))\n          : undefined,\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'selection-participation-key',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-first-valid',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-key-dilution',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-last-valid',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-participation-key',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'state-proof-key',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (sel) Selection public key (if any) currently registered for this round.\n   */\n  public selectionParticipationKey: Uint8Array;\n\n  /**\n   * (voteFst) First round for which this participation is valid.\n   */\n  public voteFirstValid: bigint;\n\n  /**\n   * (voteKD) Number of subkeys in each batch of participation keys.\n   */\n  public voteKeyDilution: bigint;\n\n  /**\n   * (voteLst) Last round for which this participation is valid.\n   */\n  public voteLastValid: bigint;\n\n  /**\n   * (vote) root participation public key (if any) currently registered for this\n   * round.\n   */\n  public voteParticipationKey: Uint8Array;\n\n  /**\n   * (stprf) Root of the state proof key (if any)\n   */\n  public stateProofKey?: Uint8Array;\n\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey,\n  }: {\n    selectionParticipationKey: string | Uint8Array;\n    voteFirstValid: number | bigint;\n    voteKeyDilution: number | bigint;\n    voteLastValid: number | bigint;\n    voteParticipationKey: string | Uint8Array;\n    stateProofKey?: string | Uint8Array;\n  }) {\n    this.selectionParticipationKey =\n      typeof selectionParticipationKey === 'string'\n        ? base64ToBytes(selectionParticipationKey)\n        : selectionParticipationKey;\n    this.voteFirstValid = ensureBigInt(voteFirstValid);\n    this.voteKeyDilution = ensureBigInt(voteKeyDilution);\n    this.voteLastValid = ensureBigInt(voteLastValid);\n    this.voteParticipationKey =\n      typeof voteParticipationKey === 'string'\n        ? base64ToBytes(voteParticipationKey)\n        : voteParticipationKey;\n    this.stateProofKey =\n      typeof stateProofKey === 'string'\n        ? base64ToBytes(stateProofKey)\n        : stateProofKey;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AccountParticipation.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['selection-participation-key', this.selectionParticipationKey],\n      ['vote-first-valid', this.voteFirstValid],\n      ['vote-key-dilution', this.voteKeyDilution],\n      ['vote-last-valid', this.voteLastValid],\n      ['vote-participation-key', this.voteParticipationKey],\n      ['state-proof-key', this.stateProofKey],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AccountParticipation {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountParticipation: ${data}`);\n    }\n    return new AccountParticipation({\n      selectionParticipationKey: data.get('selection-participation-key'),\n      voteFirstValid: data.get('vote-first-valid'),\n      voteKeyDilution: data.get('vote-key-dilution'),\n      voteLastValid: data.get('vote-last-valid'),\n      voteParticipationKey: data.get('vote-participation-key'),\n      stateProofKey: data.get('state-proof-key'),\n    });\n  }\n}\n\n/**\n * Application state delta.\n */\nexport class AccountStateDelta implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'address', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'delta',\n          valueSchema: new ArraySchema(EvalDeltaKeyValue.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public address: string;\n\n  /**\n   * Application state delta.\n   */\n  public delta: EvalDeltaKeyValue[];\n\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor({\n    address,\n    delta,\n  }: {\n    address: string;\n    delta: EvalDeltaKeyValue[];\n  }) {\n    this.address = address;\n    this.delta = delta;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AccountStateDelta.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['address', this.address],\n      ['delta', this.delta.map((v) => v.toEncodingData())],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AccountStateDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountStateDelta: ${data}`);\n    }\n    return new AccountStateDelta({\n      address: data.get('address'),\n      delta: (data.get('delta') ?? []).map((v: unknown) =>\n        EvalDeltaKeyValue.fromEncodingData(v)\n      ),\n    });\n  }\n}\n\n/**\n * The logged messages from an app call along with the app ID and outer transaction\n * ID. Logs appear in the same order that they were emitted.\n */\nexport class AppCallLogs implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'application-index',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'logs',\n          valueSchema: new ArraySchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        { key: 'txId', valueSchema: new StringSchema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The application from which the logs were generated\n   */\n  public applicationIndex: number;\n\n  /**\n   * An array of logs\n   */\n  public logs: Uint8Array[];\n\n  /**\n   * The transaction ID of the outer app call that lead to these logs\n   */\n  public txid: string;\n\n  /**\n   * Creates a new `AppCallLogs` object.\n   * @param applicationIndex - The application from which the logs were generated\n   * @param logs - An array of logs\n   * @param txid - The transaction ID of the outer app call that lead to these logs\n   */\n  constructor({\n    applicationIndex,\n    logs,\n    txid,\n  }: {\n    applicationIndex: number | bigint;\n    logs: Uint8Array[];\n    txid: string;\n  }) {\n    this.applicationIndex = ensureSafeInteger(applicationIndex);\n    this.logs = logs;\n    this.txid = txid;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AppCallLogs.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['application-index', this.applicationIndex],\n      ['logs', this.logs],\n      ['txId', this.txid],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AppCallLogs {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppCallLogs: ${data}`);\n    }\n    return new AppCallLogs({\n      applicationIndex: data.get('application-index'),\n      logs: data.get('logs'),\n      txid: data.get('txId'),\n    });\n  }\n}\n\n/**\n * Application index and its parameters\n */\nexport class Application implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'id', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'params',\n          valueSchema: ApplicationParams.encodingSchema,\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (appidx) application index.\n   */\n  public id: bigint;\n\n  /**\n   * (appparams) application parameters.\n   */\n  public params: ApplicationParams;\n\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   */\n  constructor({\n    id,\n    params,\n  }: {\n    id: number | bigint;\n    params: ApplicationParams;\n  }) {\n    this.id = ensureBigInt(id);\n    this.params = params;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Application.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['id', this.id],\n      ['params', this.params.toEncodingData()],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Application {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Application: ${data}`);\n    }\n    return new Application({\n      id: data.get('id'),\n      params: ApplicationParams.fromEncodingData(\n        data.get('params') ?? new Map()\n      ),\n    });\n  }\n}\n\n/**\n * An application's initial global/local/box states that were accessed during\n * simulation.\n */\nexport class ApplicationInitialStates implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'id', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'app-boxes',\n          valueSchema: new OptionalSchema(ApplicationKVStorage.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'app-globals',\n          valueSchema: new OptionalSchema(ApplicationKVStorage.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'app-locals',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(ApplicationKVStorage.encodingSchema)\n          ),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Application index.\n   */\n  public id: bigint;\n\n  /**\n   * An application's global/local/box state.\n   */\n  public appBoxes?: ApplicationKVStorage;\n\n  /**\n   * An application's global/local/box state.\n   */\n  public appGlobals?: ApplicationKVStorage;\n\n  /**\n   * An application's initial local states tied to different accounts.\n   */\n  public appLocals?: ApplicationKVStorage[];\n\n  /**\n   * Creates a new `ApplicationInitialStates` object.\n   * @param id - Application index.\n   * @param appBoxes - An application's global/local/box state.\n   * @param appGlobals - An application's global/local/box state.\n   * @param appLocals - An application's initial local states tied to different accounts.\n   */\n  constructor({\n    id,\n    appBoxes,\n    appGlobals,\n    appLocals,\n  }: {\n    id: number | bigint;\n    appBoxes?: ApplicationKVStorage;\n    appGlobals?: ApplicationKVStorage;\n    appLocals?: ApplicationKVStorage[];\n  }) {\n    this.id = ensureBigInt(id);\n    this.appBoxes = appBoxes;\n    this.appGlobals = appGlobals;\n    this.appLocals = appLocals;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationInitialStates.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['id', this.id],\n      [\n        'app-boxes',\n        typeof this.appBoxes !== 'undefined'\n          ? this.appBoxes.toEncodingData()\n          : undefined,\n      ],\n      [\n        'app-globals',\n        typeof this.appGlobals !== 'undefined'\n          ? this.appGlobals.toEncodingData()\n          : undefined,\n      ],\n      [\n        'app-locals',\n        typeof this.appLocals !== 'undefined'\n          ? this.appLocals.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationInitialStates {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationInitialStates: ${data}`);\n    }\n    return new ApplicationInitialStates({\n      id: data.get('id'),\n      appBoxes:\n        typeof data.get('app-boxes') !== 'undefined'\n          ? ApplicationKVStorage.fromEncodingData(data.get('app-boxes'))\n          : undefined,\n      appGlobals:\n        typeof data.get('app-globals') !== 'undefined'\n          ? ApplicationKVStorage.fromEncodingData(data.get('app-globals'))\n          : undefined,\n      appLocals:\n        typeof data.get('app-locals') !== 'undefined'\n          ? data\n              .get('app-locals')\n              .map((v: unknown) => ApplicationKVStorage.fromEncodingData(v))\n          : undefined,\n    });\n  }\n}\n\n/**\n * An application's global/local/box state.\n */\nexport class ApplicationKVStorage implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'kvs',\n          valueSchema: new ArraySchema(AvmKeyValue.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'account',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Key-Value pairs representing application states.\n   */\n  public kvs: AvmKeyValue[];\n\n  /**\n   * The address of the account associated with the local state.\n   */\n  public account?: Address;\n\n  /**\n   * Creates a new `ApplicationKVStorage` object.\n   * @param kvs - Key-Value pairs representing application states.\n   * @param account - The address of the account associated with the local state.\n   */\n  constructor({\n    kvs,\n    account,\n  }: {\n    kvs: AvmKeyValue[];\n    account?: Address | string;\n  }) {\n    this.kvs = kvs;\n    this.account =\n      typeof account === 'string' ? Address.fromString(account) : account;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationKVStorage.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['kvs', this.kvs.map((v) => v.toEncodingData())],\n      [\n        'account',\n        typeof this.account !== 'undefined'\n          ? this.account.toString()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationKVStorage {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationKVStorage: ${data}`);\n    }\n    return new ApplicationKVStorage({\n      kvs: (data.get('kvs') ?? []).map((v: unknown) =>\n        AvmKeyValue.fromEncodingData(v)\n      ),\n      account: data.get('account'),\n    });\n  }\n}\n\n/**\n * References an account's local state for an application.\n */\nexport class ApplicationLocalReference implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'account', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'app', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Address of the account with the local state.\n   */\n  public account: Address;\n\n  /**\n   * Application ID of the local state application.\n   */\n  public app: bigint;\n\n  /**\n   * Creates a new `ApplicationLocalReference` object.\n   * @param account - Address of the account with the local state.\n   * @param app - Application ID of the local state application.\n   */\n  constructor({\n    account,\n    app,\n  }: {\n    account: Address | string;\n    app: number | bigint;\n  }) {\n    this.account =\n      typeof account === 'string' ? Address.fromString(account) : account;\n    this.app = ensureBigInt(app);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationLocalReference.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['account', this.account.toString()],\n      ['app', this.app],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationLocalReference {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLocalReference: ${data}`);\n    }\n    return new ApplicationLocalReference({\n      account: data.get('account'),\n      app: data.get('app'),\n    });\n  }\n}\n\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'id', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'schema',\n          valueSchema: ApplicationStateSchema.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'key-value',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(TealKeyValue.encodingSchema)\n          ),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The application which this local state is for.\n   */\n  public id: bigint;\n\n  /**\n   * (hsch) schema.\n   */\n  public schema: ApplicationStateSchema;\n\n  /**\n   * (tkv) storage.\n   */\n  public keyValue?: TealKeyValue[];\n\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param keyValue - (tkv) storage.\n   */\n  constructor({\n    id,\n    schema,\n    keyValue,\n  }: {\n    id: number | bigint;\n    schema: ApplicationStateSchema;\n    keyValue?: TealKeyValue[];\n  }) {\n    this.id = ensureBigInt(id);\n    this.schema = schema;\n    this.keyValue = keyValue;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationLocalState.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['id', this.id],\n      ['schema', this.schema.toEncodingData()],\n      [\n        'key-value',\n        typeof this.keyValue !== 'undefined'\n          ? this.keyValue.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationLocalState {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLocalState: ${data}`);\n    }\n    return new ApplicationLocalState({\n      id: data.get('id'),\n      schema: ApplicationStateSchema.fromEncodingData(\n        data.get('schema') ?? new Map()\n      ),\n      keyValue:\n        typeof data.get('key-value') !== 'undefined'\n          ? data\n              .get('key-value')\n              .map((v: unknown) => TealKeyValue.fromEncodingData(v))\n          : undefined,\n    });\n  }\n}\n\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'approval-program',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'clear-state-program',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        { key: 'creator', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'extra-program-pages',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'global-state',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(TealKeyValue.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'global-state-schema',\n          valueSchema: new OptionalSchema(\n            ApplicationStateSchema.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'local-state-schema',\n          valueSchema: new OptionalSchema(\n            ApplicationStateSchema.encodingSchema\n          ),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (approv) approval program.\n   */\n  public approvalProgram: Uint8Array;\n\n  /**\n   * (clearp) approval program.\n   */\n  public clearStateProgram: Uint8Array;\n\n  /**\n   * The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   */\n  public creator: Address;\n\n  /**\n   * (epp) the amount of extra program pages available to this app.\n   */\n  public extraProgramPages?: number;\n\n  /**\n   * (gs) global state\n   */\n  public globalState?: TealKeyValue[];\n\n  /**\n   * (gsch) global schema\n   */\n  public globalStateSchema?: ApplicationStateSchema;\n\n  /**\n   * (lsch) local schema\n   */\n  public localStateSchema?: ApplicationStateSchema;\n\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - (gs) global state\n   * @param globalStateSchema - (gsch) global schema\n   * @param localStateSchema - (lsch) local schema\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema,\n  }: {\n    approvalProgram: string | Uint8Array;\n    clearStateProgram: string | Uint8Array;\n    creator: Address | string;\n    extraProgramPages?: number | bigint;\n    globalState?: TealKeyValue[];\n    globalStateSchema?: ApplicationStateSchema;\n    localStateSchema?: ApplicationStateSchema;\n  }) {\n    this.approvalProgram =\n      typeof approvalProgram === 'string'\n        ? base64ToBytes(approvalProgram)\n        : approvalProgram;\n    this.clearStateProgram =\n      typeof clearStateProgram === 'string'\n        ? base64ToBytes(clearStateProgram)\n        : clearStateProgram;\n    this.creator =\n      typeof creator === 'string' ? Address.fromString(creator) : creator;\n    this.extraProgramPages =\n      typeof extraProgramPages === 'undefined'\n        ? undefined\n        : ensureSafeInteger(extraProgramPages);\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationParams.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['approval-program', this.approvalProgram],\n      ['clear-state-program', this.clearStateProgram],\n      ['creator', this.creator.toString()],\n      ['extra-program-pages', this.extraProgramPages],\n      [\n        'global-state',\n        typeof this.globalState !== 'undefined'\n          ? this.globalState.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      [\n        'global-state-schema',\n        typeof this.globalStateSchema !== 'undefined'\n          ? this.globalStateSchema.toEncodingData()\n          : undefined,\n      ],\n      [\n        'local-state-schema',\n        typeof this.localStateSchema !== 'undefined'\n          ? this.localStateSchema.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationParams {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationParams: ${data}`);\n    }\n    return new ApplicationParams({\n      approvalProgram: data.get('approval-program'),\n      clearStateProgram: data.get('clear-state-program'),\n      creator: data.get('creator'),\n      extraProgramPages: data.get('extra-program-pages'),\n      globalState:\n        typeof data.get('global-state') !== 'undefined'\n          ? data\n              .get('global-state')\n              .map((v: unknown) => TealKeyValue.fromEncodingData(v))\n          : undefined,\n      globalStateSchema:\n        typeof data.get('global-state-schema') !== 'undefined'\n          ? ApplicationStateSchema.fromEncodingData(\n              data.get('global-state-schema')\n            )\n          : undefined,\n      localStateSchema:\n        typeof data.get('local-state-schema') !== 'undefined'\n          ? ApplicationStateSchema.fromEncodingData(\n              data.get('local-state-schema')\n            )\n          : undefined,\n    });\n  }\n}\n\n/**\n * An operation against an application's global/local/box state.\n */\nexport class ApplicationStateOperation implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'app-state-type',\n          valueSchema: new StringSchema(),\n          omitEmpty: true,\n        },\n        { key: 'key', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        { key: 'operation', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'account',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'new-value',\n          valueSchema: new OptionalSchema(AvmValue.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Type of application state. Value `g` is **global state**, `l` is **local\n   * state**, `b` is **boxes**.\n   */\n  public appStateType: string;\n\n  /**\n   * The key (name) of the global/local/box state.\n   */\n  public key: Uint8Array;\n\n  /**\n   * Operation type. Value `w` is **write**, `d` is **delete**.\n   */\n  public operation: string;\n\n  /**\n   * For local state changes, the address of the account associated with the local\n   * state.\n   */\n  public account?: Address;\n\n  /**\n   * Represents an AVM value.\n   */\n  public newValue?: AvmValue;\n\n  /**\n   * Creates a new `ApplicationStateOperation` object.\n   * @param appStateType - Type of application state. Value `g` is **global state**, `l` is **local\n   * state**, `b` is **boxes**.\n   * @param key - The key (name) of the global/local/box state.\n   * @param operation - Operation type. Value `w` is **write**, `d` is **delete**.\n   * @param account - For local state changes, the address of the account associated with the local\n   * state.\n   * @param newValue - Represents an AVM value.\n   */\n  constructor({\n    appStateType,\n    key,\n    operation,\n    account,\n    newValue,\n  }: {\n    appStateType: string;\n    key: string | Uint8Array;\n    operation: string;\n    account?: Address | string;\n    newValue?: AvmValue;\n  }) {\n    this.appStateType = appStateType;\n    this.key = typeof key === 'string' ? base64ToBytes(key) : key;\n    this.operation = operation;\n    this.account =\n      typeof account === 'string' ? Address.fromString(account) : account;\n    this.newValue = newValue;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationStateOperation.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['app-state-type', this.appStateType],\n      ['key', this.key],\n      ['operation', this.operation],\n      [\n        'account',\n        typeof this.account !== 'undefined'\n          ? this.account.toString()\n          : undefined,\n      ],\n      [\n        'new-value',\n        typeof this.newValue !== 'undefined'\n          ? this.newValue.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationStateOperation {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationStateOperation: ${data}`);\n    }\n    return new ApplicationStateOperation({\n      appStateType: data.get('app-state-type'),\n      key: data.get('key'),\n      operation: data.get('operation'),\n      account: data.get('account'),\n      newValue:\n        typeof data.get('new-value') !== 'undefined'\n          ? AvmValue.fromEncodingData(data.get('new-value'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'num-byte-slice',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        { key: 'num-uint', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (nbs) num of byte slices.\n   */\n  public numByteSlice: number;\n\n  /**\n   * (nui) num of uints.\n   */\n  public numUint: number;\n\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numByteSlice - (nbs) num of byte slices.\n   * @param numUint - (nui) num of uints.\n   */\n  constructor({\n    numByteSlice,\n    numUint,\n  }: {\n    numByteSlice: number | bigint;\n    numUint: number | bigint;\n  }) {\n    this.numByteSlice = ensureSafeInteger(numByteSlice);\n    this.numUint = ensureSafeInteger(numUint);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationStateSchema.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['num-byte-slice', this.numByteSlice],\n      ['num-uint', this.numUint],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationStateSchema {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationStateSchema: ${data}`);\n    }\n    return new ApplicationStateSchema({\n      numByteSlice: data.get('num-byte-slice'),\n      numUint: data.get('num-uint'),\n    });\n  }\n}\n\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'index', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'params',\n          valueSchema: AssetParams.encodingSchema,\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * unique asset identifier\n   */\n  public index: bigint;\n\n  /**\n   * AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  public params: AssetParams;\n\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor({\n    index,\n    params,\n  }: {\n    index: number | bigint;\n    params: AssetParams;\n  }) {\n    this.index = ensureBigInt(index);\n    this.params = params;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Asset.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['index', this.index],\n      ['params', this.params.toEncodingData()],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Asset {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Asset: ${data}`);\n    }\n    return new Asset({\n      index: data.get('index'),\n      params: AssetParams.fromEncodingData(data.get('params') ?? new Map()),\n    });\n  }\n}\n\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'asset-id', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'is-frozen', valueSchema: new BooleanSchema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (a) number of units held.\n   */\n  public amount: bigint;\n\n  /**\n   * Asset ID of the holding.\n   */\n  public assetId: bigint;\n\n  /**\n   * (f) whether or not the holding is frozen.\n   */\n  public isFrozen: boolean;\n\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen,\n  }: {\n    amount: number | bigint;\n    assetId: number | bigint;\n    isFrozen: boolean;\n  }) {\n    this.amount = ensureBigInt(amount);\n    this.assetId = ensureBigInt(assetId);\n    this.isFrozen = isFrozen;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AssetHolding.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['amount', this.amount],\n      ['asset-id', this.assetId],\n      ['is-frozen', this.isFrozen],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AssetHolding {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHolding: ${data}`);\n    }\n    return new AssetHolding({\n      amount: data.get('amount'),\n      assetId: data.get('asset-id'),\n      isFrozen: data.get('is-frozen'),\n    });\n  }\n}\n\n/**\n * References an asset held by an account.\n */\nexport class AssetHoldingReference implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'account', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'asset', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Address of the account holding the asset.\n   */\n  public account: Address;\n\n  /**\n   * Asset ID of the holding.\n   */\n  public asset: bigint;\n\n  /**\n   * Creates a new `AssetHoldingReference` object.\n   * @param account - Address of the account holding the asset.\n   * @param asset - Asset ID of the holding.\n   */\n  constructor({\n    account,\n    asset,\n  }: {\n    account: Address | string;\n    asset: number | bigint;\n  }) {\n    this.account =\n      typeof account === 'string' ? Address.fromString(account) : account;\n    this.asset = ensureBigInt(asset);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AssetHoldingReference.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['account', this.account.toString()],\n      ['asset', this.asset],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AssetHoldingReference {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHoldingReference: ${data}`);\n    }\n    return new AssetHoldingReference({\n      account: data.get('account'),\n      asset: data.get('asset'),\n    });\n  }\n}\n\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'creator', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'decimals', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'total', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'clawback',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'default-frozen',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'freeze',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'manager',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'metadata-hash',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'name',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'name-b64',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'reserve',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'unit-name',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'unit-name-b64',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'url',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'url-b64',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   */\n  public creator: string;\n\n  /**\n   * (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   */\n  public decimals: number;\n\n  /**\n   * (t) The total number of units of this asset.\n   */\n  public total: bigint;\n\n  /**\n   * (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   */\n  public clawback?: string;\n\n  /**\n   * (df) Whether holdings of this asset are frozen by default.\n   */\n  public defaultFrozen?: boolean;\n\n  /**\n   * (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   */\n  public freeze?: string;\n\n  /**\n   * (m) Address of account used to manage the keys of this asset and to destroy it.\n   */\n  public manager?: string;\n\n  /**\n   * (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   */\n  public metadataHash?: Uint8Array;\n\n  /**\n   * (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   */\n  public name?: string;\n\n  /**\n   * Base64 encoded name of this asset, as supplied by the creator.\n   */\n  public nameB64?: Uint8Array;\n\n  /**\n   * (r) Address of account holding reserve (non-minted) units of this asset.\n   */\n  public reserve?: string;\n\n  /**\n   * (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   */\n  public unitName?: string;\n\n  /**\n   * Base64 encoded name of a unit of this asset, as supplied by the creator.\n   */\n  public unitNameB64?: Uint8Array;\n\n  /**\n   * (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   */\n  public url?: string;\n\n  /**\n   * Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  public urlB64?: Uint8Array;\n\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64,\n  }: {\n    creator: string;\n    decimals: number | bigint;\n    total: number | bigint;\n    clawback?: string;\n    defaultFrozen?: boolean;\n    freeze?: string;\n    manager?: string;\n    metadataHash?: string | Uint8Array;\n    name?: string;\n    nameB64?: string | Uint8Array;\n    reserve?: string;\n    unitName?: string;\n    unitNameB64?: string | Uint8Array;\n    url?: string;\n    urlB64?: string | Uint8Array;\n  }) {\n    this.creator = creator;\n    this.decimals = ensureSafeInteger(decimals);\n    this.total = ensureBigInt(total);\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash =\n      typeof metadataHash === 'string'\n        ? base64ToBytes(metadataHash)\n        : metadataHash;\n    this.name = name;\n    this.nameB64 =\n      typeof nameB64 === 'string' ? base64ToBytes(nameB64) : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 =\n      typeof unitNameB64 === 'string'\n        ? base64ToBytes(unitNameB64)\n        : unitNameB64;\n    this.url = url;\n    this.urlB64 = typeof urlB64 === 'string' ? base64ToBytes(urlB64) : urlB64;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AssetParams.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['creator', this.creator],\n      ['decimals', this.decimals],\n      ['total', this.total],\n      ['clawback', this.clawback],\n      ['default-frozen', this.defaultFrozen],\n      ['freeze', this.freeze],\n      ['manager', this.manager],\n      ['metadata-hash', this.metadataHash],\n      ['name', this.name],\n      ['name-b64', this.nameB64],\n      ['reserve', this.reserve],\n      ['unit-name', this.unitName],\n      ['unit-name-b64', this.unitNameB64],\n      ['url', this.url],\n      ['url-b64', this.urlB64],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AssetParams {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetParams: ${data}`);\n    }\n    return new AssetParams({\n      creator: data.get('creator'),\n      decimals: data.get('decimals'),\n      total: data.get('total'),\n      clawback: data.get('clawback'),\n      defaultFrozen: data.get('default-frozen'),\n      freeze: data.get('freeze'),\n      manager: data.get('manager'),\n      metadataHash: data.get('metadata-hash'),\n      name: data.get('name'),\n      nameB64: data.get('name-b64'),\n      reserve: data.get('reserve'),\n      unitName: data.get('unit-name'),\n      unitNameB64: data.get('unit-name-b64'),\n      url: data.get('url'),\n      urlB64: data.get('url-b64'),\n    });\n  }\n}\n\n/**\n * Represents an AVM key-value pair in an application store.\n */\nexport class AvmKeyValue implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'key', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        { key: 'value', valueSchema: AvmValue.encodingSchema, omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public key: Uint8Array;\n\n  /**\n   * Represents an AVM value.\n   */\n  public value: AvmValue;\n\n  /**\n   * Creates a new `AvmKeyValue` object.\n   * @param key -\n   * @param value - Represents an AVM value.\n   */\n  constructor({ key, value }: { key: string | Uint8Array; value: AvmValue }) {\n    this.key = typeof key === 'string' ? base64ToBytes(key) : key;\n    this.value = value;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AvmKeyValue.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['key', this.key],\n      ['value', this.value.toEncodingData()],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AvmKeyValue {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AvmKeyValue: ${data}`);\n    }\n    return new AvmKeyValue({\n      key: data.get('key'),\n      value: AvmValue.fromEncodingData(data.get('value') ?? new Map()),\n    });\n  }\n}\n\n/**\n * Represents an AVM value.\n */\nexport class AvmValue implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'type', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'bytes',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'uint',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\n   */\n  public type: number;\n\n  /**\n   * bytes value.\n   */\n  public bytes?: Uint8Array;\n\n  /**\n   * uint value.\n   */\n  public uint?: bigint;\n\n  /**\n   * Creates a new `AvmValue` object.\n   * @param type - value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\n   * @param bytes - bytes value.\n   * @param uint - uint value.\n   */\n  constructor({\n    type,\n    bytes,\n    uint,\n  }: {\n    type: number | bigint;\n    bytes?: string | Uint8Array;\n    uint?: number | bigint;\n  }) {\n    this.type = ensureSafeInteger(type);\n    this.bytes = typeof bytes === 'string' ? base64ToBytes(bytes) : bytes;\n    this.uint = typeof uint === 'undefined' ? undefined : ensureBigInt(uint);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AvmValue.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['type', this.type],\n      ['bytes', this.bytes],\n      ['uint', this.uint],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AvmValue {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AvmValue: ${data}`);\n    }\n    return new AvmValue({\n      type: data.get('type'),\n      bytes: data.get('bytes'),\n      uint: data.get('uint'),\n    });\n  }\n}\n\n/**\n * Hash of a block header.\n */\nexport class BlockHashResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'blockHash',\n        valueSchema: new StringSchema(),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Block header hash.\n   */\n  public blockhash: string;\n\n  /**\n   * Creates a new `BlockHashResponse` object.\n   * @param blockhash - Block header hash.\n   */\n  constructor({ blockhash }: { blockhash: string }) {\n    this.blockhash = blockhash;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BlockHashResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([['blockHash', this.blockhash]]);\n  }\n\n  static fromEncodingData(data: unknown): BlockHashResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockHashResponse: ${data}`);\n    }\n    return new BlockHashResponse({\n      blockhash: data.get('blockHash'),\n    });\n  }\n}\n\n/**\n * All logs emitted in the given round. Each app call, whether top-level or inner,\n * that contains logs results in a separate AppCallLogs object. Therefore there may\n * be multiple AppCallLogs with the same application ID and outer transaction ID in\n * the event of multiple inner app calls to the same app. App calls with no logs\n * are not included in the response. AppCallLogs are returned in the same order\n * that their corresponding app call appeared in the block (pre-order traversal of\n * inner app calls)\n */\nexport class BlockLogsResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'logs',\n        valueSchema: new ArraySchema(AppCallLogs.encodingSchema),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public logs: AppCallLogs[];\n\n  /**\n   * Creates a new `BlockLogsResponse` object.\n   * @param logs -\n   */\n  constructor({ logs }: { logs: AppCallLogs[] }) {\n    this.logs = logs;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BlockLogsResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['logs', this.logs.map((v) => v.toEncodingData())],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): BlockLogsResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockLogsResponse: ${data}`);\n    }\n    return new BlockLogsResponse({\n      logs: (data.get('logs') ?? []).map((v: unknown) =>\n        AppCallLogs.fromEncodingData(v)\n      ),\n    });\n  }\n}\n\n/**\n * Encoded block object.\n */\nexport class BlockResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'block', valueSchema: Block.encodingSchema, omitEmpty: true },\n        {\n          key: 'cert',\n          valueSchema: new OptionalSchema(UntypedValue.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Block header data.\n   */\n  public block: Block;\n\n  /**\n   * Optional certificate object. This is only included when the format is set to\n   * message pack.\n   */\n  public cert?: UntypedValue;\n\n  /**\n   * Creates a new `BlockResponse` object.\n   * @param block - Block header data.\n   * @param cert - Optional certificate object. This is only included when the format is set to\n   * message pack.\n   */\n  constructor({ block, cert }: { block: Block; cert?: UntypedValue }) {\n    this.block = block;\n    this.cert = cert;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BlockResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['block', this.block.toEncodingData()],\n      [\n        'cert',\n        typeof this.cert !== 'undefined'\n          ? this.cert.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): BlockResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockResponse: ${data}`);\n    }\n    return new BlockResponse({\n      block: Block.fromEncodingData(data.get('block') ?? new Map()),\n      cert:\n        typeof data.get('cert') !== 'undefined'\n          ? UntypedValue.fromEncodingData(data.get('cert'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * Top level transaction IDs in a block.\n */\nexport class BlockTxidsResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'blockTxids',\n        valueSchema: new ArraySchema(new StringSchema()),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Block transaction IDs.\n   */\n  public blocktxids: string[];\n\n  /**\n   * Creates a new `BlockTxidsResponse` object.\n   * @param blocktxids - Block transaction IDs.\n   */\n  constructor({ blocktxids }: { blocktxids: string[] }) {\n    this.blocktxids = blocktxids;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BlockTxidsResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([['blockTxids', this.blocktxids]]);\n  }\n\n  static fromEncodingData(data: unknown): BlockTxidsResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockTxidsResponse: ${data}`);\n    }\n    return new BlockTxidsResponse({\n      blocktxids: data.get('blockTxids'),\n    });\n  }\n}\n\n/**\n * Box name and its content.\n */\nexport class Box implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'name', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'value', valueSchema: new ByteArraySchema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (name) box name, base64 encoded\n   */\n  public name: Uint8Array;\n\n  /**\n   * The round for which this information is relevant\n   */\n  public round: bigint;\n\n  /**\n   * (value) box value, base64 encoded.\n   */\n  public value: Uint8Array;\n\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param round - The round for which this information is relevant\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor({\n    name,\n    round,\n    value,\n  }: {\n    name: string | Uint8Array;\n    round: number | bigint;\n    value: string | Uint8Array;\n  }) {\n    this.name = typeof name === 'string' ? base64ToBytes(name) : name;\n    this.round = ensureBigInt(round);\n    this.value = typeof value === 'string' ? base64ToBytes(value) : value;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Box.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['name', this.name],\n      ['round', this.round],\n      ['value', this.value],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Box {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Box: ${data}`);\n    }\n    return new Box({\n      name: data.get('name'),\n      round: data.get('round'),\n      value: data.get('value'),\n    });\n  }\n}\n\n/**\n * Box descriptor describes a Box.\n */\nexport class BoxDescriptor implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'name',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Base64 encoded box name\n   */\n  public name: Uint8Array;\n\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor({ name }: { name: string | Uint8Array }) {\n    this.name = typeof name === 'string' ? base64ToBytes(name) : name;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BoxDescriptor.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([['name', this.name]]);\n  }\n\n  static fromEncodingData(data: unknown): BoxDescriptor {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BoxDescriptor: ${data}`);\n    }\n    return new BoxDescriptor({\n      name: data.get('name'),\n    });\n  }\n}\n\n/**\n * References a box of an application.\n */\nexport class BoxReference implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'app', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'name', valueSchema: new ByteArraySchema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Application ID which this box belongs to\n   */\n  public app: bigint;\n\n  /**\n   * Base64 encoded box name\n   */\n  public name: Uint8Array;\n\n  /**\n   * Creates a new `BoxReference` object.\n   * @param app - Application ID which this box belongs to\n   * @param name - Base64 encoded box name\n   */\n  constructor({\n    app,\n    name,\n  }: {\n    app: number | bigint;\n    name: string | Uint8Array;\n  }) {\n    this.app = ensureBigInt(app);\n    this.name = typeof name === 'string' ? base64ToBytes(name) : name;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BoxReference.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['app', this.app],\n      ['name', this.name],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): BoxReference {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BoxReference: ${data}`);\n    }\n    return new BoxReference({\n      app: data.get('app'),\n      name: data.get('name'),\n    });\n  }\n}\n\n/**\n * Box names of an application\n */\nexport class BoxesResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'boxes',\n        valueSchema: new ArraySchema(BoxDescriptor.encodingSchema),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public boxes: BoxDescriptor[];\n\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param boxes -\n   */\n  constructor({ boxes }: { boxes: BoxDescriptor[] }) {\n    this.boxes = boxes;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BoxesResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['boxes', this.boxes.map((v) => v.toEncodingData())],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): BoxesResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BoxesResponse: ${data}`);\n    }\n    return new BoxesResponse({\n      boxes: (data.get('boxes') ?? []).map((v: unknown) =>\n        BoxDescriptor.fromEncodingData(v)\n      ),\n    });\n  }\n}\n\nexport class BuildVersion implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'branch', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'build_number',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        { key: 'channel', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'commit_hash',\n          valueSchema: new StringSchema(),\n          omitEmpty: true,\n        },\n        { key: 'major', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'minor', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public branch: string;\n\n  public buildNumber: number;\n\n  public channel: string;\n\n  public commitHash: string;\n\n  public major: number;\n\n  public minor: number;\n\n  /**\n   * Creates a new `BuildVersion` object.\n   * @param branch -\n   * @param buildNumber -\n   * @param channel -\n   * @param commitHash -\n   * @param major -\n   * @param minor -\n   */\n  constructor({\n    branch,\n    buildNumber,\n    channel,\n    commitHash,\n    major,\n    minor,\n  }: {\n    branch: string;\n    buildNumber: number | bigint;\n    channel: string;\n    commitHash: string;\n    major: number | bigint;\n    minor: number | bigint;\n  }) {\n    this.branch = branch;\n    this.buildNumber = ensureSafeInteger(buildNumber);\n    this.channel = channel;\n    this.commitHash = commitHash;\n    this.major = ensureSafeInteger(major);\n    this.minor = ensureSafeInteger(minor);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BuildVersion.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['branch', this.branch],\n      ['build_number', this.buildNumber],\n      ['channel', this.channel],\n      ['commit_hash', this.commitHash],\n      ['major', this.major],\n      ['minor', this.minor],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): BuildVersion {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BuildVersion: ${data}`);\n    }\n    return new BuildVersion({\n      branch: data.get('branch'),\n      buildNumber: data.get('build_number'),\n      channel: data.get('channel'),\n      commitHash: data.get('commit_hash'),\n      major: data.get('major'),\n      minor: data.get('minor'),\n    });\n  }\n}\n\n/**\n * Teal compile Result\n */\nexport class CompileResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'hash', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'result', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'sourcemap',\n          valueSchema: new OptionalSchema(UntypedValue.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * base32 SHA512_256 of program bytes (Address style)\n   */\n  public hash: string;\n\n  /**\n   * base64 encoded program bytes\n   */\n  public result: string;\n\n  /**\n   * JSON of the source map\n   */\n  public sourcemap?: UntypedValue;\n\n  /**\n   * Creates a new `CompileResponse` object.\n   * @param hash - base32 SHA512_256 of program bytes (Address style)\n   * @param result - base64 encoded program bytes\n   * @param sourcemap - JSON of the source map\n   */\n  constructor({\n    hash,\n    result,\n    sourcemap,\n  }: {\n    hash: string;\n    result: string;\n    sourcemap?: UntypedValue;\n  }) {\n    this.hash = hash;\n    this.result = result;\n    this.sourcemap = sourcemap;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return CompileResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['hash', this.hash],\n      ['result', this.result],\n      [\n        'sourcemap',\n        typeof this.sourcemap !== 'undefined'\n          ? this.sourcemap.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): CompileResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded CompileResponse: ${data}`);\n    }\n    return new CompileResponse({\n      hash: data.get('hash'),\n      result: data.get('result'),\n      sourcemap:\n        typeof data.get('sourcemap') !== 'undefined'\n          ? UntypedValue.fromEncodingData(data.get('sourcemap'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * Teal disassembly Result\n */\nexport class DisassembleResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'result',\n        valueSchema: new StringSchema(),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * disassembled Teal code\n   */\n  public result: string;\n\n  /**\n   * Creates a new `DisassembleResponse` object.\n   * @param result - disassembled Teal code\n   */\n  constructor({ result }: { result: string }) {\n    this.result = result;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return DisassembleResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([['result', this.result]]);\n  }\n\n  static fromEncodingData(data: unknown): DisassembleResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DisassembleResponse: ${data}`);\n    }\n    return new DisassembleResponse({\n      result: data.get('result'),\n    });\n  }\n}\n\n/**\n * Request data type for dryrun endpoint. Given the Transactions and simulated\n * ledger state upload, run TEAL scripts and return debugging information.\n */\nexport class DryrunRequest implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'accounts',\n          valueSchema: new ArraySchema(Account.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'apps',\n          valueSchema: new ArraySchema(Application.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'latest-timestamp',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'protocol-version',\n          valueSchema: new StringSchema(),\n          omitEmpty: true,\n        },\n        { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'sources',\n          valueSchema: new ArraySchema(DryrunSource.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'txns',\n          valueSchema: new ArraySchema(SignedTransaction.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public accounts: Account[];\n\n  public apps: Application[];\n\n  /**\n   * LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n   * confirmed timestamp this algod is attached to.\n   */\n  public latestTimestamp: number;\n\n  /**\n   * ProtocolVersion specifies a specific version string to operate under, otherwise\n   * whatever the current protocol of the network this algod is running in.\n   */\n  public protocolVersion: string;\n\n  /**\n   * Round is available to some TEAL scripts. Defaults to the current round on the\n   * network this algod is attached to.\n   */\n  public round: bigint;\n\n  public sources: DryrunSource[];\n\n  public txns: SignedTransaction[];\n\n  /**\n   * Creates a new `DryrunRequest` object.\n   * @param accounts -\n   * @param apps -\n   * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n   * confirmed timestamp this algod is attached to.\n   * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\n   * whatever the current protocol of the network this algod is running in.\n   * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\n   * network this algod is attached to.\n   * @param sources -\n   * @param txns -\n   */\n  constructor({\n    accounts,\n    apps,\n    latestTimestamp,\n    protocolVersion,\n    round,\n    sources,\n    txns,\n  }: {\n    accounts: Account[];\n    apps: Application[];\n    latestTimestamp: number | bigint;\n    protocolVersion: string;\n    round: number | bigint;\n    sources: DryrunSource[];\n    txns: SignedTransaction[];\n  }) {\n    this.accounts = accounts;\n    this.apps = apps;\n    this.latestTimestamp = ensureSafeInteger(latestTimestamp);\n    this.protocolVersion = protocolVersion;\n    this.round = ensureBigInt(round);\n    this.sources = sources;\n    this.txns = txns;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return DryrunRequest.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['accounts', this.accounts.map((v) => v.toEncodingData())],\n      ['apps', this.apps.map((v) => v.toEncodingData())],\n      ['latest-timestamp', this.latestTimestamp],\n      ['protocol-version', this.protocolVersion],\n      ['round', this.round],\n      ['sources', this.sources.map((v) => v.toEncodingData())],\n      ['txns', this.txns.map((v) => v.toEncodingData())],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): DryrunRequest {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DryrunRequest: ${data}`);\n    }\n    return new DryrunRequest({\n      accounts: (data.get('accounts') ?? []).map((v: unknown) =>\n        Account.fromEncodingData(v)\n      ),\n      apps: (data.get('apps') ?? []).map((v: unknown) =>\n        Application.fromEncodingData(v)\n      ),\n      latestTimestamp: data.get('latest-timestamp'),\n      protocolVersion: data.get('protocol-version'),\n      round: data.get('round'),\n      sources: (data.get('sources') ?? []).map((v: unknown) =>\n        DryrunSource.fromEncodingData(v)\n      ),\n      txns: (data.get('txns') ?? []).map((v: unknown) =>\n        SignedTransaction.fromEncodingData(v)\n      ),\n    });\n  }\n}\n\n/**\n * DryrunResponse contains per-txn debug information from a dryrun.\n */\nexport class DryrunResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'error', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'protocol-version',\n          valueSchema: new StringSchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'txns',\n          valueSchema: new ArraySchema(DryrunTxnResult.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public error: string;\n\n  /**\n   * Protocol version is the protocol version Dryrun was operated under.\n   */\n  public protocolVersion: string;\n\n  public txns: DryrunTxnResult[];\n\n  /**\n   * Creates a new `DryrunResponse` object.\n   * @param error -\n   * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\n   * @param txns -\n   */\n  constructor({\n    error,\n    protocolVersion,\n    txns,\n  }: {\n    error: string;\n    protocolVersion: string;\n    txns: DryrunTxnResult[];\n  }) {\n    this.error = error;\n    this.protocolVersion = protocolVersion;\n    this.txns = txns;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return DryrunResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['error', this.error],\n      ['protocol-version', this.protocolVersion],\n      ['txns', this.txns.map((v) => v.toEncodingData())],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): DryrunResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DryrunResponse: ${data}`);\n    }\n    return new DryrunResponse({\n      error: data.get('error'),\n      protocolVersion: data.get('protocol-version'),\n      txns: (data.get('txns') ?? []).map((v: unknown) =>\n        DryrunTxnResult.fromEncodingData(v)\n      ),\n    });\n  }\n}\n\n/**\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\n * transactions or application state.\n */\nexport class DryrunSource implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'app-index', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'field-name', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'source', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'txn-index', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public appIndex: bigint;\n\n  /**\n   * FieldName is what kind of sources this is. If lsig then it goes into the\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n   * Approval Program or Clear State Program of application[this.AppIndex].\n   */\n  public fieldName: string;\n\n  public source: string;\n\n  public txnIndex: number;\n\n  /**\n   * Creates a new `DryrunSource` object.\n   * @param appIndex -\n   * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n   * Approval Program or Clear State Program of application[this.AppIndex].\n   * @param source -\n   * @param txnIndex -\n   */\n  constructor({\n    appIndex,\n    fieldName,\n    source,\n    txnIndex,\n  }: {\n    appIndex: number | bigint;\n    fieldName: string;\n    source: string;\n    txnIndex: number | bigint;\n  }) {\n    this.appIndex = ensureBigInt(appIndex);\n    this.fieldName = fieldName;\n    this.source = source;\n    this.txnIndex = ensureSafeInteger(txnIndex);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return DryrunSource.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['app-index', this.appIndex],\n      ['field-name', this.fieldName],\n      ['source', this.source],\n      ['txn-index', this.txnIndex],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): DryrunSource {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DryrunSource: ${data}`);\n    }\n    return new DryrunSource({\n      appIndex: data.get('app-index'),\n      fieldName: data.get('field-name'),\n      source: data.get('source'),\n      txnIndex: data.get('txn-index'),\n    });\n  }\n}\n\n/**\n * Stores the TEAL eval step data\n */\nexport class DryrunState implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'line', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'pc', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'stack',\n          valueSchema: new ArraySchema(TealValue.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'error',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'scratch',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(TealValue.encodingSchema)\n          ),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Line number\n   */\n  public line: number;\n\n  /**\n   * Program counter\n   */\n  public pc: number;\n\n  public stack: TealValue[];\n\n  /**\n   * Evaluation error if any\n   */\n  public error?: string;\n\n  public scratch?: TealValue[];\n\n  /**\n   * Creates a new `DryrunState` object.\n   * @param line - Line number\n   * @param pc - Program counter\n   * @param stack -\n   * @param error - Evaluation error if any\n   * @param scratch -\n   */\n  constructor({\n    line,\n    pc,\n    stack,\n    error,\n    scratch,\n  }: {\n    line: number | bigint;\n    pc: number | bigint;\n    stack: TealValue[];\n    error?: string;\n    scratch?: TealValue[];\n  }) {\n    this.line = ensureSafeInteger(line);\n    this.pc = ensureSafeInteger(pc);\n    this.stack = stack;\n    this.error = error;\n    this.scratch = scratch;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return DryrunState.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['line', this.line],\n      ['pc', this.pc],\n      ['stack', this.stack.map((v) => v.toEncodingData())],\n      ['error', this.error],\n      [\n        'scratch',\n        typeof this.scratch !== 'undefined'\n          ? this.scratch.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): DryrunState {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DryrunState: ${data}`);\n    }\n    return new DryrunState({\n      line: data.get('line'),\n      pc: data.get('pc'),\n      stack: (data.get('stack') ?? []).map((v: unknown) =>\n        TealValue.fromEncodingData(v)\n      ),\n      error: data.get('error'),\n      scratch:\n        typeof data.get('scratch') !== 'undefined'\n          ? data\n              .get('scratch')\n              .map((v: unknown) => TealValue.fromEncodingData(v))\n          : undefined,\n    });\n  }\n}\n\n/**\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\n * information and state updates from a dryrun.\n */\nexport class DryrunTxnResult implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'disassembly',\n          valueSchema: new ArraySchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'app-call-messages',\n          valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'app-call-trace',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(DryrunState.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'budget-added',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'budget-consumed',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'global-delta',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(EvalDeltaKeyValue.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'local-deltas',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(AccountStateDelta.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'logic-sig-disassembly',\n          valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'logic-sig-messages',\n          valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'logic-sig-trace',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(DryrunState.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'logs',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(new ByteArraySchema())\n          ),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Disassembled program line by line.\n   */\n  public disassembly: string[];\n\n  public appCallMessages?: string[];\n\n  public appCallTrace?: DryrunState[];\n\n  /**\n   * Budget added during execution of app call transaction.\n   */\n  public budgetAdded?: number;\n\n  /**\n   * Budget consumed during execution of app call transaction.\n   */\n  public budgetConsumed?: number;\n\n  /**\n   * Application state delta.\n   */\n  public globalDelta?: EvalDeltaKeyValue[];\n\n  public localDeltas?: AccountStateDelta[];\n\n  /**\n   * Disassembled lsig program line by line.\n   */\n  public logicSigDisassembly?: string[];\n\n  public logicSigMessages?: string[];\n\n  public logicSigTrace?: DryrunState[];\n\n  public logs?: Uint8Array[];\n\n  /**\n   * Creates a new `DryrunTxnResult` object.\n   * @param disassembly - Disassembled program line by line.\n   * @param appCallMessages -\n   * @param appCallTrace -\n   * @param budgetAdded - Budget added during execution of app call transaction.\n   * @param budgetConsumed - Budget consumed during execution of app call transaction.\n   * @param globalDelta - Application state delta.\n   * @param localDeltas -\n   * @param logicSigDisassembly - Disassembled lsig program line by line.\n   * @param logicSigMessages -\n   * @param logicSigTrace -\n   * @param logs -\n   */\n  constructor({\n    disassembly,\n    appCallMessages,\n    appCallTrace,\n    budgetAdded,\n    budgetConsumed,\n    globalDelta,\n    localDeltas,\n    logicSigDisassembly,\n    logicSigMessages,\n    logicSigTrace,\n    logs,\n  }: {\n    disassembly: string[];\n    appCallMessages?: string[];\n    appCallTrace?: DryrunState[];\n    budgetAdded?: number | bigint;\n    budgetConsumed?: number | bigint;\n    globalDelta?: EvalDeltaKeyValue[];\n    localDeltas?: AccountStateDelta[];\n    logicSigDisassembly?: string[];\n    logicSigMessages?: string[];\n    logicSigTrace?: DryrunState[];\n    logs?: Uint8Array[];\n  }) {\n    this.disassembly = disassembly;\n    this.appCallMessages = appCallMessages;\n    this.appCallTrace = appCallTrace;\n    this.budgetAdded =\n      typeof budgetAdded === 'undefined'\n        ? undefined\n        : ensureSafeInteger(budgetAdded);\n    this.budgetConsumed =\n      typeof budgetConsumed === 'undefined'\n        ? undefined\n        : ensureSafeInteger(budgetConsumed);\n    this.globalDelta = globalDelta;\n    this.localDeltas = localDeltas;\n    this.logicSigDisassembly = logicSigDisassembly;\n    this.logicSigMessages = logicSigMessages;\n    this.logicSigTrace = logicSigTrace;\n    this.logs = logs;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return DryrunTxnResult.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['disassembly', this.disassembly],\n      ['app-call-messages', this.appCallMessages],\n      [\n        'app-call-trace',\n        typeof this.appCallTrace !== 'undefined'\n          ? this.appCallTrace.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['budget-added', this.budgetAdded],\n      ['budget-consumed', this.budgetConsumed],\n      [\n        'global-delta',\n        typeof this.globalDelta !== 'undefined'\n          ? this.globalDelta.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      [\n        'local-deltas',\n        typeof this.localDeltas !== 'undefined'\n          ? this.localDeltas.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['logic-sig-disassembly', this.logicSigDisassembly],\n      ['logic-sig-messages', this.logicSigMessages],\n      [\n        'logic-sig-trace',\n        typeof this.logicSigTrace !== 'undefined'\n          ? this.logicSigTrace.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['logs', this.logs],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): DryrunTxnResult {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded DryrunTxnResult: ${data}`);\n    }\n    return new DryrunTxnResult({\n      disassembly: data.get('disassembly'),\n      appCallMessages: data.get('app-call-messages'),\n      appCallTrace:\n        typeof data.get('app-call-trace') !== 'undefined'\n          ? data\n              .get('app-call-trace')\n              .map((v: unknown) => DryrunState.fromEncodingData(v))\n          : undefined,\n      budgetAdded: data.get('budget-added'),\n      budgetConsumed: data.get('budget-consumed'),\n      globalDelta:\n        typeof data.get('global-delta') !== 'undefined'\n          ? data\n              .get('global-delta')\n              .map((v: unknown) => EvalDeltaKeyValue.fromEncodingData(v))\n          : undefined,\n      localDeltas:\n        typeof data.get('local-deltas') !== 'undefined'\n          ? data\n              .get('local-deltas')\n              .map((v: unknown) => AccountStateDelta.fromEncodingData(v))\n          : undefined,\n      logicSigDisassembly: data.get('logic-sig-disassembly'),\n      logicSigMessages: data.get('logic-sig-messages'),\n      logicSigTrace:\n        typeof data.get('logic-sig-trace') !== 'undefined'\n          ? data\n              .get('logic-sig-trace')\n              .map((v: unknown) => DryrunState.fromEncodingData(v))\n          : undefined,\n      logs: data.get('logs'),\n    });\n  }\n}\n\n/**\n * An error response with optional data field.\n */\nexport class ErrorResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'message', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'data',\n          valueSchema: new OptionalSchema(UntypedValue.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public message: string;\n\n  public data?: UntypedValue;\n\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor({ message, data }: { message: string; data?: UntypedValue }) {\n    this.message = message;\n    this.data = data;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ErrorResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['message', this.message],\n      [\n        'data',\n        typeof this.data !== 'undefined'\n          ? this.data.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ErrorResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ErrorResponse: ${data}`);\n    }\n    return new ErrorResponse({\n      message: data.get('message'),\n      data:\n        typeof data.get('data') !== 'undefined'\n          ? UntypedValue.fromEncodingData(data.get('data'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'action', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'bytes',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'uint',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (at) delta action.\n   */\n  public action: number;\n\n  /**\n   * (bs) bytes value.\n   */\n  public bytes?: string;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint?: bigint;\n\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    action,\n    bytes,\n    uint,\n  }: {\n    action: number | bigint;\n    bytes?: string;\n    uint?: number | bigint;\n  }) {\n    this.action = ensureSafeInteger(action);\n    this.bytes = bytes;\n    this.uint = typeof uint === 'undefined' ? undefined : ensureBigInt(uint);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return EvalDelta.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['action', this.action],\n      ['bytes', this.bytes],\n      ['uint', this.uint],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): EvalDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded EvalDelta: ${data}`);\n    }\n    return new EvalDelta({\n      action: data.get('action'),\n      bytes: data.get('bytes'),\n      uint: data.get('uint'),\n    });\n  }\n}\n\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'key', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'value', valueSchema: EvalDelta.encodingSchema, omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public key: string;\n\n  /**\n   * Represents a TEAL value delta.\n   */\n  public value: EvalDelta;\n\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor({ key, value }: { key: string; value: EvalDelta }) {\n    this.key = key;\n    this.value = value;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return EvalDeltaKeyValue.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['key', this.key],\n      ['value', this.value.toEncodingData()],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): EvalDeltaKeyValue {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded EvalDeltaKeyValue: ${data}`);\n    }\n    return new EvalDeltaKeyValue({\n      key: data.get('key'),\n      value: EvalDelta.fromEncodingData(data.get('value') ?? new Map()),\n    });\n  }\n}\n\n/**\n * Response containing the timestamp offset in seconds\n */\nexport class GetBlockTimeStampOffsetResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'offset',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Timestamp offset in seconds.\n   */\n  public offset: number;\n\n  /**\n   * Creates a new `GetBlockTimeStampOffsetResponse` object.\n   * @param offset - Timestamp offset in seconds.\n   */\n  constructor({ offset }: { offset: number | bigint }) {\n    this.offset = ensureSafeInteger(offset);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return GetBlockTimeStampOffsetResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([['offset', this.offset]]);\n  }\n\n  static fromEncodingData(data: unknown): GetBlockTimeStampOffsetResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(\n        `Invalid decoded GetBlockTimeStampOffsetResponse: ${data}`\n      );\n    }\n    return new GetBlockTimeStampOffsetResponse({\n      offset: data.get('offset'),\n    });\n  }\n}\n\n/**\n * Response containing the ledger's minimum sync round\n */\nexport class GetSyncRoundResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The minimum sync round for the ledger.\n   */\n  public round: bigint;\n\n  /**\n   * Creates a new `GetSyncRoundResponse` object.\n   * @param round - The minimum sync round for the ledger.\n   */\n  constructor({ round }: { round: number | bigint }) {\n    this.round = ensureBigInt(round);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return GetSyncRoundResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([['round', this.round]]);\n  }\n\n  static fromEncodingData(data: unknown): GetSyncRoundResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded GetSyncRoundResponse: ${data}`);\n    }\n    return new GetSyncRoundResponse({\n      round: data.get('round'),\n    });\n  }\n}\n\n/**\n * A single Delta containing the key, the previous value and the current value for\n * a single round.\n */\nexport class KvDelta implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'key',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'value',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The key, base64 encoded.\n   */\n  public key?: Uint8Array;\n\n  /**\n   * The new value of the KV store entry, base64 encoded.\n   */\n  public value?: Uint8Array;\n\n  /**\n   * Creates a new `KvDelta` object.\n   * @param key - The key, base64 encoded.\n   * @param value - The new value of the KV store entry, base64 encoded.\n   */\n  constructor({\n    key,\n    value,\n  }: {\n    key?: string | Uint8Array;\n    value?: string | Uint8Array;\n  }) {\n    this.key = typeof key === 'string' ? base64ToBytes(key) : key;\n    this.value = typeof value === 'string' ? base64ToBytes(value) : value;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return KvDelta.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['key', this.key],\n      ['value', this.value],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): KvDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded KvDelta: ${data}`);\n    }\n    return new KvDelta({\n      key: data.get('key'),\n      value: data.get('value'),\n    });\n  }\n}\n\n/**\n * Contains a ledger delta for a single transaction group\n */\nexport class LedgerStateDeltaForTransactionGroup implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'Delta',\n          valueSchema: LedgerStateDelta.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'Ids',\n          valueSchema: new ArraySchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Ledger StateDelta object\n   */\n  public delta: LedgerStateDelta;\n\n  public ids: string[];\n\n  /**\n   * Creates a new `LedgerStateDeltaForTransactionGroup` object.\n   * @param delta - Ledger StateDelta object\n   * @param ids -\n   */\n  constructor({ delta, ids }: { delta: LedgerStateDelta; ids: string[] }) {\n    this.delta = delta;\n    this.ids = ids;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return LedgerStateDeltaForTransactionGroup.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Delta', this.delta.toEncodingData()],\n      ['Ids', this.ids],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): LedgerStateDeltaForTransactionGroup {\n    if (!(data instanceof Map)) {\n      throw new Error(\n        `Invalid decoded LedgerStateDeltaForTransactionGroup: ${data}`\n      );\n    }\n    return new LedgerStateDeltaForTransactionGroup({\n      delta: LedgerStateDelta.fromEncodingData(data.get('Delta') ?? new Map()),\n      ids: data.get('Ids'),\n    });\n  }\n}\n\n/**\n * Proof of membership and position of a light block header.\n */\nexport class LightBlockHeaderProof implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'index', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'proof', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        { key: 'treedepth', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The index of the light block header in the vector commitment tree\n   */\n  public index: number;\n\n  /**\n   * The encoded proof.\n   */\n  public proof: Uint8Array;\n\n  /**\n   * Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  public treedepth: number;\n\n  /**\n   * Creates a new `LightBlockHeaderProof` object.\n   * @param index - The index of the light block header in the vector commitment tree\n   * @param proof - The encoded proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  constructor({\n    index,\n    proof,\n    treedepth,\n  }: {\n    index: number | bigint;\n    proof: string | Uint8Array;\n    treedepth: number | bigint;\n  }) {\n    this.index = ensureSafeInteger(index);\n    this.proof = typeof proof === 'string' ? base64ToBytes(proof) : proof;\n    this.treedepth = ensureSafeInteger(treedepth);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return LightBlockHeaderProof.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['index', this.index],\n      ['proof', this.proof],\n      ['treedepth', this.treedepth],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): LightBlockHeaderProof {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded LightBlockHeaderProof: ${data}`);\n    }\n    return new LightBlockHeaderProof({\n      index: data.get('index'),\n      proof: data.get('proof'),\n      treedepth: data.get('treedepth'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class NodeStatusResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'catchup-time',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        { key: 'last-round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'last-version',\n          valueSchema: new StringSchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-version',\n          valueSchema: new StringSchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-version-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-version-supported',\n          valueSchema: new BooleanSchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'stopped-at-unsupported-round',\n          valueSchema: new BooleanSchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'time-since-last-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'catchpoint',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'catchpoint-acquired-blocks',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'catchpoint-processed-accounts',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'catchpoint-processed-kvs',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'catchpoint-total-accounts',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'catchpoint-total-blocks',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'catchpoint-total-kvs',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'catchpoint-verified-accounts',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'catchpoint-verified-kvs',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'last-catchpoint',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-delay',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-next-protocol-vote-before',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-no-votes',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-node-vote',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-vote-rounds',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-votes',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-votes-required',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-yes-votes',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * CatchupTime in nanoseconds\n   */\n  public catchupTime: bigint;\n\n  /**\n   * LastRound indicates the last round seen\n   */\n  public lastRound: bigint;\n\n  /**\n   * LastVersion indicates the last consensus version supported\n   */\n  public lastVersion: string;\n\n  /**\n   * NextVersion of consensus protocol to use\n   */\n  public nextVersion: string;\n\n  /**\n   * NextVersionRound is the round at which the next consensus version will apply\n   */\n  public nextVersionRound: bigint;\n\n  /**\n   * NextVersionSupported indicates whether the next consensus version is supported\n   * by this node\n   */\n  public nextVersionSupported: boolean;\n\n  /**\n   * StoppedAtUnsupportedRound indicates that the node does not support the new\n   * rounds and has stopped making progress\n   */\n  public stoppedAtUnsupportedRound: boolean;\n\n  /**\n   * TimeSinceLastRound in nanoseconds\n   */\n  public timeSinceLastRound: bigint;\n\n  /**\n   * The current catchpoint that is being caught up to\n   */\n  public catchpoint?: string;\n\n  /**\n   * The number of blocks that have already been obtained by the node as part of the\n   * catchup\n   */\n  public catchpointAcquiredBlocks?: number;\n\n  /**\n   * The number of accounts from the current catchpoint that have been processed so\n   * far as part of the catchup\n   */\n  public catchpointProcessedAccounts?: number;\n\n  /**\n   * The number of key-values (KVs) from the current catchpoint that have been\n   * processed so far as part of the catchup\n   */\n  public catchpointProcessedKvs?: number;\n\n  /**\n   * The total number of accounts included in the current catchpoint\n   */\n  public catchpointTotalAccounts?: number;\n\n  /**\n   * The total number of blocks that are required to complete the current catchpoint\n   * catchup\n   */\n  public catchpointTotalBlocks?: number;\n\n  /**\n   * The total number of key-values (KVs) included in the current catchpoint\n   */\n  public catchpointTotalKvs?: number;\n\n  /**\n   * The number of accounts from the current catchpoint that have been verified so\n   * far as part of the catchup\n   */\n  public catchpointVerifiedAccounts?: number;\n\n  /**\n   * The number of key-values (KVs) from the current catchpoint that have been\n   * verified so far as part of the catchup\n   */\n  public catchpointVerifiedKvs?: number;\n\n  /**\n   * The last catchpoint seen by the node\n   */\n  public lastCatchpoint?: string;\n\n  /**\n   * Upgrade delay\n   */\n  public upgradeDelay?: bigint;\n\n  /**\n   * Next protocol round\n   */\n  public upgradeNextProtocolVoteBefore?: bigint;\n\n  /**\n   * No votes cast for consensus upgrade\n   */\n  public upgradeNoVotes?: number;\n\n  /**\n   * This node's upgrade vote\n   */\n  public upgradeNodeVote?: boolean;\n\n  /**\n   * Total voting rounds for current upgrade\n   */\n  public upgradeVoteRounds?: number;\n\n  /**\n   * Total votes cast for consensus upgrade\n   */\n  public upgradeVotes?: number;\n\n  /**\n   * Yes votes required for consensus upgrade\n   */\n  public upgradeVotesRequired?: number;\n\n  /**\n   * Yes votes cast for consensus upgrade\n   */\n  public upgradeYesVotes?: number;\n\n  /**\n   * Creates a new `NodeStatusResponse` object.\n   * @param catchupTime - CatchupTime in nanoseconds\n   * @param lastRound - LastRound indicates the last round seen\n   * @param lastVersion - LastVersion indicates the last consensus version supported\n   * @param nextVersion - NextVersion of consensus protocol to use\n   * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\n   * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\n   * by this node\n   * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\n   * rounds and has stopped making progress\n   * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\n   * @param catchpoint - The current catchpoint that is being caught up to\n   * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\n   * catchup\n   * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\n   * far as part of the catchup\n   * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * processed so far as part of the catchup\n   * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\n   * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\n   * catchup\n   * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\n   * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\n   * far as part of the catchup\n   * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * verified so far as part of the catchup\n   * @param lastCatchpoint - The last catchpoint seen by the node\n   * @param upgradeDelay - Upgrade delay\n   * @param upgradeNextProtocolVoteBefore - Next protocol round\n   * @param upgradeNoVotes - No votes cast for consensus upgrade\n   * @param upgradeNodeVote - This node's upgrade vote\n   * @param upgradeVoteRounds - Total voting rounds for current upgrade\n   * @param upgradeVotes - Total votes cast for consensus upgrade\n   * @param upgradeVotesRequired - Yes votes required for consensus upgrade\n   * @param upgradeYesVotes - Yes votes cast for consensus upgrade\n   */\n  constructor({\n    catchupTime,\n    lastRound,\n    lastVersion,\n    nextVersion,\n    nextVersionRound,\n    nextVersionSupported,\n    stoppedAtUnsupportedRound,\n    timeSinceLastRound,\n    catchpoint,\n    catchpointAcquiredBlocks,\n    catchpointProcessedAccounts,\n    catchpointProcessedKvs,\n    catchpointTotalAccounts,\n    catchpointTotalBlocks,\n    catchpointTotalKvs,\n    catchpointVerifiedAccounts,\n    catchpointVerifiedKvs,\n    lastCatchpoint,\n    upgradeDelay,\n    upgradeNextProtocolVoteBefore,\n    upgradeNoVotes,\n    upgradeNodeVote,\n    upgradeVoteRounds,\n    upgradeVotes,\n    upgradeVotesRequired,\n    upgradeYesVotes,\n  }: {\n    catchupTime: number | bigint;\n    lastRound: number | bigint;\n    lastVersion: string;\n    nextVersion: string;\n    nextVersionRound: number | bigint;\n    nextVersionSupported: boolean;\n    stoppedAtUnsupportedRound: boolean;\n    timeSinceLastRound: number | bigint;\n    catchpoint?: string;\n    catchpointAcquiredBlocks?: number | bigint;\n    catchpointProcessedAccounts?: number | bigint;\n    catchpointProcessedKvs?: number | bigint;\n    catchpointTotalAccounts?: number | bigint;\n    catchpointTotalBlocks?: number | bigint;\n    catchpointTotalKvs?: number | bigint;\n    catchpointVerifiedAccounts?: number | bigint;\n    catchpointVerifiedKvs?: number | bigint;\n    lastCatchpoint?: string;\n    upgradeDelay?: number | bigint;\n    upgradeNextProtocolVoteBefore?: number | bigint;\n    upgradeNoVotes?: number | bigint;\n    upgradeNodeVote?: boolean;\n    upgradeVoteRounds?: number | bigint;\n    upgradeVotes?: number | bigint;\n    upgradeVotesRequired?: number | bigint;\n    upgradeYesVotes?: number | bigint;\n  }) {\n    this.catchupTime = ensureBigInt(catchupTime);\n    this.lastRound = ensureBigInt(lastRound);\n    this.lastVersion = lastVersion;\n    this.nextVersion = nextVersion;\n    this.nextVersionRound = ensureBigInt(nextVersionRound);\n    this.nextVersionSupported = nextVersionSupported;\n    this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n    this.timeSinceLastRound = ensureBigInt(timeSinceLastRound);\n    this.catchpoint = catchpoint;\n    this.catchpointAcquiredBlocks =\n      typeof catchpointAcquiredBlocks === 'undefined'\n        ? undefined\n        : ensureSafeInteger(catchpointAcquiredBlocks);\n    this.catchpointProcessedAccounts =\n      typeof catchpointProcessedAccounts === 'undefined'\n        ? undefined\n        : ensureSafeInteger(catchpointProcessedAccounts);\n    this.catchpointProcessedKvs =\n      typeof catchpointProcessedKvs === 'undefined'\n        ? undefined\n        : ensureSafeInteger(catchpointProcessedKvs);\n    this.catchpointTotalAccounts =\n      typeof catchpointTotalAccounts === 'undefined'\n        ? undefined\n        : ensureSafeInteger(catchpointTotalAccounts);\n    this.catchpointTotalBlocks =\n      typeof catchpointTotalBlocks === 'undefined'\n        ? undefined\n        : ensureSafeInteger(catchpointTotalBlocks);\n    this.catchpointTotalKvs =\n      typeof catchpointTotalKvs === 'undefined'\n        ? undefined\n        : ensureSafeInteger(catchpointTotalKvs);\n    this.catchpointVerifiedAccounts =\n      typeof catchpointVerifiedAccounts === 'undefined'\n        ? undefined\n        : ensureSafeInteger(catchpointVerifiedAccounts);\n    this.catchpointVerifiedKvs =\n      typeof catchpointVerifiedKvs === 'undefined'\n        ? undefined\n        : ensureSafeInteger(catchpointVerifiedKvs);\n    this.lastCatchpoint = lastCatchpoint;\n    this.upgradeDelay =\n      typeof upgradeDelay === 'undefined'\n        ? undefined\n        : ensureBigInt(upgradeDelay);\n    this.upgradeNextProtocolVoteBefore =\n      typeof upgradeNextProtocolVoteBefore === 'undefined'\n        ? undefined\n        : ensureBigInt(upgradeNextProtocolVoteBefore);\n    this.upgradeNoVotes =\n      typeof upgradeNoVotes === 'undefined'\n        ? undefined\n        : ensureSafeInteger(upgradeNoVotes);\n    this.upgradeNodeVote = upgradeNodeVote;\n    this.upgradeVoteRounds =\n      typeof upgradeVoteRounds === 'undefined'\n        ? undefined\n        : ensureSafeInteger(upgradeVoteRounds);\n    this.upgradeVotes =\n      typeof upgradeVotes === 'undefined'\n        ? undefined\n        : ensureSafeInteger(upgradeVotes);\n    this.upgradeVotesRequired =\n      typeof upgradeVotesRequired === 'undefined'\n        ? undefined\n        : ensureSafeInteger(upgradeVotesRequired);\n    this.upgradeYesVotes =\n      typeof upgradeYesVotes === 'undefined'\n        ? undefined\n        : ensureSafeInteger(upgradeYesVotes);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return NodeStatusResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['catchup-time', this.catchupTime],\n      ['last-round', this.lastRound],\n      ['last-version', this.lastVersion],\n      ['next-version', this.nextVersion],\n      ['next-version-round', this.nextVersionRound],\n      ['next-version-supported', this.nextVersionSupported],\n      ['stopped-at-unsupported-round', this.stoppedAtUnsupportedRound],\n      ['time-since-last-round', this.timeSinceLastRound],\n      ['catchpoint', this.catchpoint],\n      ['catchpoint-acquired-blocks', this.catchpointAcquiredBlocks],\n      ['catchpoint-processed-accounts', this.catchpointProcessedAccounts],\n      ['catchpoint-processed-kvs', this.catchpointProcessedKvs],\n      ['catchpoint-total-accounts', this.catchpointTotalAccounts],\n      ['catchpoint-total-blocks', this.catchpointTotalBlocks],\n      ['catchpoint-total-kvs', this.catchpointTotalKvs],\n      ['catchpoint-verified-accounts', this.catchpointVerifiedAccounts],\n      ['catchpoint-verified-kvs', this.catchpointVerifiedKvs],\n      ['last-catchpoint', this.lastCatchpoint],\n      ['upgrade-delay', this.upgradeDelay],\n      ['upgrade-next-protocol-vote-before', this.upgradeNextProtocolVoteBefore],\n      ['upgrade-no-votes', this.upgradeNoVotes],\n      ['upgrade-node-vote', this.upgradeNodeVote],\n      ['upgrade-vote-rounds', this.upgradeVoteRounds],\n      ['upgrade-votes', this.upgradeVotes],\n      ['upgrade-votes-required', this.upgradeVotesRequired],\n      ['upgrade-yes-votes', this.upgradeYesVotes],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): NodeStatusResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded NodeStatusResponse: ${data}`);\n    }\n    return new NodeStatusResponse({\n      catchupTime: data.get('catchup-time'),\n      lastRound: data.get('last-round'),\n      lastVersion: data.get('last-version'),\n      nextVersion: data.get('next-version'),\n      nextVersionRound: data.get('next-version-round'),\n      nextVersionSupported: data.get('next-version-supported'),\n      stoppedAtUnsupportedRound: data.get('stopped-at-unsupported-round'),\n      timeSinceLastRound: data.get('time-since-last-round'),\n      catchpoint: data.get('catchpoint'),\n      catchpointAcquiredBlocks: data.get('catchpoint-acquired-blocks'),\n      catchpointProcessedAccounts: data.get('catchpoint-processed-accounts'),\n      catchpointProcessedKvs: data.get('catchpoint-processed-kvs'),\n      catchpointTotalAccounts: data.get('catchpoint-total-accounts'),\n      catchpointTotalBlocks: data.get('catchpoint-total-blocks'),\n      catchpointTotalKvs: data.get('catchpoint-total-kvs'),\n      catchpointVerifiedAccounts: data.get('catchpoint-verified-accounts'),\n      catchpointVerifiedKvs: data.get('catchpoint-verified-kvs'),\n      lastCatchpoint: data.get('last-catchpoint'),\n      upgradeDelay: data.get('upgrade-delay'),\n      upgradeNextProtocolVoteBefore: data.get(\n        'upgrade-next-protocol-vote-before'\n      ),\n      upgradeNoVotes: data.get('upgrade-no-votes'),\n      upgradeNodeVote: data.get('upgrade-node-vote'),\n      upgradeVoteRounds: data.get('upgrade-vote-rounds'),\n      upgradeVotes: data.get('upgrade-votes'),\n      upgradeVotesRequired: data.get('upgrade-votes-required'),\n      upgradeYesVotes: data.get('upgrade-yes-votes'),\n    });\n  }\n}\n\n/**\n * Details about a pending transaction. If the transaction was recently confirmed,\n * includes confirmation details like the round and reward details.\n */\nexport class PendingTransactionResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'pool-error', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'txn',\n          valueSchema: SignedTransaction.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'application-index',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'asset-closing-amount',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'asset-index',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'close-rewards',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'closing-amount',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'confirmed-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'global-state-delta',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(EvalDeltaKeyValue.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'inner-txns',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(PendingTransactionResponse.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'local-state-delta',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(AccountStateDelta.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'logs',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(new ByteArraySchema())\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'receiver-rewards',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'sender-rewards',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Indicates that the transaction was kicked out of this node's transaction pool\n   * (and specifies why that happened). An empty string indicates the transaction\n   * wasn't kicked out of this node's txpool due to an error.\n   */\n  public poolError: string;\n\n  /**\n   * The raw signed transaction.\n   */\n  public txn: SignedTransaction;\n\n  /**\n   * The application index if the transaction was found and it created an\n   * application.\n   */\n  public applicationIndex?: bigint;\n\n  /**\n   * The number of the asset's unit that were transferred to the close-to address.\n   */\n  public assetClosingAmount?: bigint;\n\n  /**\n   * The asset index if the transaction was found and it created an asset.\n   */\n  public assetIndex?: bigint;\n\n  /**\n   * Rewards in microalgos applied to the close remainder to account.\n   */\n  public closeRewards?: bigint;\n\n  /**\n   * Closing amount for the transaction.\n   */\n  public closingAmount?: bigint;\n\n  /**\n   * The round where this transaction was confirmed, if present.\n   */\n  public confirmedRound?: bigint;\n\n  /**\n   * Global state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public globalStateDelta?: EvalDeltaKeyValue[];\n\n  /**\n   * Inner transactions produced by application execution.\n   */\n  public innerTxns?: PendingTransactionResponse[];\n\n  /**\n   * Local state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public localStateDelta?: AccountStateDelta[];\n\n  /**\n   * Logs for the application being executed by this transaction.\n   */\n  public logs?: Uint8Array[];\n\n  /**\n   * Rewards in microalgos applied to the receiver account.\n   */\n  public receiverRewards?: bigint;\n\n  /**\n   * Rewards in microalgos applied to the sender account.\n   */\n  public senderRewards?: bigint;\n\n  /**\n   * Creates a new `PendingTransactionResponse` object.\n   * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\n   * (and specifies why that happened). An empty string indicates the transaction\n   * wasn't kicked out of this node's txpool due to an error.\n   * @param txn - The raw signed transaction.\n   * @param applicationIndex - The application index if the transaction was found and it created an\n   * application.\n   * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\n   * @param assetIndex - The asset index if the transaction was found and it created an asset.\n   * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\n   * @param closingAmount - Closing amount for the transaction.\n   * @param confirmedRound - The round where this transaction was confirmed, if present.\n   * @param globalStateDelta - Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param localStateDelta - Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - Logs for the application being executed by this transaction.\n   * @param receiverRewards - Rewards in microalgos applied to the receiver account.\n   * @param senderRewards - Rewards in microalgos applied to the sender account.\n   */\n  constructor({\n    poolError,\n    txn,\n    applicationIndex,\n    assetClosingAmount,\n    assetIndex,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    globalStateDelta,\n    innerTxns,\n    localStateDelta,\n    logs,\n    receiverRewards,\n    senderRewards,\n  }: {\n    poolError: string;\n    txn: SignedTransaction;\n    applicationIndex?: number | bigint;\n    assetClosingAmount?: number | bigint;\n    assetIndex?: number | bigint;\n    closeRewards?: number | bigint;\n    closingAmount?: number | bigint;\n    confirmedRound?: number | bigint;\n    globalStateDelta?: EvalDeltaKeyValue[];\n    innerTxns?: PendingTransactionResponse[];\n    localStateDelta?: AccountStateDelta[];\n    logs?: Uint8Array[];\n    receiverRewards?: number | bigint;\n    senderRewards?: number | bigint;\n  }) {\n    this.poolError = poolError;\n    this.txn = txn;\n    this.applicationIndex =\n      typeof applicationIndex === 'undefined'\n        ? undefined\n        : ensureBigInt(applicationIndex);\n    this.assetClosingAmount =\n      typeof assetClosingAmount === 'undefined'\n        ? undefined\n        : ensureBigInt(assetClosingAmount);\n    this.assetIndex =\n      typeof assetIndex === 'undefined' ? undefined : ensureBigInt(assetIndex);\n    this.closeRewards =\n      typeof closeRewards === 'undefined'\n        ? undefined\n        : ensureBigInt(closeRewards);\n    this.closingAmount =\n      typeof closingAmount === 'undefined'\n        ? undefined\n        : ensureBigInt(closingAmount);\n    this.confirmedRound =\n      typeof confirmedRound === 'undefined'\n        ? undefined\n        : ensureBigInt(confirmedRound);\n    this.globalStateDelta = globalStateDelta;\n    this.innerTxns = innerTxns;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.receiverRewards =\n      typeof receiverRewards === 'undefined'\n        ? undefined\n        : ensureBigInt(receiverRewards);\n    this.senderRewards =\n      typeof senderRewards === 'undefined'\n        ? undefined\n        : ensureBigInt(senderRewards);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return PendingTransactionResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['pool-error', this.poolError],\n      ['txn', this.txn.toEncodingData()],\n      ['application-index', this.applicationIndex],\n      ['asset-closing-amount', this.assetClosingAmount],\n      ['asset-index', this.assetIndex],\n      ['close-rewards', this.closeRewards],\n      ['closing-amount', this.closingAmount],\n      ['confirmed-round', this.confirmedRound],\n      [\n        'global-state-delta',\n        typeof this.globalStateDelta !== 'undefined'\n          ? this.globalStateDelta.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      [\n        'inner-txns',\n        typeof this.innerTxns !== 'undefined'\n          ? this.innerTxns.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      [\n        'local-state-delta',\n        typeof this.localStateDelta !== 'undefined'\n          ? this.localStateDelta.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['logs', this.logs],\n      ['receiver-rewards', this.receiverRewards],\n      ['sender-rewards', this.senderRewards],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): PendingTransactionResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded PendingTransactionResponse: ${data}`);\n    }\n    return new PendingTransactionResponse({\n      poolError: data.get('pool-error'),\n      txn: SignedTransaction.fromEncodingData(data.get('txn') ?? new Map()),\n      applicationIndex: data.get('application-index'),\n      assetClosingAmount: data.get('asset-closing-amount'),\n      assetIndex: data.get('asset-index'),\n      closeRewards: data.get('close-rewards'),\n      closingAmount: data.get('closing-amount'),\n      confirmedRound: data.get('confirmed-round'),\n      globalStateDelta:\n        typeof data.get('global-state-delta') !== 'undefined'\n          ? data\n              .get('global-state-delta')\n              .map((v: unknown) => EvalDeltaKeyValue.fromEncodingData(v))\n          : undefined,\n      innerTxns:\n        typeof data.get('inner-txns') !== 'undefined'\n          ? data\n              .get('inner-txns')\n              .map((v: unknown) =>\n                PendingTransactionResponse.fromEncodingData(v)\n              )\n          : undefined,\n      localStateDelta:\n        typeof data.get('local-state-delta') !== 'undefined'\n          ? data\n              .get('local-state-delta')\n              .map((v: unknown) => AccountStateDelta.fromEncodingData(v))\n          : undefined,\n      logs: data.get('logs'),\n      receiverRewards: data.get('receiver-rewards'),\n      senderRewards: data.get('sender-rewards'),\n    });\n  }\n}\n\n/**\n * A potentially truncated list of transactions currently in the node's transaction\n * pool. You can compute whether or not the list is truncated if the number of\n * elements in the **top-transactions** array is fewer than **total-transactions**.\n */\nexport class PendingTransactionsResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'top-transactions',\n          valueSchema: new ArraySchema(SignedTransaction.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-transactions',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * An array of signed transaction objects.\n   */\n  public topTransactions: SignedTransaction[];\n\n  /**\n   * Total number of transactions in the pool.\n   */\n  public totalTransactions: number;\n\n  /**\n   * Creates a new `PendingTransactionsResponse` object.\n   * @param topTransactions - An array of signed transaction objects.\n   * @param totalTransactions - Total number of transactions in the pool.\n   */\n  constructor({\n    topTransactions,\n    totalTransactions,\n  }: {\n    topTransactions: SignedTransaction[];\n    totalTransactions: number | bigint;\n  }) {\n    this.topTransactions = topTransactions;\n    this.totalTransactions = ensureSafeInteger(totalTransactions);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return PendingTransactionsResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['top-transactions', this.topTransactions.map((v) => v.toEncodingData())],\n      ['total-transactions', this.totalTransactions],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): PendingTransactionsResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded PendingTransactionsResponse: ${data}`);\n    }\n    return new PendingTransactionsResponse({\n      topTransactions: (data.get('top-transactions') ?? []).map((v: unknown) =>\n        SignedTransaction.fromEncodingData(v)\n      ),\n      totalTransactions: data.get('total-transactions'),\n    });\n  }\n}\n\n/**\n * Transaction ID of the submission.\n */\nexport class PostTransactionsResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'txId',\n        valueSchema: new StringSchema(),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * encoding of the transaction hash.\n   */\n  public txid: string;\n\n  /**\n   * Creates a new `PostTransactionsResponse` object.\n   * @param txid - encoding of the transaction hash.\n   */\n  constructor({ txid }: { txid: string }) {\n    this.txid = txid;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return PostTransactionsResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([['txId', this.txid]]);\n  }\n\n  static fromEncodingData(data: unknown): PostTransactionsResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded PostTransactionsResponse: ${data}`);\n    }\n    return new PostTransactionsResponse({\n      txid: data.get('txId'),\n    });\n  }\n}\n\n/**\n * A write operation into a scratch slot.\n */\nexport class ScratchChange implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'new-value',\n          valueSchema: AvmValue.encodingSchema,\n          omitEmpty: true,\n        },\n        { key: 'slot', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Represents an AVM value.\n   */\n  public newValue: AvmValue;\n\n  /**\n   * The scratch slot written.\n   */\n  public slot: number;\n\n  /**\n   * Creates a new `ScratchChange` object.\n   * @param newValue - Represents an AVM value.\n   * @param slot - The scratch slot written.\n   */\n  constructor({\n    newValue,\n    slot,\n  }: {\n    newValue: AvmValue;\n    slot: number | bigint;\n  }) {\n    this.newValue = newValue;\n    this.slot = ensureSafeInteger(slot);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ScratchChange.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['new-value', this.newValue.toEncodingData()],\n      ['slot', this.slot],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ScratchChange {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ScratchChange: ${data}`);\n    }\n    return new ScratchChange({\n      newValue: AvmValue.fromEncodingData(data.get('new-value') ?? new Map()),\n      slot: data.get('slot'),\n    });\n  }\n}\n\n/**\n * Initial states of resources that were accessed during simulation.\n */\nexport class SimulateInitialStates implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'app-initial-states',\n        valueSchema: new OptionalSchema(\n          new ArraySchema(ApplicationInitialStates.encodingSchema)\n        ),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The initial states of accessed application before simulation. The order of this\n   * array is arbitrary.\n   */\n  public appInitialStates?: ApplicationInitialStates[];\n\n  /**\n   * Creates a new `SimulateInitialStates` object.\n   * @param appInitialStates - The initial states of accessed application before simulation. The order of this\n   * array is arbitrary.\n   */\n  constructor({\n    appInitialStates,\n  }: {\n    appInitialStates?: ApplicationInitialStates[];\n  }) {\n    this.appInitialStates = appInitialStates;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulateInitialStates.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'app-initial-states',\n        typeof this.appInitialStates !== 'undefined'\n          ? this.appInitialStates.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulateInitialStates {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateInitialStates: ${data}`);\n    }\n    return new SimulateInitialStates({\n      appInitialStates:\n        typeof data.get('app-initial-states') !== 'undefined'\n          ? data\n              .get('app-initial-states')\n              .map((v: unknown) => ApplicationInitialStates.fromEncodingData(v))\n          : undefined,\n    });\n  }\n}\n\n/**\n * Request type for simulation endpoint.\n */\nexport class SimulateRequest implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'txn-groups',\n          valueSchema: new ArraySchema(\n            SimulateRequestTransactionGroup.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'allow-empty-signatures',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'allow-more-logging',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'allow-unnamed-resources',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'exec-trace-config',\n          valueSchema: new OptionalSchema(SimulateTraceConfig.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'extra-opcode-budget',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'fix-signers',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The transaction groups to simulate.\n   */\n  public txnGroups: SimulateRequestTransactionGroup[];\n\n  /**\n   * Allows transactions without signatures to be simulated as if they had correct\n   * signatures.\n   */\n  public allowEmptySignatures?: boolean;\n\n  /**\n   * Lifts limits on log opcode usage during simulation.\n   */\n  public allowMoreLogging?: boolean;\n\n  /**\n   * Allows access to unnamed resources during simulation.\n   */\n  public allowUnnamedResources?: boolean;\n\n  /**\n   * An object that configures simulation execution trace.\n   */\n  public execTraceConfig?: SimulateTraceConfig;\n\n  /**\n   * Applies extra opcode budget during simulation for each transaction group.\n   */\n  public extraOpcodeBudget?: number;\n\n  /**\n   * If true, signers for transactions that are missing signatures will be fixed\n   * during evaluation.\n   */\n  public fixSigners?: boolean;\n\n  /**\n   * If provided, specifies the round preceding the simulation. State changes through\n   * this round will be used to run this simulation. Usually only the 4 most recent\n   * rounds will be available (controlled by the node config value MaxAcctLookback).\n   * If not specified, defaults to the latest available round.\n   */\n  public round?: bigint;\n\n  /**\n   * Creates a new `SimulateRequest` object.\n   * @param txnGroups - The transaction groups to simulate.\n   * @param allowEmptySignatures - Allows transactions without signatures to be simulated as if they had correct\n   * signatures.\n   * @param allowMoreLogging - Lifts limits on log opcode usage during simulation.\n   * @param allowUnnamedResources - Allows access to unnamed resources during simulation.\n   * @param execTraceConfig - An object that configures simulation execution trace.\n   * @param extraOpcodeBudget - Applies extra opcode budget during simulation for each transaction group.\n   * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed\n   * during evaluation.\n   * @param round - If provided, specifies the round preceding the simulation. State changes through\n   * this round will be used to run this simulation. Usually only the 4 most recent\n   * rounds will be available (controlled by the node config value MaxAcctLookback).\n   * If not specified, defaults to the latest available round.\n   */\n  constructor({\n    txnGroups,\n    allowEmptySignatures,\n    allowMoreLogging,\n    allowUnnamedResources,\n    execTraceConfig,\n    extraOpcodeBudget,\n    fixSigners,\n    round,\n  }: {\n    txnGroups: SimulateRequestTransactionGroup[];\n    allowEmptySignatures?: boolean;\n    allowMoreLogging?: boolean;\n    allowUnnamedResources?: boolean;\n    execTraceConfig?: SimulateTraceConfig;\n    extraOpcodeBudget?: number | bigint;\n    fixSigners?: boolean;\n    round?: number | bigint;\n  }) {\n    this.txnGroups = txnGroups;\n    this.allowEmptySignatures = allowEmptySignatures;\n    this.allowMoreLogging = allowMoreLogging;\n    this.allowUnnamedResources = allowUnnamedResources;\n    this.execTraceConfig = execTraceConfig;\n    this.extraOpcodeBudget =\n      typeof extraOpcodeBudget === 'undefined'\n        ? undefined\n        : ensureSafeInteger(extraOpcodeBudget);\n    this.fixSigners = fixSigners;\n    this.round = typeof round === 'undefined' ? undefined : ensureBigInt(round);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulateRequest.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['txn-groups', this.txnGroups.map((v) => v.toEncodingData())],\n      ['allow-empty-signatures', this.allowEmptySignatures],\n      ['allow-more-logging', this.allowMoreLogging],\n      ['allow-unnamed-resources', this.allowUnnamedResources],\n      [\n        'exec-trace-config',\n        typeof this.execTraceConfig !== 'undefined'\n          ? this.execTraceConfig.toEncodingData()\n          : undefined,\n      ],\n      ['extra-opcode-budget', this.extraOpcodeBudget],\n      ['fix-signers', this.fixSigners],\n      ['round', this.round],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulateRequest {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateRequest: ${data}`);\n    }\n    return new SimulateRequest({\n      txnGroups: (data.get('txn-groups') ?? []).map((v: unknown) =>\n        SimulateRequestTransactionGroup.fromEncodingData(v)\n      ),\n      allowEmptySignatures: data.get('allow-empty-signatures'),\n      allowMoreLogging: data.get('allow-more-logging'),\n      allowUnnamedResources: data.get('allow-unnamed-resources'),\n      execTraceConfig:\n        typeof data.get('exec-trace-config') !== 'undefined'\n          ? SimulateTraceConfig.fromEncodingData(data.get('exec-trace-config'))\n          : undefined,\n      extraOpcodeBudget: data.get('extra-opcode-budget'),\n      fixSigners: data.get('fix-signers'),\n      round: data.get('round'),\n    });\n  }\n}\n\n/**\n * A transaction group to simulate.\n */\nexport class SimulateRequestTransactionGroup implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'txns',\n        valueSchema: new ArraySchema(SignedTransaction.encodingSchema),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * An atomic transaction group.\n   */\n  public txns: SignedTransaction[];\n\n  /**\n   * Creates a new `SimulateRequestTransactionGroup` object.\n   * @param txns - An atomic transaction group.\n   */\n  constructor({ txns }: { txns: SignedTransaction[] }) {\n    this.txns = txns;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulateRequestTransactionGroup.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['txns', this.txns.map((v) => v.toEncodingData())],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulateRequestTransactionGroup {\n    if (!(data instanceof Map)) {\n      throw new Error(\n        `Invalid decoded SimulateRequestTransactionGroup: ${data}`\n      );\n    }\n    return new SimulateRequestTransactionGroup({\n      txns: (data.get('txns') ?? []).map((v: unknown) =>\n        SignedTransaction.fromEncodingData(v)\n      ),\n    });\n  }\n}\n\n/**\n * Result of a transaction group simulation.\n */\nexport class SimulateResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'last-round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'txn-groups',\n          valueSchema: new ArraySchema(\n            SimulateTransactionGroupResult.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        { key: 'version', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'eval-overrides',\n          valueSchema: new OptionalSchema(\n            SimulationEvalOverrides.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'exec-trace-config',\n          valueSchema: new OptionalSchema(SimulateTraceConfig.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'initial-states',\n          valueSchema: new OptionalSchema(SimulateInitialStates.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The round immediately preceding this simulation. State changes through this\n   * round were used to run this simulation.\n   */\n  public lastRound: bigint;\n\n  /**\n   * A result object for each transaction group that was simulated.\n   */\n  public txnGroups: SimulateTransactionGroupResult[];\n\n  /**\n   * The version of this response object.\n   */\n  public version: number;\n\n  /**\n   * The set of parameters and limits override during simulation. If this set of\n   * parameters is present, then evaluation parameters may differ from standard\n   * evaluation in certain ways.\n   */\n  public evalOverrides?: SimulationEvalOverrides;\n\n  /**\n   * An object that configures simulation execution trace.\n   */\n  public execTraceConfig?: SimulateTraceConfig;\n\n  /**\n   * Initial states of resources that were accessed during simulation.\n   */\n  public initialStates?: SimulateInitialStates;\n\n  /**\n   * Creates a new `SimulateResponse` object.\n   * @param lastRound - The round immediately preceding this simulation. State changes through this\n   * round were used to run this simulation.\n   * @param txnGroups - A result object for each transaction group that was simulated.\n   * @param version - The version of this response object.\n   * @param evalOverrides - The set of parameters and limits override during simulation. If this set of\n   * parameters is present, then evaluation parameters may differ from standard\n   * evaluation in certain ways.\n   * @param execTraceConfig - An object that configures simulation execution trace.\n   * @param initialStates - Initial states of resources that were accessed during simulation.\n   */\n  constructor({\n    lastRound,\n    txnGroups,\n    version,\n    evalOverrides,\n    execTraceConfig,\n    initialStates,\n  }: {\n    lastRound: number | bigint;\n    txnGroups: SimulateTransactionGroupResult[];\n    version: number | bigint;\n    evalOverrides?: SimulationEvalOverrides;\n    execTraceConfig?: SimulateTraceConfig;\n    initialStates?: SimulateInitialStates;\n  }) {\n    this.lastRound = ensureBigInt(lastRound);\n    this.txnGroups = txnGroups;\n    this.version = ensureSafeInteger(version);\n    this.evalOverrides = evalOverrides;\n    this.execTraceConfig = execTraceConfig;\n    this.initialStates = initialStates;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulateResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['last-round', this.lastRound],\n      ['txn-groups', this.txnGroups.map((v) => v.toEncodingData())],\n      ['version', this.version],\n      [\n        'eval-overrides',\n        typeof this.evalOverrides !== 'undefined'\n          ? this.evalOverrides.toEncodingData()\n          : undefined,\n      ],\n      [\n        'exec-trace-config',\n        typeof this.execTraceConfig !== 'undefined'\n          ? this.execTraceConfig.toEncodingData()\n          : undefined,\n      ],\n      [\n        'initial-states',\n        typeof this.initialStates !== 'undefined'\n          ? this.initialStates.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulateResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateResponse: ${data}`);\n    }\n    return new SimulateResponse({\n      lastRound: data.get('last-round'),\n      txnGroups: (data.get('txn-groups') ?? []).map((v: unknown) =>\n        SimulateTransactionGroupResult.fromEncodingData(v)\n      ),\n      version: data.get('version'),\n      evalOverrides:\n        typeof data.get('eval-overrides') !== 'undefined'\n          ? SimulationEvalOverrides.fromEncodingData(data.get('eval-overrides'))\n          : undefined,\n      execTraceConfig:\n        typeof data.get('exec-trace-config') !== 'undefined'\n          ? SimulateTraceConfig.fromEncodingData(data.get('exec-trace-config'))\n          : undefined,\n      initialStates:\n        typeof data.get('initial-states') !== 'undefined'\n          ? SimulateInitialStates.fromEncodingData(data.get('initial-states'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * An object that configures simulation execution trace.\n */\nexport class SimulateTraceConfig implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'enable',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'scratch-change',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'stack-change',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'state-change',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * A boolean option for opting in execution trace features simulation endpoint.\n   */\n  public enable?: boolean;\n\n  /**\n   * A boolean option enabling returning scratch slot changes together with execution\n   * trace during simulation.\n   */\n  public scratchChange?: boolean;\n\n  /**\n   * A boolean option enabling returning stack changes together with execution trace\n   * during simulation.\n   */\n  public stackChange?: boolean;\n\n  /**\n   * A boolean option enabling returning application state changes (global, local,\n   * and box changes) with the execution trace during simulation.\n   */\n  public stateChange?: boolean;\n\n  /**\n   * Creates a new `SimulateTraceConfig` object.\n   * @param enable - A boolean option for opting in execution trace features simulation endpoint.\n   * @param scratchChange - A boolean option enabling returning scratch slot changes together with execution\n   * trace during simulation.\n   * @param stackChange - A boolean option enabling returning stack changes together with execution trace\n   * during simulation.\n   * @param stateChange - A boolean option enabling returning application state changes (global, local,\n   * and box changes) with the execution trace during simulation.\n   */\n  constructor({\n    enable,\n    scratchChange,\n    stackChange,\n    stateChange,\n  }: {\n    enable?: boolean;\n    scratchChange?: boolean;\n    stackChange?: boolean;\n    stateChange?: boolean;\n  }) {\n    this.enable = enable;\n    this.scratchChange = scratchChange;\n    this.stackChange = stackChange;\n    this.stateChange = stateChange;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulateTraceConfig.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['enable', this.enable],\n      ['scratch-change', this.scratchChange],\n      ['stack-change', this.stackChange],\n      ['state-change', this.stateChange],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulateTraceConfig {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateTraceConfig: ${data}`);\n    }\n    return new SimulateTraceConfig({\n      enable: data.get('enable'),\n      scratchChange: data.get('scratch-change'),\n      stackChange: data.get('stack-change'),\n      stateChange: data.get('state-change'),\n    });\n  }\n}\n\n/**\n * Simulation result for an atomic transaction group\n */\nexport class SimulateTransactionGroupResult implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'txn-results',\n          valueSchema: new ArraySchema(\n            SimulateTransactionResult.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'app-budget-added',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'app-budget-consumed',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'failed-at',\n          valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'failure-message',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'unnamed-resources-accessed',\n          valueSchema: new OptionalSchema(\n            SimulateUnnamedResourcesAccessed.encodingSchema\n          ),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Simulation result for individual transactions\n   */\n  public txnResults: SimulateTransactionResult[];\n\n  /**\n   * Total budget added during execution of app calls in the transaction group.\n   */\n  public appBudgetAdded?: number;\n\n  /**\n   * Total budget consumed during execution of app calls in the transaction group.\n   */\n  public appBudgetConsumed?: number;\n\n  /**\n   * If present, indicates which transaction in this group caused the failure. This\n   * array represents the path to the failing transaction. Indexes are zero based,\n   * the first element indicates the top-level transaction, and successive elements\n   * indicate deeper inner transactions.\n   */\n  public failedAt?: number[];\n\n  /**\n   * If present, indicates that the transaction group failed and specifies why that\n   * happened\n   */\n  public failureMessage?: string;\n\n  /**\n   * These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  public unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\n\n  /**\n   * Creates a new `SimulateTransactionGroupResult` object.\n   * @param txnResults - Simulation result for individual transactions\n   * @param appBudgetAdded - Total budget added during execution of app calls in the transaction group.\n   * @param appBudgetConsumed - Total budget consumed during execution of app calls in the transaction group.\n   * @param failedAt - If present, indicates which transaction in this group caused the failure. This\n   * array represents the path to the failing transaction. Indexes are zero based,\n   * the first element indicates the top-level transaction, and successive elements\n   * indicate deeper inner transactions.\n   * @param failureMessage - If present, indicates that the transaction group failed and specifies why that\n   * happened\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  constructor({\n    txnResults,\n    appBudgetAdded,\n    appBudgetConsumed,\n    failedAt,\n    failureMessage,\n    unnamedResourcesAccessed,\n  }: {\n    txnResults: SimulateTransactionResult[];\n    appBudgetAdded?: number | bigint;\n    appBudgetConsumed?: number | bigint;\n    failedAt?: (number | bigint)[];\n    failureMessage?: string;\n    unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\n  }) {\n    this.txnResults = txnResults;\n    this.appBudgetAdded =\n      typeof appBudgetAdded === 'undefined'\n        ? undefined\n        : ensureSafeInteger(appBudgetAdded);\n    this.appBudgetConsumed =\n      typeof appBudgetConsumed === 'undefined'\n        ? undefined\n        : ensureSafeInteger(appBudgetConsumed);\n    this.failedAt =\n      typeof failedAt === 'undefined'\n        ? undefined\n        : failedAt.map(ensureSafeInteger);\n    this.failureMessage = failureMessage;\n    this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulateTransactionGroupResult.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['txn-results', this.txnResults.map((v) => v.toEncodingData())],\n      ['app-budget-added', this.appBudgetAdded],\n      ['app-budget-consumed', this.appBudgetConsumed],\n      ['failed-at', this.failedAt],\n      ['failure-message', this.failureMessage],\n      [\n        'unnamed-resources-accessed',\n        typeof this.unnamedResourcesAccessed !== 'undefined'\n          ? this.unnamedResourcesAccessed.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulateTransactionGroupResult {\n    if (!(data instanceof Map)) {\n      throw new Error(\n        `Invalid decoded SimulateTransactionGroupResult: ${data}`\n      );\n    }\n    return new SimulateTransactionGroupResult({\n      txnResults: (data.get('txn-results') ?? []).map((v: unknown) =>\n        SimulateTransactionResult.fromEncodingData(v)\n      ),\n      appBudgetAdded: data.get('app-budget-added'),\n      appBudgetConsumed: data.get('app-budget-consumed'),\n      failedAt: data.get('failed-at'),\n      failureMessage: data.get('failure-message'),\n      unnamedResourcesAccessed:\n        typeof data.get('unnamed-resources-accessed') !== 'undefined'\n          ? SimulateUnnamedResourcesAccessed.fromEncodingData(\n              data.get('unnamed-resources-accessed')\n            )\n          : undefined,\n    });\n  }\n}\n\n/**\n * Simulation result for an individual transaction\n */\nexport class SimulateTransactionResult implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'txn-result',\n          valueSchema: PendingTransactionResponse.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'app-budget-consumed',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'exec-trace',\n          valueSchema: new OptionalSchema(\n            SimulationTransactionExecTrace.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'fixed-signer',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'logic-sig-budget-consumed',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'unnamed-resources-accessed',\n          valueSchema: new OptionalSchema(\n            SimulateUnnamedResourcesAccessed.encodingSchema\n          ),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Details about a pending transaction. If the transaction was recently confirmed,\n   * includes confirmation details like the round and reward details.\n   */\n  public txnResult: PendingTransactionResponse;\n\n  /**\n   * Budget used during execution of an app call transaction. This value includes\n   * budged used by inner app calls spawned by this transaction.\n   */\n  public appBudgetConsumed?: number;\n\n  /**\n   * The execution trace of calling an app or a logic sig, containing the inner app\n   * call trace in a recursive way.\n   */\n  public execTrace?: SimulationTransactionExecTrace;\n\n  /**\n   * The account that needed to sign this transaction when no signature was provided\n   * and the provided signer was incorrect.\n   */\n  public fixedSigner?: Address;\n\n  /**\n   * Budget used during execution of a logic sig transaction.\n   */\n  public logicSigBudgetConsumed?: number;\n\n  /**\n   * These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  public unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\n\n  /**\n   * Creates a new `SimulateTransactionResult` object.\n   * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,\n   * includes confirmation details like the round and reward details.\n   * @param appBudgetConsumed - Budget used during execution of an app call transaction. This value includes\n   * budged used by inner app calls spawned by this transaction.\n   * @param execTrace - The execution trace of calling an app or a logic sig, containing the inner app\n   * call trace in a recursive way.\n   * @param fixedSigner - The account that needed to sign this transaction when no signature was provided\n   * and the provided signer was incorrect.\n   * @param logicSigBudgetConsumed - Budget used during execution of a logic sig transaction.\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n   * caused failure, but were allowed in simulation. Depending on where this object\n   * is in the response, the unnamed resources it contains may or may not qualify for\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\n   * they do not qualify. In order to make this group valid for actual submission,\n   * resources that qualify for group sharing can be made available by any\n   * transaction of the group; otherwise, resources must be placed in the same\n   * transaction which accessed them.\n   */\n  constructor({\n    txnResult,\n    appBudgetConsumed,\n    execTrace,\n    fixedSigner,\n    logicSigBudgetConsumed,\n    unnamedResourcesAccessed,\n  }: {\n    txnResult: PendingTransactionResponse;\n    appBudgetConsumed?: number | bigint;\n    execTrace?: SimulationTransactionExecTrace;\n    fixedSigner?: Address | string;\n    logicSigBudgetConsumed?: number | bigint;\n    unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\n  }) {\n    this.txnResult = txnResult;\n    this.appBudgetConsumed =\n      typeof appBudgetConsumed === 'undefined'\n        ? undefined\n        : ensureSafeInteger(appBudgetConsumed);\n    this.execTrace = execTrace;\n    this.fixedSigner =\n      typeof fixedSigner === 'string'\n        ? Address.fromString(fixedSigner)\n        : fixedSigner;\n    this.logicSigBudgetConsumed =\n      typeof logicSigBudgetConsumed === 'undefined'\n        ? undefined\n        : ensureSafeInteger(logicSigBudgetConsumed);\n    this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulateTransactionResult.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['txn-result', this.txnResult.toEncodingData()],\n      ['app-budget-consumed', this.appBudgetConsumed],\n      [\n        'exec-trace',\n        typeof this.execTrace !== 'undefined'\n          ? this.execTrace.toEncodingData()\n          : undefined,\n      ],\n      [\n        'fixed-signer',\n        typeof this.fixedSigner !== 'undefined'\n          ? this.fixedSigner.toString()\n          : undefined,\n      ],\n      ['logic-sig-budget-consumed', this.logicSigBudgetConsumed],\n      [\n        'unnamed-resources-accessed',\n        typeof this.unnamedResourcesAccessed !== 'undefined'\n          ? this.unnamedResourcesAccessed.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulateTransactionResult {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulateTransactionResult: ${data}`);\n    }\n    return new SimulateTransactionResult({\n      txnResult: PendingTransactionResponse.fromEncodingData(\n        data.get('txn-result') ?? new Map()\n      ),\n      appBudgetConsumed: data.get('app-budget-consumed'),\n      execTrace:\n        typeof data.get('exec-trace') !== 'undefined'\n          ? SimulationTransactionExecTrace.fromEncodingData(\n              data.get('exec-trace')\n            )\n          : undefined,\n      fixedSigner: data.get('fixed-signer'),\n      logicSigBudgetConsumed: data.get('logic-sig-budget-consumed'),\n      unnamedResourcesAccessed:\n        typeof data.get('unnamed-resources-accessed') !== 'undefined'\n          ? SimulateUnnamedResourcesAccessed.fromEncodingData(\n              data.get('unnamed-resources-accessed')\n            )\n          : undefined,\n    });\n  }\n}\n\n/**\n * These are resources that were accessed by this group that would normally have\n * caused failure, but were allowed in simulation. Depending on where this object\n * is in the response, the unnamed resources it contains may or may not qualify for\n * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n * the resources do qualify, but if this is a field in SimulateTransactionResult,\n * they do not qualify. In order to make this group valid for actual submission,\n * resources that qualify for group sharing can be made available by any\n * transaction of the group; otherwise, resources must be placed in the same\n * transaction which accessed them.\n */\nexport class SimulateUnnamedResourcesAccessed implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'accounts',\n          valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'app-locals',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(ApplicationLocalReference.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'apps',\n          valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'asset-holdings',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(AssetHoldingReference.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'assets',\n          valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'boxes',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(BoxReference.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'extra-box-refs',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The unnamed accounts that were referenced. The order of this array is arbitrary.\n   */\n  public accounts?: Address[];\n\n  /**\n   * The unnamed application local states that were referenced. The order of this\n   * array is arbitrary.\n   */\n  public appLocals?: ApplicationLocalReference[];\n\n  /**\n   * The unnamed applications that were referenced. The order of this array is\n   * arbitrary.\n   */\n  public apps?: bigint[];\n\n  /**\n   * The unnamed asset holdings that were referenced. The order of this array is\n   * arbitrary.\n   */\n  public assetHoldings?: AssetHoldingReference[];\n\n  /**\n   * The unnamed assets that were referenced. The order of this array is arbitrary.\n   */\n  public assets?: bigint[];\n\n  /**\n   * The unnamed boxes that were referenced. The order of this array is arbitrary.\n   */\n  public boxes?: BoxReference[];\n\n  /**\n   * The number of extra box references used to increase the IO budget. This is in\n   * addition to the references defined in the input transaction group and any\n   * referenced to unnamed boxes.\n   */\n  public extraBoxRefs?: number;\n\n  /**\n   * Creates a new `SimulateUnnamedResourcesAccessed` object.\n   * @param accounts - The unnamed accounts that were referenced. The order of this array is arbitrary.\n   * @param appLocals - The unnamed application local states that were referenced. The order of this\n   * array is arbitrary.\n   * @param apps - The unnamed applications that were referenced. The order of this array is\n   * arbitrary.\n   * @param assetHoldings - The unnamed asset holdings that were referenced. The order of this array is\n   * arbitrary.\n   * @param assets - The unnamed assets that were referenced. The order of this array is arbitrary.\n   * @param boxes - The unnamed boxes that were referenced. The order of this array is arbitrary.\n   * @param extraBoxRefs - The number of extra box references used to increase the IO budget. This is in\n   * addition to the references defined in the input transaction group and any\n   * referenced to unnamed boxes.\n   */\n  constructor({\n    accounts,\n    appLocals,\n    apps,\n    assetHoldings,\n    assets,\n    boxes,\n    extraBoxRefs,\n  }: {\n    accounts?: (Address | string)[];\n    appLocals?: ApplicationLocalReference[];\n    apps?: (number | bigint)[];\n    assetHoldings?: AssetHoldingReference[];\n    assets?: (number | bigint)[];\n    boxes?: BoxReference[];\n    extraBoxRefs?: number | bigint;\n  }) {\n    this.accounts =\n      typeof accounts !== 'undefined'\n        ? accounts.map((addr) =>\n            typeof addr === 'string' ? Address.fromString(addr) : addr\n          )\n        : undefined;\n    this.appLocals = appLocals;\n    this.apps =\n      typeof apps === 'undefined' ? undefined : apps.map(ensureBigInt);\n    this.assetHoldings = assetHoldings;\n    this.assets =\n      typeof assets === 'undefined' ? undefined : assets.map(ensureBigInt);\n    this.boxes = boxes;\n    this.extraBoxRefs =\n      typeof extraBoxRefs === 'undefined'\n        ? undefined\n        : ensureSafeInteger(extraBoxRefs);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulateUnnamedResourcesAccessed.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'accounts',\n        typeof this.accounts !== 'undefined'\n          ? this.accounts.map((v) => v.toString())\n          : undefined,\n      ],\n      [\n        'app-locals',\n        typeof this.appLocals !== 'undefined'\n          ? this.appLocals.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['apps', this.apps],\n      [\n        'asset-holdings',\n        typeof this.assetHoldings !== 'undefined'\n          ? this.assetHoldings.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['assets', this.assets],\n      [\n        'boxes',\n        typeof this.boxes !== 'undefined'\n          ? this.boxes.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['extra-box-refs', this.extraBoxRefs],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulateUnnamedResourcesAccessed {\n    if (!(data instanceof Map)) {\n      throw new Error(\n        `Invalid decoded SimulateUnnamedResourcesAccessed: ${data}`\n      );\n    }\n    return new SimulateUnnamedResourcesAccessed({\n      accounts: data.get('accounts'),\n      appLocals:\n        typeof data.get('app-locals') !== 'undefined'\n          ? data\n              .get('app-locals')\n              .map((v: unknown) =>\n                ApplicationLocalReference.fromEncodingData(v)\n              )\n          : undefined,\n      apps: data.get('apps'),\n      assetHoldings:\n        typeof data.get('asset-holdings') !== 'undefined'\n          ? data\n              .get('asset-holdings')\n              .map((v: unknown) => AssetHoldingReference.fromEncodingData(v))\n          : undefined,\n      assets: data.get('assets'),\n      boxes:\n        typeof data.get('boxes') !== 'undefined'\n          ? data\n              .get('boxes')\n              .map((v: unknown) => BoxReference.fromEncodingData(v))\n          : undefined,\n      extraBoxRefs: data.get('extra-box-refs'),\n    });\n  }\n}\n\n/**\n * The set of parameters and limits override during simulation. If this set of\n * parameters is present, then evaluation parameters may differ from standard\n * evaluation in certain ways.\n */\nexport class SimulationEvalOverrides implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'allow-empty-signatures',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'allow-unnamed-resources',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'extra-opcode-budget',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'fix-signers',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'max-log-calls',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'max-log-size',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * If true, transactions without signatures are allowed and simulated as if they\n   * were properly signed.\n   */\n  public allowEmptySignatures?: boolean;\n\n  /**\n   * If true, allows access to unnamed resources during simulation.\n   */\n  public allowUnnamedResources?: boolean;\n\n  /**\n   * The extra opcode budget added to each transaction group during simulation\n   */\n  public extraOpcodeBudget?: number;\n\n  /**\n   * If true, signers for transactions that are missing signatures will be fixed\n   * during evaluation.\n   */\n  public fixSigners?: boolean;\n\n  /**\n   * The maximum log calls one can make during simulation\n   */\n  public maxLogCalls?: number;\n\n  /**\n   * The maximum byte number to log during simulation\n   */\n  public maxLogSize?: number;\n\n  /**\n   * Creates a new `SimulationEvalOverrides` object.\n   * @param allowEmptySignatures - If true, transactions without signatures are allowed and simulated as if they\n   * were properly signed.\n   * @param allowUnnamedResources - If true, allows access to unnamed resources during simulation.\n   * @param extraOpcodeBudget - The extra opcode budget added to each transaction group during simulation\n   * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed\n   * during evaluation.\n   * @param maxLogCalls - The maximum log calls one can make during simulation\n   * @param maxLogSize - The maximum byte number to log during simulation\n   */\n  constructor({\n    allowEmptySignatures,\n    allowUnnamedResources,\n    extraOpcodeBudget,\n    fixSigners,\n    maxLogCalls,\n    maxLogSize,\n  }: {\n    allowEmptySignatures?: boolean;\n    allowUnnamedResources?: boolean;\n    extraOpcodeBudget?: number | bigint;\n    fixSigners?: boolean;\n    maxLogCalls?: number | bigint;\n    maxLogSize?: number | bigint;\n  }) {\n    this.allowEmptySignatures = allowEmptySignatures;\n    this.allowUnnamedResources = allowUnnamedResources;\n    this.extraOpcodeBudget =\n      typeof extraOpcodeBudget === 'undefined'\n        ? undefined\n        : ensureSafeInteger(extraOpcodeBudget);\n    this.fixSigners = fixSigners;\n    this.maxLogCalls =\n      typeof maxLogCalls === 'undefined'\n        ? undefined\n        : ensureSafeInteger(maxLogCalls);\n    this.maxLogSize =\n      typeof maxLogSize === 'undefined'\n        ? undefined\n        : ensureSafeInteger(maxLogSize);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulationEvalOverrides.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['allow-empty-signatures', this.allowEmptySignatures],\n      ['allow-unnamed-resources', this.allowUnnamedResources],\n      ['extra-opcode-budget', this.extraOpcodeBudget],\n      ['fix-signers', this.fixSigners],\n      ['max-log-calls', this.maxLogCalls],\n      ['max-log-size', this.maxLogSize],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulationEvalOverrides {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulationEvalOverrides: ${data}`);\n    }\n    return new SimulationEvalOverrides({\n      allowEmptySignatures: data.get('allow-empty-signatures'),\n      allowUnnamedResources: data.get('allow-unnamed-resources'),\n      extraOpcodeBudget: data.get('extra-opcode-budget'),\n      fixSigners: data.get('fix-signers'),\n      maxLogCalls: data.get('max-log-calls'),\n      maxLogSize: data.get('max-log-size'),\n    });\n  }\n}\n\n/**\n * The set of trace information and effect from evaluating a single opcode.\n */\nexport class SimulationOpcodeTraceUnit implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'pc', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'scratch-changes',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(ScratchChange.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'spawned-inners',\n          valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'stack-additions',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(AvmValue.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'stack-pop-count',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'state-changes',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(ApplicationStateOperation.encodingSchema)\n          ),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The program counter of the current opcode being evaluated.\n   */\n  public pc: number;\n\n  /**\n   * The writes into scratch slots.\n   */\n  public scratchChanges?: ScratchChange[];\n\n  /**\n   * The indexes of the traces for inner transactions spawned by this opcode, if any.\n   */\n  public spawnedInners?: number[];\n\n  /**\n   * The values added by this opcode to the stack.\n   */\n  public stackAdditions?: AvmValue[];\n\n  /**\n   * The number of deleted stack values by this opcode.\n   */\n  public stackPopCount?: number;\n\n  /**\n   * The operations against the current application's states.\n   */\n  public stateChanges?: ApplicationStateOperation[];\n\n  /**\n   * Creates a new `SimulationOpcodeTraceUnit` object.\n   * @param pc - The program counter of the current opcode being evaluated.\n   * @param scratchChanges - The writes into scratch slots.\n   * @param spawnedInners - The indexes of the traces for inner transactions spawned by this opcode, if any.\n   * @param stackAdditions - The values added by this opcode to the stack.\n   * @param stackPopCount - The number of deleted stack values by this opcode.\n   * @param stateChanges - The operations against the current application's states.\n   */\n  constructor({\n    pc,\n    scratchChanges,\n    spawnedInners,\n    stackAdditions,\n    stackPopCount,\n    stateChanges,\n  }: {\n    pc: number | bigint;\n    scratchChanges?: ScratchChange[];\n    spawnedInners?: (number | bigint)[];\n    stackAdditions?: AvmValue[];\n    stackPopCount?: number | bigint;\n    stateChanges?: ApplicationStateOperation[];\n  }) {\n    this.pc = ensureSafeInteger(pc);\n    this.scratchChanges = scratchChanges;\n    this.spawnedInners =\n      typeof spawnedInners === 'undefined'\n        ? undefined\n        : spawnedInners.map(ensureSafeInteger);\n    this.stackAdditions = stackAdditions;\n    this.stackPopCount =\n      typeof stackPopCount === 'undefined'\n        ? undefined\n        : ensureSafeInteger(stackPopCount);\n    this.stateChanges = stateChanges;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulationOpcodeTraceUnit.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['pc', this.pc],\n      [\n        'scratch-changes',\n        typeof this.scratchChanges !== 'undefined'\n          ? this.scratchChanges.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['spawned-inners', this.spawnedInners],\n      [\n        'stack-additions',\n        typeof this.stackAdditions !== 'undefined'\n          ? this.stackAdditions.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['stack-pop-count', this.stackPopCount],\n      [\n        'state-changes',\n        typeof this.stateChanges !== 'undefined'\n          ? this.stateChanges.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulationOpcodeTraceUnit {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SimulationOpcodeTraceUnit: ${data}`);\n    }\n    return new SimulationOpcodeTraceUnit({\n      pc: data.get('pc'),\n      scratchChanges:\n        typeof data.get('scratch-changes') !== 'undefined'\n          ? data\n              .get('scratch-changes')\n              .map((v: unknown) => ScratchChange.fromEncodingData(v))\n          : undefined,\n      spawnedInners: data.get('spawned-inners'),\n      stackAdditions:\n        typeof data.get('stack-additions') !== 'undefined'\n          ? data\n              .get('stack-additions')\n              .map((v: unknown) => AvmValue.fromEncodingData(v))\n          : undefined,\n      stackPopCount: data.get('stack-pop-count'),\n      stateChanges:\n        typeof data.get('state-changes') !== 'undefined'\n          ? data\n              .get('state-changes')\n              .map((v: unknown) =>\n                ApplicationStateOperation.fromEncodingData(v)\n              )\n          : undefined,\n    });\n  }\n}\n\n/**\n * The execution trace of calling an app or a logic sig, containing the inner app\n * call trace in a recursive way.\n */\nexport class SimulationTransactionExecTrace implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'approval-program-hash',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'approval-program-trace',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'clear-state-program-hash',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'clear-state-program-trace',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'clear-state-rollback',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'clear-state-rollback-error',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'inner-trace',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(SimulationTransactionExecTrace.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'logic-sig-hash',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'logic-sig-trace',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)\n          ),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * SHA512_256 hash digest of the approval program executed in transaction.\n   */\n  public approvalProgramHash?: Uint8Array;\n\n  /**\n   * Program trace that contains a trace of opcode effects in an approval program.\n   */\n  public approvalProgramTrace?: SimulationOpcodeTraceUnit[];\n\n  /**\n   * SHA512_256 hash digest of the clear state program executed in transaction.\n   */\n  public clearStateProgramHash?: Uint8Array;\n\n  /**\n   * Program trace that contains a trace of opcode effects in a clear state program.\n   */\n  public clearStateProgramTrace?: SimulationOpcodeTraceUnit[];\n\n  /**\n   * If true, indicates that the clear state program failed and any persistent state\n   * changes it produced should be reverted once the program exits.\n   */\n  public clearStateRollback?: boolean;\n\n  /**\n   * The error message explaining why the clear state program failed. This field will\n   * only be populated if clear-state-rollback is true and the failure was due to an\n   * execution error.\n   */\n  public clearStateRollbackError?: string;\n\n  /**\n   * An array of SimulationTransactionExecTrace representing the execution trace of\n   * any inner transactions executed.\n   */\n  public innerTrace?: SimulationTransactionExecTrace[];\n\n  /**\n   * SHA512_256 hash digest of the logic sig executed in transaction.\n   */\n  public logicSigHash?: Uint8Array;\n\n  /**\n   * Program trace that contains a trace of opcode effects in a logic sig.\n   */\n  public logicSigTrace?: SimulationOpcodeTraceUnit[];\n\n  /**\n   * Creates a new `SimulationTransactionExecTrace` object.\n   * @param approvalProgramHash - SHA512_256 hash digest of the approval program executed in transaction.\n   * @param approvalProgramTrace - Program trace that contains a trace of opcode effects in an approval program.\n   * @param clearStateProgramHash - SHA512_256 hash digest of the clear state program executed in transaction.\n   * @param clearStateProgramTrace - Program trace that contains a trace of opcode effects in a clear state program.\n   * @param clearStateRollback - If true, indicates that the clear state program failed and any persistent state\n   * changes it produced should be reverted once the program exits.\n   * @param clearStateRollbackError - The error message explaining why the clear state program failed. This field will\n   * only be populated if clear-state-rollback is true and the failure was due to an\n   * execution error.\n   * @param innerTrace - An array of SimulationTransactionExecTrace representing the execution trace of\n   * any inner transactions executed.\n   * @param logicSigHash - SHA512_256 hash digest of the logic sig executed in transaction.\n   * @param logicSigTrace - Program trace that contains a trace of opcode effects in a logic sig.\n   */\n  constructor({\n    approvalProgramHash,\n    approvalProgramTrace,\n    clearStateProgramHash,\n    clearStateProgramTrace,\n    clearStateRollback,\n    clearStateRollbackError,\n    innerTrace,\n    logicSigHash,\n    logicSigTrace,\n  }: {\n    approvalProgramHash?: string | Uint8Array;\n    approvalProgramTrace?: SimulationOpcodeTraceUnit[];\n    clearStateProgramHash?: string | Uint8Array;\n    clearStateProgramTrace?: SimulationOpcodeTraceUnit[];\n    clearStateRollback?: boolean;\n    clearStateRollbackError?: string;\n    innerTrace?: SimulationTransactionExecTrace[];\n    logicSigHash?: string | Uint8Array;\n    logicSigTrace?: SimulationOpcodeTraceUnit[];\n  }) {\n    this.approvalProgramHash =\n      typeof approvalProgramHash === 'string'\n        ? base64ToBytes(approvalProgramHash)\n        : approvalProgramHash;\n    this.approvalProgramTrace = approvalProgramTrace;\n    this.clearStateProgramHash =\n      typeof clearStateProgramHash === 'string'\n        ? base64ToBytes(clearStateProgramHash)\n        : clearStateProgramHash;\n    this.clearStateProgramTrace = clearStateProgramTrace;\n    this.clearStateRollback = clearStateRollback;\n    this.clearStateRollbackError = clearStateRollbackError;\n    this.innerTrace = innerTrace;\n    this.logicSigHash =\n      typeof logicSigHash === 'string'\n        ? base64ToBytes(logicSigHash)\n        : logicSigHash;\n    this.logicSigTrace = logicSigTrace;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SimulationTransactionExecTrace.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['approval-program-hash', this.approvalProgramHash],\n      [\n        'approval-program-trace',\n        typeof this.approvalProgramTrace !== 'undefined'\n          ? this.approvalProgramTrace.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['clear-state-program-hash', this.clearStateProgramHash],\n      [\n        'clear-state-program-trace',\n        typeof this.clearStateProgramTrace !== 'undefined'\n          ? this.clearStateProgramTrace.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['clear-state-rollback', this.clearStateRollback],\n      ['clear-state-rollback-error', this.clearStateRollbackError],\n      [\n        'inner-trace',\n        typeof this.innerTrace !== 'undefined'\n          ? this.innerTrace.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['logic-sig-hash', this.logicSigHash],\n      [\n        'logic-sig-trace',\n        typeof this.logicSigTrace !== 'undefined'\n          ? this.logicSigTrace.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SimulationTransactionExecTrace {\n    if (!(data instanceof Map)) {\n      throw new Error(\n        `Invalid decoded SimulationTransactionExecTrace: ${data}`\n      );\n    }\n    return new SimulationTransactionExecTrace({\n      approvalProgramHash: data.get('approval-program-hash'),\n      approvalProgramTrace:\n        typeof data.get('approval-program-trace') !== 'undefined'\n          ? data\n              .get('approval-program-trace')\n              .map((v: unknown) =>\n                SimulationOpcodeTraceUnit.fromEncodingData(v)\n              )\n          : undefined,\n      clearStateProgramHash: data.get('clear-state-program-hash'),\n      clearStateProgramTrace:\n        typeof data.get('clear-state-program-trace') !== 'undefined'\n          ? data\n              .get('clear-state-program-trace')\n              .map((v: unknown) =>\n                SimulationOpcodeTraceUnit.fromEncodingData(v)\n              )\n          : undefined,\n      clearStateRollback: data.get('clear-state-rollback'),\n      clearStateRollbackError: data.get('clear-state-rollback-error'),\n      innerTrace:\n        typeof data.get('inner-trace') !== 'undefined'\n          ? data\n              .get('inner-trace')\n              .map((v: unknown) =>\n                SimulationTransactionExecTrace.fromEncodingData(v)\n              )\n          : undefined,\n      logicSigHash: data.get('logic-sig-hash'),\n      logicSigTrace:\n        typeof data.get('logic-sig-trace') !== 'undefined'\n          ? data\n              .get('logic-sig-trace')\n              .map((v: unknown) =>\n                SimulationOpcodeTraceUnit.fromEncodingData(v)\n              )\n          : undefined,\n    });\n  }\n}\n\n/**\n * Represents a state proof and its corresponding message\n */\nexport class StateProof implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'Message',\n          valueSchema: StateProofMessage.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'StateProof',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Represents the message that the state proofs are attesting to.\n   */\n  public message: StateProofMessage;\n\n  /**\n   * The encoded StateProof for the message.\n   */\n  public stateproof: Uint8Array;\n\n  /**\n   * Creates a new `StateProof` object.\n   * @param message - Represents the message that the state proofs are attesting to.\n   * @param stateproof - The encoded StateProof for the message.\n   */\n  constructor({\n    message,\n    stateproof,\n  }: {\n    message: StateProofMessage;\n    stateproof: string | Uint8Array;\n  }) {\n    this.message = message;\n    this.stateproof =\n      typeof stateproof === 'string' ? base64ToBytes(stateproof) : stateproof;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return StateProof.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Message', this.message.toEncodingData()],\n      ['StateProof', this.stateproof],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): StateProof {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProof: ${data}`);\n    }\n    return new StateProof({\n      message: StateProofMessage.fromEncodingData(\n        data.get('Message') ?? new Map()\n      ),\n      stateproof: data.get('StateProof'),\n    });\n  }\n}\n\n/**\n * Represents the message that the state proofs are attesting to.\n */\nexport class StateProofMessage implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'BlockHeadersCommitment',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'FirstAttestedRound',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'LastAttestedRound',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'LnProvenWeight',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'VotersCommitment',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The vector commitment root on all light block headers within a state proof\n   * interval.\n   */\n  public blockheaderscommitment: Uint8Array;\n\n  /**\n   * The first round the message attests to.\n   */\n  public firstattestedround: bigint;\n\n  /**\n   * The last round the message attests to.\n   */\n  public lastattestedround: bigint;\n\n  /**\n   * An integer value representing the natural log of the proven weight with 16 bits\n   * of precision. This value would be used to verify the next state proof.\n   */\n  public lnprovenweight: bigint;\n\n  /**\n   * The vector commitment root of the top N accounts to sign the next StateProof.\n   */\n  public voterscommitment: Uint8Array;\n\n  /**\n   * Creates a new `StateProofMessage` object.\n   * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\n   * interval.\n   * @param firstattestedround - The first round the message attests to.\n   * @param lastattestedround - The last round the message attests to.\n   * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\n   * of precision. This value would be used to verify the next state proof.\n   * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\n   */\n  constructor({\n    blockheaderscommitment,\n    firstattestedround,\n    lastattestedround,\n    lnprovenweight,\n    voterscommitment,\n  }: {\n    blockheaderscommitment: string | Uint8Array;\n    firstattestedround: number | bigint;\n    lastattestedround: number | bigint;\n    lnprovenweight: number | bigint;\n    voterscommitment: string | Uint8Array;\n  }) {\n    this.blockheaderscommitment =\n      typeof blockheaderscommitment === 'string'\n        ? base64ToBytes(blockheaderscommitment)\n        : blockheaderscommitment;\n    this.firstattestedround = ensureBigInt(firstattestedround);\n    this.lastattestedround = ensureBigInt(lastattestedround);\n    this.lnprovenweight = ensureBigInt(lnprovenweight);\n    this.voterscommitment =\n      typeof voterscommitment === 'string'\n        ? base64ToBytes(voterscommitment)\n        : voterscommitment;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return StateProofMessage.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['BlockHeadersCommitment', this.blockheaderscommitment],\n      ['FirstAttestedRound', this.firstattestedround],\n      ['LastAttestedRound', this.lastattestedround],\n      ['LnProvenWeight', this.lnprovenweight],\n      ['VotersCommitment', this.voterscommitment],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): StateProofMessage {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofMessage: ${data}`);\n    }\n    return new StateProofMessage({\n      blockheaderscommitment: data.get('BlockHeadersCommitment'),\n      firstattestedround: data.get('FirstAttestedRound'),\n      lastattestedround: data.get('LastAttestedRound'),\n      lnprovenweight: data.get('LnProvenWeight'),\n      voterscommitment: data.get('VotersCommitment'),\n    });\n  }\n}\n\n/**\n * Supply represents the current supply of MicroAlgos in the system.\n */\nexport class SupplyResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'current_round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'online-money',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        { key: 'total-money', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Round\n   */\n  public currentRound: bigint;\n\n  /**\n   * OnlineMoney\n   */\n  public onlineMoney: bigint;\n\n  /**\n   * TotalMoney\n   */\n  public totalMoney: bigint;\n\n  /**\n   * Creates a new `SupplyResponse` object.\n   * @param currentRound - Round\n   * @param onlineMoney - OnlineMoney\n   * @param totalMoney - TotalMoney\n   */\n  constructor({\n    currentRound,\n    onlineMoney,\n    totalMoney,\n  }: {\n    currentRound: number | bigint;\n    onlineMoney: number | bigint;\n    totalMoney: number | bigint;\n  }) {\n    this.currentRound = ensureBigInt(currentRound);\n    this.onlineMoney = ensureBigInt(onlineMoney);\n    this.totalMoney = ensureBigInt(totalMoney);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return SupplyResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['current_round', this.currentRound],\n      ['online-money', this.onlineMoney],\n      ['total-money', this.totalMoney],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): SupplyResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded SupplyResponse: ${data}`);\n    }\n    return new SupplyResponse({\n      currentRound: data.get('current_round'),\n      onlineMoney: data.get('online-money'),\n      totalMoney: data.get('total-money'),\n    });\n  }\n}\n\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'key', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        { key: 'value', valueSchema: TealValue.encodingSchema, omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public key: Uint8Array;\n\n  /**\n   * Represents a TEAL value.\n   */\n  public value: TealValue;\n\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor({ key, value }: { key: string | Uint8Array; value: TealValue }) {\n    this.key = typeof key === 'string' ? base64ToBytes(key) : key;\n    this.value = value;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TealKeyValue.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['key', this.key],\n      ['value', this.value.toEncodingData()],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TealKeyValue {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TealKeyValue: ${data}`);\n    }\n    return new TealKeyValue({\n      key: data.get('key'),\n      value: TealValue.fromEncodingData(data.get('value') ?? new Map()),\n    });\n  }\n}\n\n/**\n * Represents a TEAL value.\n */\nexport class TealValue implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'bytes', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        { key: 'type', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'uint', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (tb) bytes value.\n   */\n  public bytes: Uint8Array;\n\n  /**\n   * (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   */\n  public type: number;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint: bigint;\n\n  /**\n   * Creates a new `TealValue` object.\n   * @param bytes - (tb) bytes value.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    bytes,\n    type,\n    uint,\n  }: {\n    bytes: string | Uint8Array;\n    type: number | bigint;\n    uint: number | bigint;\n  }) {\n    this.bytes = typeof bytes === 'string' ? base64ToBytes(bytes) : bytes;\n    this.type = ensureSafeInteger(type);\n    this.uint = ensureBigInt(uint);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TealValue.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['bytes', this.bytes],\n      ['type', this.type],\n      ['uint', this.uint],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TealValue {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TealValue: ${data}`);\n    }\n    return new TealValue({\n      bytes: data.get('bytes'),\n      type: data.get('type'),\n      uint: data.get('uint'),\n    });\n  }\n}\n\n/**\n * Response containing all ledger state deltas for transaction groups, with their\n * associated Ids, in a single round.\n */\nexport class TransactionGroupLedgerStateDeltasForRoundResponse\n  implements Encodable\n{\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'Deltas',\n        valueSchema: new ArraySchema(\n          LedgerStateDeltaForTransactionGroup.encodingSchema\n        ),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public deltas: LedgerStateDeltaForTransactionGroup[];\n\n  /**\n   * Creates a new `TransactionGroupLedgerStateDeltasForRoundResponse` object.\n   * @param deltas -\n   */\n  constructor({ deltas }: { deltas: LedgerStateDeltaForTransactionGroup[] }) {\n    this.deltas = deltas;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionGroupLedgerStateDeltasForRoundResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Deltas', this.deltas.map((v) => v.toEncodingData())],\n    ]);\n  }\n\n  static fromEncodingData(\n    data: unknown\n  ): TransactionGroupLedgerStateDeltasForRoundResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(\n        `Invalid decoded TransactionGroupLedgerStateDeltasForRoundResponse: ${data}`\n      );\n    }\n    return new TransactionGroupLedgerStateDeltasForRoundResponse({\n      deltas: (data.get('Deltas') ?? []).map((v: unknown) =>\n        LedgerStateDeltaForTransactionGroup.fromEncodingData(v)\n      ),\n    });\n  }\n}\n\n/**\n * TransactionParams contains the parameters that help a client construct a new\n * transaction.\n */\nexport class TransactionParametersResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'consensus-version',\n          valueSchema: new StringSchema(),\n          omitEmpty: true,\n        },\n        { key: 'fee', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'genesis-hash',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        { key: 'genesis-id', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'last-round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'min-fee', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * ConsensusVersion indicates the consensus protocol version\n   * as of LastRound.\n   */\n  public consensusVersion: string;\n\n  /**\n   * Fee is the suggested transaction fee\n   * Fee is in units of micro-Algos per byte.\n   * Fee may fall to zero but transactions must still have a fee of\n   * at least MinTxnFee for the current network protocol.\n   */\n  public fee: bigint;\n\n  /**\n   * GenesisHash is the hash of the genesis block.\n   */\n  public genesisHash: Uint8Array;\n\n  /**\n   * GenesisID is an ID listed in the genesis block.\n   */\n  public genesisId: string;\n\n  /**\n   * LastRound indicates the last round seen\n   */\n  public lastRound: bigint;\n\n  /**\n   * The minimum transaction fee (not per byte) required for the\n   * txn to validate for the current network protocol.\n   */\n  public minFee: bigint;\n\n  /**\n   * Creates a new `TransactionParametersResponse` object.\n   * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\n   * as of LastRound.\n   * @param fee - Fee is the suggested transaction fee\n   * Fee is in units of micro-Algos per byte.\n   * Fee may fall to zero but transactions must still have a fee of\n   * at least MinTxnFee for the current network protocol.\n   * @param genesisHash - GenesisHash is the hash of the genesis block.\n   * @param genesisId - GenesisID is an ID listed in the genesis block.\n   * @param lastRound - LastRound indicates the last round seen\n   * @param minFee - The minimum transaction fee (not per byte) required for the\n   * txn to validate for the current network protocol.\n   */\n  constructor({\n    consensusVersion,\n    fee,\n    genesisHash,\n    genesisId,\n    lastRound,\n    minFee,\n  }: {\n    consensusVersion: string;\n    fee: number | bigint;\n    genesisHash: string | Uint8Array;\n    genesisId: string;\n    lastRound: number | bigint;\n    minFee: number | bigint;\n  }) {\n    this.consensusVersion = consensusVersion;\n    this.fee = ensureBigInt(fee);\n    this.genesisHash =\n      typeof genesisHash === 'string'\n        ? base64ToBytes(genesisHash)\n        : genesisHash;\n    this.genesisId = genesisId;\n    this.lastRound = ensureBigInt(lastRound);\n    this.minFee = ensureBigInt(minFee);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionParametersResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['consensus-version', this.consensusVersion],\n      ['fee', this.fee],\n      ['genesis-hash', this.genesisHash],\n      ['genesis-id', this.genesisId],\n      ['last-round', this.lastRound],\n      ['min-fee', this.minFee],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionParametersResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionParametersResponse: ${data}`);\n    }\n    return new TransactionParametersResponse({\n      consensusVersion: data.get('consensus-version'),\n      fee: data.get('fee'),\n      genesisHash: data.get('genesis-hash'),\n      genesisId: data.get('genesis-id'),\n      lastRound: data.get('last-round'),\n      minFee: data.get('min-fee'),\n    });\n  }\n}\n\n/**\n * Proof of transaction in a block.\n */\nexport class TransactionProofResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'idx', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'proof', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        {\n          key: 'stibhash',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        { key: 'treedepth', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'hashtype',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Index of the transaction in the block's payset.\n   */\n  public idx: number;\n\n  /**\n   * Proof of transaction membership.\n   */\n  public proof: Uint8Array;\n\n  /**\n   * Hash of SignedTxnInBlock for verifying proof.\n   */\n  public stibhash: Uint8Array;\n\n  /**\n   * Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  public treedepth: number;\n\n  /**\n   * The type of hash function used to create the proof, must be one of:\n   * * sha512_256\n   * * sha256\n   */\n  public hashtype?: string;\n\n  /**\n   * Creates a new `TransactionProofResponse` object.\n   * @param idx - Index of the transaction in the block's payset.\n   * @param proof - Proof of transaction membership.\n   * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   * @param hashtype - The type of hash function used to create the proof, must be one of:\n   * * sha512_256\n   * * sha256\n   */\n  constructor({\n    idx,\n    proof,\n    stibhash,\n    treedepth,\n    hashtype,\n  }: {\n    idx: number | bigint;\n    proof: string | Uint8Array;\n    stibhash: string | Uint8Array;\n    treedepth: number | bigint;\n    hashtype?: string;\n  }) {\n    this.idx = ensureSafeInteger(idx);\n    this.proof = typeof proof === 'string' ? base64ToBytes(proof) : proof;\n    this.stibhash =\n      typeof stibhash === 'string' ? base64ToBytes(stibhash) : stibhash;\n    this.treedepth = ensureSafeInteger(treedepth);\n    this.hashtype = hashtype;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionProofResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['idx', this.idx],\n      ['proof', this.proof],\n      ['stibhash', this.stibhash],\n      ['treedepth', this.treedepth],\n      ['hashtype', this.hashtype],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionProofResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionProofResponse: ${data}`);\n    }\n    return new TransactionProofResponse({\n      idx: data.get('idx'),\n      proof: data.get('proof'),\n      stibhash: data.get('stibhash'),\n      treedepth: data.get('treedepth'),\n      hashtype: data.get('hashtype'),\n    });\n  }\n}\n\n/**\n * algod version information.\n */\nexport class Version implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'build',\n          valueSchema: BuildVersion.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'genesis_hash_b64',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        { key: 'genesis_id', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'versions',\n          valueSchema: new ArraySchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public build: BuildVersion;\n\n  public genesisHashB64: Uint8Array;\n\n  public genesisId: string;\n\n  public versions: string[];\n\n  /**\n   * Creates a new `Version` object.\n   * @param build -\n   * @param genesisHashB64 -\n   * @param genesisId -\n   * @param versions -\n   */\n  constructor({\n    build,\n    genesisHashB64,\n    genesisId,\n    versions,\n  }: {\n    build: BuildVersion;\n    genesisHashB64: string | Uint8Array;\n    genesisId: string;\n    versions: string[];\n  }) {\n    this.build = build;\n    this.genesisHashB64 =\n      typeof genesisHashB64 === 'string'\n        ? base64ToBytes(genesisHashB64)\n        : genesisHashB64;\n    this.genesisId = genesisId;\n    this.versions = versions;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Version.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['build', this.build.toEncodingData()],\n      ['genesis_hash_b64', this.genesisHashB64],\n      ['genesis_id', this.genesisId],\n      ['versions', this.versions],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Version {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Version: ${data}`);\n    }\n    return new Version({\n      build: BuildVersion.fromEncodingData(data.get('build') ?? new Map()),\n      genesisHashB64: data.get('genesis_hash_b64'),\n      genesisId: data.get('genesis_id'),\n      versions: data.get('versions'),\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}