{"ast":null,"code":"import { Schema } from '../encoding.js';\n/* eslint-disable class-methods-use-this */\n/**\n * OptionalSchema allows for another schema-defined value to be optional.\n *\n * This expands the set of values which can be represented by the given schema to include `undefined`.\n *\n * Note that this schema considers `undefined` _and_ any default values from the underlying schema\n * to all be default values. This means that when using NamedMapSchema to omit default values, an\n * `undefined` value is indistinguishable from the given schema's default value; in this respect,\n * OptionalSchema does not affect the encoding of NamedMapSchema values, but rather allows the\n * application to restore omitted values as `undefined` instead of their default value.\n *\n * Upon decoding, this schema also allows null/undefined values to be acceptable as values.\n */\nexport class OptionalSchema extends Schema {\n  constructor(valueSchema) {\n    super();\n    this.valueSchema = valueSchema;\n  }\n  defaultValue() {\n    return undefined;\n  }\n  isDefaultValue(data) {\n    return data === undefined || this.valueSchema.isDefaultValue(data);\n  }\n  prepareMsgpack(data) {\n    if (data === undefined) {\n      return undefined;\n    }\n    return this.valueSchema.prepareMsgpack(data);\n  }\n  fromPreparedMsgpack(encoded, rawStringProvider) {\n    // JS undefined is encoded as msgpack nil, which may be decoded as JS null\n    if (encoded === undefined || encoded === null) {\n      return undefined;\n    }\n    return this.valueSchema.fromPreparedMsgpack(encoded, rawStringProvider);\n  }\n  prepareJSON(data, options) {\n    if (data === undefined) {\n      // JSON representation does not have undefined, only null\n      return null;\n    }\n    return this.valueSchema.prepareJSON(data, options);\n  }\n  fromPreparedJSON(encoded) {\n    if (encoded === undefined || encoded === null) {\n      return undefined;\n    }\n    return this.valueSchema.fromPreparedJSON(encoded);\n  }\n}","map":{"version":3,"names":["Schema","OptionalSchema","constructor","valueSchema","defaultValue","undefined","isDefaultValue","data","prepareMsgpack","fromPreparedMsgpack","encoded","rawStringProvider","prepareJSON","options","fromPreparedJSON"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\encoding\\schema\\optional.ts"],"sourcesContent":["import {\n  Schema,\n  MsgpackEncodingData,\n  MsgpackRawStringProvider,\n  JSONEncodingData,\n  PrepareJSONOptions,\n} from '../encoding.js';\n\n/* eslint-disable class-methods-use-this */\n\n/**\n * OptionalSchema allows for another schema-defined value to be optional.\n *\n * This expands the set of values which can be represented by the given schema to include `undefined`.\n *\n * Note that this schema considers `undefined` _and_ any default values from the underlying schema\n * to all be default values. This means that when using NamedMapSchema to omit default values, an\n * `undefined` value is indistinguishable from the given schema's default value; in this respect,\n * OptionalSchema does not affect the encoding of NamedMapSchema values, but rather allows the\n * application to restore omitted values as `undefined` instead of their default value.\n *\n * Upon decoding, this schema also allows null/undefined values to be acceptable as values.\n */\nexport class OptionalSchema extends Schema {\n  constructor(public readonly valueSchema: Schema) {\n    super();\n  }\n\n  public defaultValue(): undefined {\n    return undefined;\n  }\n\n  public isDefaultValue(data: unknown): boolean {\n    return data === undefined || this.valueSchema.isDefaultValue(data);\n  }\n\n  public prepareMsgpack(data: unknown): MsgpackEncodingData {\n    if (data === undefined) {\n      return undefined;\n    }\n    return this.valueSchema.prepareMsgpack(data);\n  }\n\n  public fromPreparedMsgpack(\n    encoded: MsgpackEncodingData,\n    rawStringProvider: MsgpackRawStringProvider\n  ): unknown {\n    // JS undefined is encoded as msgpack nil, which may be decoded as JS null\n    if (encoded === undefined || encoded === null) {\n      return undefined;\n    }\n    return this.valueSchema.fromPreparedMsgpack(encoded, rawStringProvider);\n  }\n\n  public prepareJSON(\n    data: unknown,\n    options: PrepareJSONOptions\n  ): JSONEncodingData {\n    if (data === undefined) {\n      // JSON representation does not have undefined, only null\n      return null;\n    }\n    return this.valueSchema.prepareJSON(data, options);\n  }\n\n  public fromPreparedJSON(encoded: JSONEncodingData): unknown {\n    if (encoded === undefined || encoded === null) {\n      return undefined;\n    }\n    return this.valueSchema.fromPreparedJSON(encoded);\n  }\n}\n"],"mappings":"AAAA,SACEA,MAAM,QAKD,gBAAgB;AAEvB;AAEA;;;;;;;;;;;;;AAaA,OAAM,MAAOC,cAAe,SAAQD,MAAM;EACxCE,YAA4BC,WAAmB;IAC7C,KAAK,EAAE;IADmB,KAAAA,WAAW,GAAXA,WAAW;EAEvC;EAEOC,YAAYA,CAAA;IACjB,OAAOC,SAAS;EAClB;EAEOC,cAAcA,CAACC,IAAa;IACjC,OAAOA,IAAI,KAAKF,SAAS,IAAI,IAAI,CAACF,WAAW,CAACG,cAAc,CAACC,IAAI,CAAC;EACpE;EAEOC,cAAcA,CAACD,IAAa;IACjC,IAAIA,IAAI,KAAKF,SAAS,EAAE;MACtB,OAAOA,SAAS;IAClB;IACA,OAAO,IAAI,CAACF,WAAW,CAACK,cAAc,CAACD,IAAI,CAAC;EAC9C;EAEOE,mBAAmBA,CACxBC,OAA4B,EAC5BC,iBAA2C;IAE3C;IACA,IAAID,OAAO,KAAKL,SAAS,IAAIK,OAAO,KAAK,IAAI,EAAE;MAC7C,OAAOL,SAAS;IAClB;IACA,OAAO,IAAI,CAACF,WAAW,CAACM,mBAAmB,CAACC,OAAO,EAAEC,iBAAiB,CAAC;EACzE;EAEOC,WAAWA,CAChBL,IAAa,EACbM,OAA2B;IAE3B,IAAIN,IAAI,KAAKF,SAAS,EAAE;MACtB;MACA,OAAO,IAAI;IACb;IACA,OAAO,IAAI,CAACF,WAAW,CAACS,WAAW,CAACL,IAAI,EAAEM,OAAO,CAAC;EACpD;EAEOC,gBAAgBA,CAACJ,OAAyB;IAC/C,IAAIA,OAAO,KAAKL,SAAS,IAAIK,OAAO,KAAK,IAAI,EAAE;MAC7C,OAAOL,SAAS;IAClB;IACA,OAAO,IAAI,CAACF,WAAW,CAACW,gBAAgB,CAACJ,OAAO,CAAC;EACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}