{"ast":null,"code":"import { NamedMapSchema, Uint64MapSchema, ByteArrayMapSchema, SpecialCaseBinaryStringMapSchema, SpecialCaseBinaryStringSchema, ArraySchema, BooleanSchema, Uint64Schema, AddressSchema, ByteArraySchema, FixedLengthByteArraySchema, OptionalSchema, UntypedSchema, allOmitEmpty, convertMap, combineMaps } from '../encoding/schema/index.js';\nimport { BlockHeader } from './block.js';\nimport { UntypedValue } from '../client/v2/untypedmodel.js';\n// TealValue contains type information and a value, representing a value in a TEAL program\nexport class TealValue {\n  constructor(params) {\n    this.type = params.type;\n    this.bytes = params.bytes;\n    this.uint = params.uint;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TealValue.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['tt', this.type], ['tb', this.bytes], ['ui', this.uint]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TealValue: ${data}`);\n    }\n    return new TealValue({\n      type: Number(data.get('tt')),\n      bytes: data.get('tb'),\n      uint: data.get('ui')\n    });\n  }\n}\nTealValue.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'tt',\n  valueSchema: new Uint64Schema()\n},\n// type\n{\n  key: 'tb',\n  // bytes\n  valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema())\n}, {\n  key: 'ui',\n  valueSchema: new OptionalSchema(new Uint64Schema())\n} // uint\n]));\n/**\n * StateSchema sets maximums on the number of each type that may be stored\n */\nexport class StateSchema {\n  constructor(params) {\n    this.numUints = params.numUints;\n    this.numByteSlices = params.numByteSlices;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateSchema.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['nui', this.numUints], ['nbs', this.numByteSlices]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateSchema: ${data}`);\n    }\n    return new StateSchema({\n      numUints: Number(data.get('nui')),\n      numByteSlices: Number(data.get('nbs'))\n    });\n  }\n}\nStateSchema.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'nui',\n  // numUints\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'nbs',\n  // numByteSlices\n  valueSchema: new Uint64Schema()\n}]));\n/**\n * AppParams stores the global information associated with an application\n */\nexport class AppParams {\n  constructor(params) {\n    this.approvalProgram = params.approvalProgram;\n    this.clearStateProgram = params.clearStateProgram;\n    this.globalState = params.globalState;\n    this.localStateSchema = params.localStateSchema;\n    this.globalStateSchema = params.globalStateSchema;\n    this.extraProgramPages = params.extraProgramPages;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AppParams.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['approv', this.approvalProgram], ['clearp', this.clearStateProgram], ['gs', convertMap(this.globalState, (k, v) => [k, v.toEncodingData()])], ['lsch', this.localStateSchema.toEncodingData()], ['gsch', this.globalStateSchema.toEncodingData()], ['epp', this.extraProgramPages]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppParams: ${data}`);\n    }\n    return new AppParams({\n      approvalProgram: data.get('approv'),\n      clearStateProgram: data.get('clearp'),\n      globalState: convertMap(data.get('gs'), (k, v) => [k, TealValue.fromEncodingData(v)]),\n      localStateSchema: StateSchema.fromEncodingData(data.get('lsch')),\n      globalStateSchema: StateSchema.fromEncodingData(data.get('gsch')),\n      extraProgramPages: Number(data.get('epp'))\n    });\n  }\n}\nAppParams.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'approv',\n  valueSchema: new ByteArraySchema()\n},\n// approvalProgram\n{\n  key: 'clearp',\n  valueSchema: new ByteArraySchema()\n},\n// alearStateProgram\n{\n  key: 'gs',\n  valueSchema: new SpecialCaseBinaryStringMapSchema(TealValue.encodingSchema)\n},\n// globalState\n{\n  key: 'lsch',\n  valueSchema: StateSchema.encodingSchema\n},\n// localStateSchema\n{\n  key: 'gsch',\n  valueSchema: StateSchema.encodingSchema\n},\n// globalStateSchema\n{\n  key: 'epp',\n  valueSchema: new Uint64Schema()\n} // extraProgramPages\n]));\n/**\n * AppLocalState stores the LocalState associated with an application.\n */\nexport class AppLocalState {\n  constructor(params) {\n    this.schema = params.schema;\n    this.keyValue = params.keyValue;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AppLocalState.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['hsch', this.schema.toEncodingData()], ['tkv', convertMap(this.keyValue, (k, v) => [k, v.toEncodingData()])]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppLocalState: ${data}`);\n    }\n    return new AppLocalState({\n      schema: StateSchema.fromEncodingData(data.get('hsch')),\n      keyValue: convertMap(data.get('tkv'), (k, v) => [k, TealValue.fromEncodingData(v)])\n    });\n  }\n}\nAppLocalState.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'hsch',\n  valueSchema: StateSchema.encodingSchema\n},\n// schema\n{\n  key: 'tkv',\n  // keyValue\n  valueSchema: new SpecialCaseBinaryStringMapSchema(TealValue.encodingSchema)\n}]));\n/**\n * AppLocalStateDelta tracks a changed AppLocalState, and whether it was deleted\n */\nexport class AppLocalStateDelta {\n  constructor(params) {\n    this.localState = params.localState;\n    this.deleted = params.deleted;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AppLocalStateDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['LocalState', this.localState ? this.localState.toEncodingData() : undefined], ['Deleted', this.deleted]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppLocalStateDelta: ${data}`);\n    }\n    return new AppLocalStateDelta({\n      localState: data.get('LocalState') ? AppLocalState.fromEncodingData(data.get('LocalState')) : undefined,\n      deleted: data.get('Deleted')\n    });\n  }\n}\nAppLocalStateDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'LocalState',\n  // localState\n  valueSchema: new OptionalSchema(AppLocalState.encodingSchema)\n}, {\n  key: 'Deleted',\n  valueSchema: new BooleanSchema()\n} // deleted\n]));\n/**\n * AppParamsDelta tracks a changed AppParams, and whether it was deleted\n */\nexport class AppParamsDelta {\n  constructor(params) {\n    this.params = params.params;\n    this.deleted = params.deleted;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AppParamsDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Params', this.params ? this.params.toEncodingData() : undefined], ['Deleted', this.deleted]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppParamsDelta: ${data}`);\n    }\n    return new AppParamsDelta({\n      params: data.get('Params') ? AppParams.fromEncodingData(data.get('Params')) : undefined,\n      deleted: data.get('Deleted')\n    });\n  }\n}\nAppParamsDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Params',\n  // params\n  valueSchema: new OptionalSchema(AppParams.encodingSchema)\n}, {\n  key: 'Deleted',\n  valueSchema: new BooleanSchema()\n} // deleted\n]));\n/**\n * AppResourceRecord represents AppParams and AppLocalState in deltas\n */\nexport class AppResourceRecord {\n  constructor(params) {\n    this.id = params.id;\n    this.address = params.address;\n    this.params = params.params;\n    this.state = params.state;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AppResourceRecord.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Aidx', this.id], ['Addr', this.address], ['Params', this.params.toEncodingData()], ['State', this.state.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppResourceRecord: ${data}`);\n    }\n    return new AppResourceRecord({\n      id: data.get('Aidx'),\n      address: data.get('Addr'),\n      params: AppParamsDelta.fromEncodingData(data.get('Params')),\n      state: AppLocalStateDelta.fromEncodingData(data.get('State'))\n    });\n  }\n}\nAppResourceRecord.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Aidx',\n  valueSchema: new Uint64Schema()\n},\n// id\n{\n  key: 'Addr',\n  valueSchema: new AddressSchema()\n},\n// address\n{\n  key: 'Params',\n  // params\n  valueSchema: AppParamsDelta.encodingSchema\n}, {\n  key: 'State',\n  // state\n  valueSchema: AppLocalStateDelta.encodingSchema\n}]));\n/**\n * AssetHolding describes an asset held by an account.\n */\nexport class AssetHolding {\n  constructor(params) {\n    this.amount = params.amount;\n    this.frozen = params.frozen;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetHolding.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['a', this.amount], ['f', this.frozen]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHolding: ${data}`);\n    }\n    return new AssetHolding({\n      amount: data.get('a'),\n      frozen: data.get('f')\n    });\n  }\n}\nAssetHolding.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'a',\n  valueSchema: new Uint64Schema()\n},\n// amount\n{\n  key: 'f',\n  valueSchema: new BooleanSchema()\n} // frozen\n]));\n/**\n * AssetHoldingDelta records a changed AssetHolding, and whether it was deleted\n */\nexport class AssetHoldingDelta {\n  constructor(params) {\n    this.holding = params.holding;\n    this.deleted = params.deleted;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetHoldingDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Holding', this.holding ? this.holding.toEncodingData() : undefined], ['Deleted', this.deleted]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHoldingDelta: ${data}`);\n    }\n    return new AssetHoldingDelta({\n      holding: data.get('Holding') ? AssetHolding.fromEncodingData(data.get('Holding')) : undefined,\n      deleted: data.get('Deleted')\n    });\n  }\n}\nAssetHoldingDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Holding',\n  // holding\n  valueSchema: new OptionalSchema(AssetHolding.encodingSchema)\n}, {\n  key: 'Deleted',\n  valueSchema: new BooleanSchema()\n} // deleted\n]));\n/**\n * AssetParams describes the parameters of an asset.\n */\nexport class AssetParams {\n  constructor(params) {\n    this.total = params.total;\n    this.decimals = params.decimals;\n    this.defaultFrozen = params.defaultFrozen;\n    this.unitName = params.unitName;\n    this.assetName = params.assetName;\n    this.url = params.url;\n    this.metadataHash = params.metadataHash;\n    this.manager = params.manager;\n    this.reserve = params.reserve;\n    this.freeze = params.freeze;\n    this.clawback = params.clawback;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetParams.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['t', this.total], ['dc', this.decimals], ['df', this.defaultFrozen], ['un', this.unitName], ['an', this.assetName], ['au', this.url], ['am', this.metadataHash], ['m', this.manager], ['r', this.reserve], ['f', this.freeze], ['c', this.clawback]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetParams: ${data}`);\n    }\n    return new AssetParams({\n      total: data.get('t'),\n      decimals: data.get('dc'),\n      defaultFrozen: data.get('df'),\n      unitName: data.get('un'),\n      assetName: data.get('an'),\n      url: data.get('au'),\n      metadataHash: data.get('am'),\n      manager: data.get('m'),\n      reserve: data.get('r'),\n      freeze: data.get('f'),\n      clawback: data.get('c')\n    });\n  }\n}\nAssetParams.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 't',\n  valueSchema: new Uint64Schema()\n},\n// total\n{\n  key: 'dc',\n  valueSchema: new Uint64Schema()\n},\n// decimals\n{\n  key: 'df',\n  valueSchema: new BooleanSchema()\n},\n// defaultFrozen\n{\n  key: 'un',\n  // unitName\n  valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema())\n}, {\n  key: 'an',\n  // assetName\n  valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema())\n}, {\n  key: 'au',\n  // url\n  valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema())\n}, {\n  key: 'am',\n  valueSchema: new FixedLengthByteArraySchema(32)\n},\n// metadataHash\n{\n  key: 'm',\n  valueSchema: new OptionalSchema(new AddressSchema())\n},\n// manager\n{\n  key: 'r',\n  valueSchema: new OptionalSchema(new AddressSchema())\n},\n// reserve\n{\n  key: 'f',\n  valueSchema: new OptionalSchema(new AddressSchema())\n},\n// freeze\n{\n  key: 'c',\n  valueSchema: new OptionalSchema(new AddressSchema())\n} // clawback\n]));\n/**\n * AssetParamsDelta tracks a changed AssetParams, and whether it was deleted\n */\nexport class AssetParamsDelta {\n  constructor(params) {\n    this.params = params.params;\n    this.deleted = params.deleted;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetParamsDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Params', this.params ? this.params.toEncodingData() : undefined], ['Deleted', this.deleted]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetParamsDelta: ${data}`);\n    }\n    return new AssetParamsDelta({\n      params: data.get('Params') ? AssetParams.fromEncodingData(data.get('Params')) : undefined,\n      deleted: data.get('Deleted')\n    });\n  }\n}\nAssetParamsDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Params',\n  // params\n  valueSchema: new OptionalSchema(AssetParams.encodingSchema)\n}, {\n  key: 'Deleted',\n  valueSchema: new BooleanSchema()\n} // deleted\n]));\n/**\n * AssetResourceRecord represents AssetParams and AssetHolding in deltas\n */\nexport class AssetResourceRecord {\n  constructor(params) {\n    this.id = params.id;\n    this.address = params.address;\n    this.params = params.params;\n    this.holding = params.holding;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetResourceRecord.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Aidx', this.id], ['Addr', this.address], ['Params', this.params.toEncodingData()], ['Holding', this.holding.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetResourceRecord: ${data}`);\n    }\n    return new AssetResourceRecord({\n      id: data.get('Aidx'),\n      address: data.get('Addr'),\n      params: AssetParamsDelta.fromEncodingData(data.get('Params')),\n      holding: AssetHoldingDelta.fromEncodingData(data.get('Holding'))\n    });\n  }\n}\nAssetResourceRecord.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Aidx',\n  valueSchema: new Uint64Schema()\n},\n// id\n{\n  key: 'Addr',\n  valueSchema: new AddressSchema()\n},\n// address\n{\n  key: 'Params',\n  // params\n  valueSchema: AssetParamsDelta.encodingSchema\n}, {\n  key: 'Holding',\n  // holding\n  valueSchema: AssetHoldingDelta.encodingSchema\n}]));\n/**\n * VotingData holds participation information\n */\nexport class VotingData {\n  constructor(params) {\n    this.voteID = params.voteID;\n    this.selectionID = params.selectionID;\n    this.stateProofID = params.stateProofID;\n    this.voteFirstValid = params.voteFirstValid;\n    this.voteLastValid = params.voteLastValid;\n    this.voteKeyDilution = params.voteKeyDilution;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return VotingData.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['VoteID', this.voteID], ['SelectionID', this.selectionID], ['StateProofID', this.stateProofID], ['VoteFirstValid', this.voteFirstValid], ['VoteLastValid', this.voteLastValid], ['VoteKeyDilution', this.voteKeyDilution]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded VotingData: ${data}`);\n    }\n    return new VotingData({\n      voteID: data.get('VoteID'),\n      selectionID: data.get('SelectionID'),\n      stateProofID: data.get('StateProofID'),\n      voteFirstValid: data.get('VoteFirstValid'),\n      voteLastValid: data.get('VoteLastValid'),\n      voteKeyDilution: data.get('VoteKeyDilution')\n    });\n  }\n}\nVotingData.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'VoteID',\n  // voteID\n  valueSchema: new FixedLengthByteArraySchema(32)\n}, {\n  key: 'SelectionID',\n  // selectionID\n  valueSchema: new FixedLengthByteArraySchema(32)\n}, {\n  key: 'StateProofID',\n  // stateProofID\n  valueSchema: new FixedLengthByteArraySchema(64)\n}, {\n  key: 'VoteFirstValid',\n  // voteFirstValid\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'VoteLastValid',\n  // voteLastValid\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'VoteKeyDilution',\n  // voteKeyDilution\n  valueSchema: new Uint64Schema()\n}]));\n/**\n * AccountBaseData contains base account info like balance, status and total number of resources\n */\nexport class AccountBaseData {\n  constructor(params) {\n    this.status = params.status;\n    this.microAlgos = params.microAlgos;\n    this.rewardsBase = params.rewardsBase;\n    this.rewardedMicroAlgos = params.rewardedMicroAlgos;\n    this.authAddr = params.authAddr;\n    this.incentiveEligible = params.incentiveEligible;\n    this.totalAppSchema = params.totalAppSchema;\n    this.totalExtraAppPages = params.totalExtraAppPages;\n    this.totalAppParams = params.totalAppParams;\n    this.totalAppLocalStates = params.totalAppLocalStates;\n    this.totalAssetParams = params.totalAssetParams;\n    this.totalAssets = params.totalAssets;\n    this.totalBoxes = params.totalBoxes;\n    this.totalBoxBytes = params.totalBoxBytes;\n    this.lastProposed = params.lastProposed;\n    this.lastHeartbeat = params.lastHeartbeat;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountBaseData.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Status', this.status], ['MicroAlgos', this.microAlgos], ['RewardsBase', this.rewardsBase], ['RewardedMicroAlgos', this.rewardedMicroAlgos], ['AuthAddr', this.authAddr], ['IncentiveEligible', this.incentiveEligible], ['TotalAppSchema', this.totalAppSchema.toEncodingData()], ['TotalExtraAppPages', this.totalExtraAppPages], ['TotalAppParams', this.totalAppParams], ['TotalAppLocalStates', this.totalAppLocalStates], ['TotalAssetParams', this.totalAssetParams], ['TotalAssets', this.totalAssets], ['TotalBoxes', this.totalBoxes], ['TotalBoxBytes', this.totalBoxBytes], ['LastProposed', this.lastProposed], ['LastHeartbeat', this.lastHeartbeat]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountBaseData: ${data}`);\n    }\n    return new AccountBaseData({\n      status: Number(data.get('Status')),\n      microAlgos: data.get('MicroAlgos'),\n      rewardsBase: data.get('RewardsBase'),\n      rewardedMicroAlgos: data.get('RewardedMicroAlgos'),\n      authAddr: data.get('AuthAddr'),\n      incentiveEligible: data.get('IncentiveEligible'),\n      totalAppSchema: StateSchema.fromEncodingData(data.get('TotalAppSchema')),\n      totalExtraAppPages: Number(data.get('TotalExtraAppPages')),\n      totalAppParams: data.get('TotalAppParams'),\n      totalAppLocalStates: data.get('TotalAppLocalStates'),\n      totalAssetParams: data.get('TotalAssetParams'),\n      totalAssets: data.get('TotalAssets'),\n      totalBoxes: data.get('TotalBoxes'),\n      totalBoxBytes: data.get('TotalBoxBytes'),\n      lastProposed: data.get('LastProposed'),\n      lastHeartbeat: data.get('LastHeartbeat')\n    });\n  }\n}\nAccountBaseData.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Status',\n  valueSchema: new Uint64Schema()\n},\n// status\n{\n  key: 'MicroAlgos',\n  valueSchema: new Uint64Schema()\n},\n// microAlgos\n{\n  key: 'RewardsBase',\n  valueSchema: new Uint64Schema()\n},\n// rewardsBase\n{\n  key: 'RewardedMicroAlgos',\n  // rewardedMicroAlgos\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'AuthAddr',\n  valueSchema: new AddressSchema()\n},\n// authAddr\n{\n  key: 'IncentiveEligible',\n  // incentiveEligible\n  valueSchema: new BooleanSchema()\n}, {\n  key: 'TotalAppSchema',\n  // totalAppSchema\n  valueSchema: StateSchema.encodingSchema\n}, {\n  key: 'TotalExtraAppPages',\n  // totalExtraAppPages\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'TotalAppParams',\n  // totalAppParams\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'TotalAppLocalStates',\n  // totalAppLocalStates\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'TotalAssetParams',\n  // totalAssetParams\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'TotalAssets',\n  valueSchema: new Uint64Schema()\n},\n// totalAssets\n{\n  key: 'TotalBoxes',\n  valueSchema: new Uint64Schema()\n},\n// totalBoxes\n{\n  key: 'TotalBoxBytes',\n  // totalBoxBytes\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'LastProposed',\n  valueSchema: new Uint64Schema()\n},\n// lastProposed\n{\n  key: 'LastHeartbeat',\n  // lastHeartbeat\n  valueSchema: new Uint64Schema()\n}]));\n/**\n * AccountData provides per-account data\n */\nexport class AccountData {\n  constructor(params) {\n    this.accountBaseData = params.accountBaseData;\n    this.votingData = params.votingData;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountData.encodingSchema;\n  }\n  toEncodingData() {\n    return combineMaps(this.accountBaseData.toEncodingData(), this.votingData.toEncodingData());\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountData: ${data}`);\n    }\n    return new AccountData({\n      accountBaseData: AccountBaseData.fromEncodingData(data),\n      votingData: VotingData.fromEncodingData(data)\n    });\n  }\n}\nAccountData.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: '',\n  valueSchema: AccountBaseData.encodingSchema,\n  embedded: true\n}, {\n  key: '',\n  valueSchema: VotingData.encodingSchema,\n  embedded: true\n}]));\nexport class BalanceRecord {\n  constructor(params) {\n    this.addr = params.addr;\n    this.accountData = params.accountData;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BalanceRecord.encodingSchema;\n  }\n  toEncodingData() {\n    return combineMaps(new Map([['Addr', this.addr]]), this.accountData.toEncodingData());\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BalanceRecord: ${data}`);\n    }\n    return new BalanceRecord({\n      addr: data.get('Addr'),\n      accountData: AccountData.fromEncodingData(data)\n    });\n  }\n}\nBalanceRecord.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Addr',\n  valueSchema: new AddressSchema()\n}, {\n  key: '',\n  valueSchema: AccountData.encodingSchema,\n  embedded: true\n}]));\nexport class AccountDeltas {\n  constructor(params) {\n    this.accounts = params.accounts;\n    this.appResources = params.appResources;\n    this.assetResources = params.assetResources;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountDeltas.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Accts', this.accounts.map(account => account.toEncodingData())], ['AppResources', this.appResources.length === 0 ? undefined : this.appResources.map(appResource => appResource.toEncodingData())], ['AssetResources', this.assetResources.length === 0 ? undefined : this.assetResources.map(assetResource => assetResource.toEncodingData())]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountDeltas: ${data}`);\n    }\n    return new AccountDeltas({\n      accounts: (data.get('Accts') ?? []).map(BalanceRecord.fromEncodingData),\n      appResources: (data.get('AppResources') ?? []).map(AppResourceRecord.fromEncodingData),\n      assetResources: (data.get('AssetResources') ?? []).map(AssetResourceRecord.fromEncodingData)\n    });\n  }\n}\nAccountDeltas.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Accts',\n  // accounts\n  valueSchema: new ArraySchema(BalanceRecord.encodingSchema)\n}, {\n  key: 'AppResources',\n  // appResources\n  valueSchema: new OptionalSchema(new ArraySchema(AppResourceRecord.encodingSchema))\n}, {\n  key: 'AssetResources',\n  // assetResources\n  valueSchema: new OptionalSchema(new ArraySchema(AssetResourceRecord.encodingSchema))\n}]));\n/**\n * A KvValueDelta shows how the Data associated with a key in the kvstore has changed.\n */\nexport class KvValueDelta {\n  constructor(params) {\n    this.data = params.data;\n    this.oldData = params.oldData;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return KvValueDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Data', this.data], ['OldData', this.oldData]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded KvValueDelta: ${data}`);\n    }\n    return new KvValueDelta({\n      data: data.get('Data'),\n      oldData: data.get('OldData')\n    });\n  }\n}\nKvValueDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Data',\n  valueSchema: new OptionalSchema(new ByteArraySchema())\n}, {\n  key: 'OldData',\n  valueSchema: new OptionalSchema(new ByteArraySchema())\n}]));\n/**\n * IncludedTransactions defines the transactions included in a block, their index and last valid round.\n */\nexport class IncludedTransactions {\n  constructor(params) {\n    this.lastValid = params.lastValid;\n    this.intra = params.intra;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return IncludedTransactions.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['LastValid', this.lastValid], ['Intra', this.intra]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded IncludedTransactions: ${data}`);\n    }\n    return new IncludedTransactions({\n      lastValid: data.get('LastValid'),\n      intra: Number(data.get('Intra'))\n    });\n  }\n}\nIncludedTransactions.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'LastValid',\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'Intra',\n  valueSchema: new Uint64Schema()\n}]));\n/**\n * ModifiedCreatable represents a change to a single creatable state\n */\nexport class ModifiedCreatable {\n  constructor(params) {\n    this.creatableType = params.creatableType;\n    this.created = params.created;\n    this.creator = params.creator;\n    this.ndeltas = params.ndeltas;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ModifiedCreatable.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Ctype', this.creatableType], ['Created', this.created], ['Creator', this.creator], ['Ndeltas', this.ndeltas]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ModifiedCreatable: ${data}`);\n    }\n    return new ModifiedCreatable({\n      creatableType: Number(data.get('Ctype')),\n      created: data.get('Created'),\n      creator: data.get('Creator'),\n      ndeltas: Number(data.get('Ndeltas'))\n    });\n  }\n}\nModifiedCreatable.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Ctype',\n  // creatableType\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'Created',\n  // created\n  valueSchema: new BooleanSchema()\n}, {\n  key: 'Creator',\n  // creator\n  valueSchema: new AddressSchema()\n}, {\n  key: 'Ndeltas',\n  // ndeltas\n  valueSchema: new Uint64Schema()\n}]));\n/**\n * AlgoCount represents a total of algos of a certain class of accounts (split up by their Status value).\n */\nexport class AlgoCount {\n  constructor(params) {\n    this.money = params.money;\n    this.rewardUnits = params.rewardUnits;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AlgoCount.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['mon', this.money], ['rwd', this.rewardUnits]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AlgoCount: ${data}`);\n    }\n    return new AlgoCount({\n      money: data.get('mon'),\n      rewardUnits: data.get('rwd')\n    });\n  }\n}\nAlgoCount.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'mon',\n  valueSchema: new Uint64Schema()\n},\n// money\n{\n  key: 'rwd',\n  valueSchema: new Uint64Schema()\n} // rewardUnits\n]));\n/**\n * AccountTotals represents the totals of algos in the system grouped by different account status values.\n */\nexport class AccountTotals {\n  constructor(params) {\n    this.online = params.online;\n    this.offline = params.offline;\n    this.notParticipating = params.notParticipating;\n    this.rewardsLevel = params.rewardsLevel;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountTotals.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['online', this.online.toEncodingData()], ['offline', this.offline.toEncodingData()], ['notpart', this.notParticipating.toEncodingData()], ['rwdlvl', this.rewardsLevel]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountTotals: ${data}`);\n    }\n    return new AccountTotals({\n      online: AlgoCount.fromEncodingData(data.get('online')),\n      offline: AlgoCount.fromEncodingData(data.get('offline')),\n      notParticipating: AlgoCount.fromEncodingData(data.get('notpart')),\n      rewardsLevel: data.get('rwdlvl')\n    });\n  }\n}\nAccountTotals.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'online',\n  valueSchema: AlgoCount.encodingSchema\n},\n// online\n{\n  key: 'offline',\n  valueSchema: AlgoCount.encodingSchema\n},\n// offline\n{\n  key: 'notpart',\n  valueSchema: AlgoCount.encodingSchema\n},\n// notParticipating\n{\n  key: 'rwdlvl',\n  valueSchema: new Uint64Schema()\n} // rewardsLevel\n]));\n/**\n * LedgerStateDelta describes the delta between a given round to the previous round\n */\nexport class LedgerStateDelta {\n  constructor(params) {\n    this.accounts = params.accounts;\n    this.kvMods = params.kvMods;\n    this.txids = params.txids;\n    this.txleases = params.txleases;\n    this.creatables = params.creatables;\n    this.blockHeader = params.blockHeader;\n    this.stateProofNext = params.stateProofNext;\n    this.prevTimestamp = params.prevTimestamp;\n    this.totals = params.totals;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return LedgerStateDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['Accts', this.accounts.toEncodingData()], ['KvMods', this.kvMods.size === 0 ? undefined : convertMap(this.kvMods, (key, value) => [key, value.toEncodingData()])], ['Txids', convertMap(this.txids, (key, value) => [key, value.toEncodingData()])], ['Txleases', this.txleases.toEncodingData()], ['Creatables', this.creatables.size === 0 ? undefined : convertMap(this.creatables, (key, value) => [key, value.toEncodingData()])], ['Hdr', this.blockHeader.toEncodingData()], ['StateProofNext', this.stateProofNext], ['PrevTimestamp', this.prevTimestamp], ['Totals', this.totals.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded LedgerStateDelta: ${data}`);\n    }\n    return new LedgerStateDelta({\n      accounts: AccountDeltas.fromEncodingData(data.get('Accts')),\n      kvMods: convertMap(data.get('KvMods') ?? new Map(), (key, value) => [key, KvValueDelta.fromEncodingData(value)]),\n      txids: convertMap(data.get('Txids'), (key, value) => [key, IncludedTransactions.fromEncodingData(value)]),\n      txleases: UntypedValue.fromEncodingData(data.get('Txleases')),\n      creatables: convertMap(data.get('Creatables') ?? new Map(), (key, value) => [key, ModifiedCreatable.fromEncodingData(value)]),\n      blockHeader: BlockHeader.fromEncodingData(data.get('Hdr')),\n      stateProofNext: data.get('StateProofNext'),\n      prevTimestamp: data.get('PrevTimestamp'),\n      totals: AccountTotals.fromEncodingData(data.get('Totals'))\n    });\n  }\n}\nLedgerStateDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'Accts',\n  // accounts\n  valueSchema: AccountDeltas.encodingSchema\n}, {\n  key: 'KvMods',\n  // kvMods\n  valueSchema: new OptionalSchema(new SpecialCaseBinaryStringMapSchema(KvValueDelta.encodingSchema))\n}, {\n  key: 'Txids',\n  // txids\n  valueSchema: new ByteArrayMapSchema(IncludedTransactions.encodingSchema)\n}, {\n  key: 'Txleases',\n  // txleases\n  // Note: because txleases is currently just an UntypedSchema and we are expected to decode\n  // null values for this field, we use OptionalSchema to coerce null values to undefined so\n  // that the values can be properly omitted during encoding.\n  valueSchema: new OptionalSchema(new UntypedSchema())\n}, {\n  key: 'Creatables',\n  // creatables\n  valueSchema: new OptionalSchema(new Uint64MapSchema(ModifiedCreatable.encodingSchema))\n}, {\n  key: 'Hdr',\n  // blockHeader\n  valueSchema: BlockHeader.encodingSchema\n}, {\n  key: 'StateProofNext',\n  // stateProofNext\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'PrevTimestamp',\n  // prevTimestamp\n  valueSchema: new Uint64Schema()\n}, {\n  key: 'Totals',\n  // totals\n  valueSchema: AccountTotals.encodingSchema\n}]));","map":{"version":3,"names":["NamedMapSchema","Uint64MapSchema","ByteArrayMapSchema","SpecialCaseBinaryStringMapSchema","SpecialCaseBinaryStringSchema","ArraySchema","BooleanSchema","Uint64Schema","AddressSchema","ByteArraySchema","FixedLengthByteArraySchema","OptionalSchema","UntypedSchema","allOmitEmpty","convertMap","combineMaps","BlockHeader","UntypedValue","TealValue","constructor","params","type","bytes","uint","getEncodingSchema","encodingSchema","toEncodingData","Map","fromEncodingData","data","Error","Number","get","key","valueSchema","StateSchema","numUints","numByteSlices","AppParams","approvalProgram","clearStateProgram","globalState","localStateSchema","globalStateSchema","extraProgramPages","k","v","AppLocalState","schema","keyValue","AppLocalStateDelta","localState","deleted","undefined","AppParamsDelta","AppResourceRecord","id","address","state","AssetHolding","amount","frozen","AssetHoldingDelta","holding","AssetParams","total","decimals","defaultFrozen","unitName","assetName","url","metadataHash","manager","reserve","freeze","clawback","AssetParamsDelta","AssetResourceRecord","VotingData","voteID","selectionID","stateProofID","voteFirstValid","voteLastValid","voteKeyDilution","AccountBaseData","status","microAlgos","rewardsBase","rewardedMicroAlgos","authAddr","incentiveEligible","totalAppSchema","totalExtraAppPages","totalAppParams","totalAppLocalStates","totalAssetParams","totalAssets","totalBoxes","totalBoxBytes","lastProposed","lastHeartbeat","AccountData","accountBaseData","votingData","embedded","BalanceRecord","addr","accountData","AccountDeltas","accounts","appResources","assetResources","map","account","length","appResource","assetResource","KvValueDelta","oldData","IncludedTransactions","lastValid","intra","ModifiedCreatable","creatableType","created","creator","ndeltas","AlgoCount","money","rewardUnits","AccountTotals","online","offline","notParticipating","rewardsLevel","LedgerStateDelta","kvMods","txids","txleases","creatables","blockHeader","stateProofNext","prevTimestamp","totals","size","value"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\types\\statedelta.ts"],"sourcesContent":["import { Encodable, Schema } from '../encoding/encoding.js';\nimport {\n  NamedMapSchema,\n  Uint64MapSchema,\n  ByteArrayMapSchema,\n  SpecialCaseBinaryStringMapSchema,\n  SpecialCaseBinaryStringSchema,\n  ArraySchema,\n  BooleanSchema,\n  Uint64Schema,\n  AddressSchema,\n  ByteArraySchema,\n  FixedLengthByteArraySchema,\n  OptionalSchema,\n  UntypedSchema,\n  allOmitEmpty,\n  convertMap,\n  combineMaps,\n} from '../encoding/schema/index.js';\nimport { Address } from '../encoding/address.js';\nimport { BlockHeader } from './block.js';\nimport { UntypedValue } from '../client/v2/untypedmodel.js';\n\n// TealValue contains type information and a value, representing a value in a TEAL program\nexport class TealValue implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      { key: 'tt', valueSchema: new Uint64Schema() }, // type\n      {\n        key: 'tb', // bytes\n        valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema()),\n      },\n      { key: 'ui', valueSchema: new OptionalSchema(new Uint64Schema()) }, // uint\n    ])\n  );\n\n  /**\n   * Type determines the type of the value.\n   * * 1 represents the type of a byte slice in a TEAL program\n   * * 2 represents the type of an unsigned integer in a TEAL program\n   */\n  public type: number;\n  public bytes?: Uint8Array;\n  public uint?: bigint;\n\n  constructor(params: { type: number; bytes?: Uint8Array; uint?: bigint }) {\n    this.type = params.type;\n    this.bytes = params.bytes;\n    this.uint = params.uint;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return TealValue.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['tt', this.type],\n      ['tb', this.bytes],\n      ['ui', this.uint],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): TealValue {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TealValue: ${data}`);\n    }\n    return new TealValue({\n      type: Number(data.get('tt')),\n      bytes: data.get('tb'),\n      uint: data.get('ui'),\n    });\n  }\n}\n\n/**\n * StateSchema sets maximums on the number of each type that may be stored\n */\nexport class StateSchema implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'nui', // numUints\n        valueSchema: new Uint64Schema(),\n      },\n      {\n        key: 'nbs', // numByteSlices\n        valueSchema: new Uint64Schema(),\n      },\n    ])\n  );\n\n  public numUints: number;\n  public numByteSlices: number;\n\n  public constructor(params: { numUints: number; numByteSlices: number }) {\n    this.numUints = params.numUints;\n    this.numByteSlices = params.numByteSlices;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return StateSchema.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['nui', this.numUints],\n      ['nbs', this.numByteSlices],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): StateSchema {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateSchema: ${data}`);\n    }\n    return new StateSchema({\n      numUints: Number(data.get('nui')),\n      numByteSlices: Number(data.get('nbs')),\n    });\n  }\n}\n\n/**\n * AppParams stores the global information associated with an application\n */\nexport class AppParams implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      { key: 'approv', valueSchema: new ByteArraySchema() }, // approvalProgram\n      { key: 'clearp', valueSchema: new ByteArraySchema() }, // alearStateProgram\n      {\n        key: 'gs',\n        valueSchema: new SpecialCaseBinaryStringMapSchema(\n          TealValue.encodingSchema\n        ),\n      }, // globalState\n      { key: 'lsch', valueSchema: StateSchema.encodingSchema }, // localStateSchema\n      { key: 'gsch', valueSchema: StateSchema.encodingSchema }, // globalStateSchema\n      { key: 'epp', valueSchema: new Uint64Schema() }, // extraProgramPages\n    ])\n  );\n\n  public approvalProgram: Uint8Array;\n  public clearStateProgram: Uint8Array;\n  public globalState: Map<Uint8Array, TealValue>;\n  public localStateSchema: StateSchema;\n  public globalStateSchema: StateSchema;\n  public extraProgramPages: number;\n\n  constructor(params: {\n    approvalProgram: Uint8Array;\n    clearStateProgram: Uint8Array;\n    globalState: Map<Uint8Array, TealValue>;\n    localStateSchema: StateSchema;\n    globalStateSchema: StateSchema;\n    extraProgramPages: number;\n  }) {\n    this.approvalProgram = params.approvalProgram;\n    this.clearStateProgram = params.clearStateProgram;\n    this.globalState = params.globalState;\n    this.localStateSchema = params.localStateSchema;\n    this.globalStateSchema = params.globalStateSchema;\n    this.extraProgramPages = params.extraProgramPages;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AppParams.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['approv', this.approvalProgram],\n      ['clearp', this.clearStateProgram],\n      ['gs', convertMap(this.globalState, (k, v) => [k, v.toEncodingData()])],\n      ['lsch', this.localStateSchema.toEncodingData()],\n      ['gsch', this.globalStateSchema.toEncodingData()],\n      ['epp', this.extraProgramPages],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppParams: ${data}`);\n    }\n    return new AppParams({\n      approvalProgram: data.get('approv'),\n      clearStateProgram: data.get('clearp'),\n      globalState: convertMap(\n        data.get('gs') as Map<Uint8Array, unknown>,\n        (k, v) => [k, TealValue.fromEncodingData(v)]\n      ),\n      localStateSchema: StateSchema.fromEncodingData(data.get('lsch')),\n      globalStateSchema: StateSchema.fromEncodingData(data.get('gsch')),\n      extraProgramPages: Number(data.get('epp')),\n    });\n  }\n}\n\n/**\n * AppLocalState stores the LocalState associated with an application.\n */\nexport class AppLocalState implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      { key: 'hsch', valueSchema: StateSchema.encodingSchema }, // schema\n      {\n        key: 'tkv', // keyValue\n        valueSchema: new SpecialCaseBinaryStringMapSchema(\n          TealValue.encodingSchema\n        ),\n      },\n    ])\n  );\n\n  public schema: StateSchema;\n  public keyValue: Map<Uint8Array, TealValue>;\n\n  constructor(params: {\n    schema: StateSchema;\n    keyValue: Map<Uint8Array, TealValue>;\n  }) {\n    this.schema = params.schema;\n    this.keyValue = params.keyValue;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AppLocalState.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['hsch', this.schema.toEncodingData()],\n      ['tkv', convertMap(this.keyValue, (k, v) => [k, v.toEncodingData()])],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AppLocalState {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppLocalState: ${data}`);\n    }\n    return new AppLocalState({\n      schema: StateSchema.fromEncodingData(data.get('hsch')),\n      keyValue: convertMap(\n        data.get('tkv') as Map<Uint8Array, unknown>,\n        (k, v) => [k, TealValue.fromEncodingData(v)]\n      ),\n    });\n  }\n}\n\n/**\n * AppLocalStateDelta tracks a changed AppLocalState, and whether it was deleted\n */\nexport class AppLocalStateDelta implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'LocalState', // localState\n        valueSchema: new OptionalSchema(AppLocalState.encodingSchema),\n      },\n      { key: 'Deleted', valueSchema: new BooleanSchema() }, // deleted\n    ])\n  );\n\n  public localState?: AppLocalState;\n  public deleted: boolean;\n\n  constructor(params: { localState?: AppLocalState; deleted: boolean }) {\n    this.localState = params.localState;\n    this.deleted = params.deleted;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AppLocalStateDelta.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'LocalState',\n        this.localState ? this.localState.toEncodingData() : undefined,\n      ],\n      ['Deleted', this.deleted],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AppLocalStateDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppLocalStateDelta: ${data}`);\n    }\n    return new AppLocalStateDelta({\n      localState: data.get('LocalState')\n        ? AppLocalState.fromEncodingData(data.get('LocalState'))\n        : undefined,\n      deleted: data.get('Deleted'),\n    });\n  }\n}\n\n/**\n * AppParamsDelta tracks a changed AppParams, and whether it was deleted\n */\nexport class AppParamsDelta implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'Params', // params\n        valueSchema: new OptionalSchema(AppParams.encodingSchema),\n      },\n      { key: 'Deleted', valueSchema: new BooleanSchema() }, // deleted\n    ])\n  );\n\n  public params?: AppParams;\n  public deleted: boolean;\n\n  constructor(params: { params?: AppParams; deleted: boolean }) {\n    this.params = params.params;\n    this.deleted = params.deleted;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AppParamsDelta.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Params', this.params ? this.params.toEncodingData() : undefined],\n      ['Deleted', this.deleted],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AppParamsDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppParamsDelta: ${data}`);\n    }\n    return new AppParamsDelta({\n      params: data.get('Params')\n        ? AppParams.fromEncodingData(data.get('Params'))\n        : undefined,\n      deleted: data.get('Deleted'),\n    });\n  }\n}\n\n/**\n * AppResourceRecord represents AppParams and AppLocalState in deltas\n */\nexport class AppResourceRecord implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      { key: 'Aidx', valueSchema: new Uint64Schema() }, // id\n      { key: 'Addr', valueSchema: new AddressSchema() }, // address\n      {\n        key: 'Params', // params\n        valueSchema: AppParamsDelta.encodingSchema,\n      },\n      {\n        key: 'State', // state\n        valueSchema: AppLocalStateDelta.encodingSchema,\n      },\n    ])\n  );\n\n  public id: bigint;\n  public address: Address;\n  public params: AppParamsDelta;\n  public state: AppLocalStateDelta;\n\n  constructor(params: {\n    id: bigint;\n    address: Address;\n    params: AppParamsDelta;\n    state: AppLocalStateDelta;\n  }) {\n    this.id = params.id;\n    this.address = params.address;\n    this.params = params.params;\n    this.state = params.state;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AppResourceRecord.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Aidx', this.id],\n      ['Addr', this.address],\n      ['Params', this.params.toEncodingData()],\n      ['State', this.state.toEncodingData()],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AppResourceRecord {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AppResourceRecord: ${data}`);\n    }\n    return new AppResourceRecord({\n      id: data.get('Aidx'),\n      address: data.get('Addr'),\n      params: AppParamsDelta.fromEncodingData(data.get('Params')),\n      state: AppLocalStateDelta.fromEncodingData(data.get('State')),\n    });\n  }\n}\n\n/**\n * AssetHolding describes an asset held by an account.\n */\nexport class AssetHolding implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      { key: 'a', valueSchema: new Uint64Schema() }, // amount\n      { key: 'f', valueSchema: new BooleanSchema() }, // frozen\n    ])\n  );\n\n  public amount: bigint;\n  public frozen: boolean;\n\n  constructor(params: { amount: bigint; frozen: boolean }) {\n    this.amount = params.amount;\n    this.frozen = params.frozen;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AssetHolding.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['a', this.amount],\n      ['f', this.frozen],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AssetHolding {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHolding: ${data}`);\n    }\n    return new AssetHolding({\n      amount: data.get('a'),\n      frozen: data.get('f'),\n    });\n  }\n}\n\n/**\n * AssetHoldingDelta records a changed AssetHolding, and whether it was deleted\n */\nexport class AssetHoldingDelta implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'Holding', // holding\n        valueSchema: new OptionalSchema(AssetHolding.encodingSchema),\n      },\n      { key: 'Deleted', valueSchema: new BooleanSchema() }, // deleted\n    ])\n  );\n\n  public holding?: AssetHolding;\n  public deleted: boolean;\n\n  constructor(params: { holding?: AssetHolding; deleted: boolean }) {\n    this.holding = params.holding;\n    this.deleted = params.deleted;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AssetHoldingDelta.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Holding', this.holding ? this.holding.toEncodingData() : undefined],\n      ['Deleted', this.deleted],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AssetHoldingDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHoldingDelta: ${data}`);\n    }\n    return new AssetHoldingDelta({\n      holding: data.get('Holding')\n        ? AssetHolding.fromEncodingData(data.get('Holding'))\n        : undefined,\n      deleted: data.get('Deleted'),\n    });\n  }\n}\n\n/**\n * AssetParams describes the parameters of an asset.\n */\nexport class AssetParams implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      { key: 't', valueSchema: new Uint64Schema() }, // total\n      { key: 'dc', valueSchema: new Uint64Schema() }, // decimals\n      { key: 'df', valueSchema: new BooleanSchema() }, // defaultFrozen\n      {\n        key: 'un', // unitName\n        valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema()),\n      },\n      {\n        key: 'an', // assetName\n        valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema()),\n      },\n      {\n        key: 'au', // url\n        valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema()),\n      },\n      { key: 'am', valueSchema: new FixedLengthByteArraySchema(32) }, // metadataHash\n      { key: 'm', valueSchema: new OptionalSchema(new AddressSchema()) }, // manager\n      { key: 'r', valueSchema: new OptionalSchema(new AddressSchema()) }, // reserve\n      { key: 'f', valueSchema: new OptionalSchema(new AddressSchema()) }, // freeze\n      { key: 'c', valueSchema: new OptionalSchema(new AddressSchema()) }, // clawback\n    ])\n  );\n\n  /**\n   * Total specifies the total number of units of this asset created.\n   */\n  public total: bigint;\n\n  /**\n   * Decimals specifies the number of digits to display after the decimal place when displaying this asset.\n   * A value of 0 represents an asset that is not divisible, a value of 1 represents an asset divisible into tenths, and so on.\n   * This value must be between 0 and 19 (inclusive).\n   */\n  public decimals: number;\n\n  /**\n   * DefaultFrozen specifies whether slots for this asset in user accounts are frozen by default or not.\n   */\n  public defaultFrozen: boolean;\n\n  /**\n   * UnitName specifies a hint for the name of a unit of this asset.\n   */\n  public unitName?: Uint8Array;\n\n  /**\n   * AssetName specifies a hint for the name of the asset.\n   */\n  public assetName?: Uint8Array;\n\n  /**\n   * URL specifies a URL where more information about the asset can be retrieved.\n   */\n  public url?: Uint8Array;\n\n  /**\n   * MetadataHash specifies a commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   */\n  public metadataHash?: Uint8Array;\n\n  /**\n   * Manager specifies an account that is allowed to change the non-zero addresses in this AssetParams.\n   */\n  public manager?: Address;\n\n  /**\n   * Reserve specifies an account whose holdings of this asset should be reported as \"not minted\".\n   */\n  public reserve?: Address;\n\n  /**\n   * Freeze specifies an account that is allowed to change the frozen state of holdings of this asset.\n   */\n  public freeze?: Address;\n\n  /**\n   * Clawback specifies an account that is allowed to take units of this asset from any account.\n   */\n  public clawback?: Address;\n\n  public constructor(params: {\n    total: bigint;\n    decimals: number;\n    defaultFrozen: boolean;\n    unitName?: Uint8Array;\n    assetName?: Uint8Array;\n    url?: Uint8Array;\n    metadataHash?: Uint8Array;\n    manager?: Address;\n    reserve?: Address;\n    freeze?: Address;\n    clawback?: Address;\n  }) {\n    this.total = params.total;\n    this.decimals = params.decimals;\n    this.defaultFrozen = params.defaultFrozen;\n    this.unitName = params.unitName;\n    this.assetName = params.assetName;\n    this.url = params.url;\n    this.metadataHash = params.metadataHash;\n    this.manager = params.manager;\n    this.reserve = params.reserve;\n    this.freeze = params.freeze;\n    this.clawback = params.clawback;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AssetParams.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['t', this.total],\n      ['dc', this.decimals],\n      ['df', this.defaultFrozen],\n      ['un', this.unitName],\n      ['an', this.assetName],\n      ['au', this.url],\n      ['am', this.metadataHash],\n      ['m', this.manager],\n      ['r', this.reserve],\n      ['f', this.freeze],\n      ['c', this.clawback],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AssetParams {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetParams: ${data}`);\n    }\n    return new AssetParams({\n      total: data.get('t'),\n      decimals: data.get('dc'),\n      defaultFrozen: data.get('df'),\n      unitName: data.get('un'),\n      assetName: data.get('an'),\n      url: data.get('au'),\n      metadataHash: data.get('am'),\n      manager: data.get('m'),\n      reserve: data.get('r'),\n      freeze: data.get('f'),\n      clawback: data.get('c'),\n    });\n  }\n}\n\n/**\n * AssetParamsDelta tracks a changed AssetParams, and whether it was deleted\n */\nexport class AssetParamsDelta implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'Params', // params\n        valueSchema: new OptionalSchema(AssetParams.encodingSchema),\n      },\n      { key: 'Deleted', valueSchema: new BooleanSchema() }, // deleted\n    ])\n  );\n\n  public params?: AssetParams;\n  public deleted: boolean;\n\n  constructor(params: { params?: AssetParams; deleted: boolean }) {\n    this.params = params.params;\n    this.deleted = params.deleted;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AssetParamsDelta.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Params', this.params ? this.params.toEncodingData() : undefined],\n      ['Deleted', this.deleted],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AssetParamsDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetParamsDelta: ${data}`);\n    }\n    return new AssetParamsDelta({\n      params: data.get('Params')\n        ? AssetParams.fromEncodingData(data.get('Params'))\n        : undefined,\n      deleted: data.get('Deleted'),\n    });\n  }\n}\n\n/**\n * AssetResourceRecord represents AssetParams and AssetHolding in deltas\n */\nexport class AssetResourceRecord implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      { key: 'Aidx', valueSchema: new Uint64Schema() }, // id\n      { key: 'Addr', valueSchema: new AddressSchema() }, // address\n      {\n        key: 'Params', // params\n        valueSchema: AssetParamsDelta.encodingSchema,\n      },\n      {\n        key: 'Holding', // holding\n        valueSchema: AssetHoldingDelta.encodingSchema,\n      },\n    ])\n  );\n\n  public id: bigint;\n  public address: Address;\n  public params: AssetParamsDelta;\n  public holding: AssetHoldingDelta;\n\n  constructor(params: {\n    id: bigint;\n    address: Address;\n    params: AssetParamsDelta;\n    holding: AssetHoldingDelta;\n  }) {\n    this.id = params.id;\n    this.address = params.address;\n    this.params = params.params;\n    this.holding = params.holding;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AssetResourceRecord.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Aidx', this.id],\n      ['Addr', this.address],\n      ['Params', this.params.toEncodingData()],\n      ['Holding', this.holding.toEncodingData()],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AssetResourceRecord {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetResourceRecord: ${data}`);\n    }\n    return new AssetResourceRecord({\n      id: data.get('Aidx'),\n      address: data.get('Addr'),\n      params: AssetParamsDelta.fromEncodingData(data.get('Params')),\n      holding: AssetHoldingDelta.fromEncodingData(data.get('Holding')),\n    });\n  }\n}\n\n/**\n * VotingData holds participation information\n */\nexport class VotingData implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'VoteID', // voteID\n        valueSchema: new FixedLengthByteArraySchema(32),\n      },\n      {\n        key: 'SelectionID', // selectionID\n        valueSchema: new FixedLengthByteArraySchema(32),\n      },\n      {\n        key: 'StateProofID', // stateProofID\n        valueSchema: new FixedLengthByteArraySchema(64),\n      },\n      {\n        key: 'VoteFirstValid', // voteFirstValid\n        valueSchema: new Uint64Schema(),\n      },\n      {\n        key: 'VoteLastValid', // voteLastValid\n        valueSchema: new Uint64Schema(),\n      },\n      {\n        key: 'VoteKeyDilution', // voteKeyDilution\n        valueSchema: new Uint64Schema(),\n      },\n    ])\n  );\n\n  public voteID: Uint8Array;\n  public selectionID: Uint8Array;\n  public stateProofID: Uint8Array;\n\n  public voteFirstValid: bigint;\n  public voteLastValid: bigint;\n  public voteKeyDilution: bigint;\n\n  constructor(params: {\n    voteID: Uint8Array;\n    selectionID: Uint8Array;\n    stateProofID: Uint8Array;\n    voteFirstValid: bigint;\n    voteLastValid: bigint;\n    voteKeyDilution: bigint;\n  }) {\n    this.voteID = params.voteID;\n    this.selectionID = params.selectionID;\n    this.stateProofID = params.stateProofID;\n    this.voteFirstValid = params.voteFirstValid;\n    this.voteLastValid = params.voteLastValid;\n    this.voteKeyDilution = params.voteKeyDilution;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return VotingData.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['VoteID', this.voteID],\n      ['SelectionID', this.selectionID],\n      ['StateProofID', this.stateProofID],\n      ['VoteFirstValid', this.voteFirstValid],\n      ['VoteLastValid', this.voteLastValid],\n      ['VoteKeyDilution', this.voteKeyDilution],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): VotingData {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded VotingData: ${data}`);\n    }\n    return new VotingData({\n      voteID: data.get('VoteID'),\n      selectionID: data.get('SelectionID'),\n      stateProofID: data.get('StateProofID'),\n      voteFirstValid: data.get('VoteFirstValid'),\n      voteLastValid: data.get('VoteLastValid'),\n      voteKeyDilution: data.get('VoteKeyDilution'),\n    });\n  }\n}\n\n/**\n * AccountBaseData contains base account info like balance, status and total number of resources\n */\nexport class AccountBaseData implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      { key: 'Status', valueSchema: new Uint64Schema() }, // status\n      { key: 'MicroAlgos', valueSchema: new Uint64Schema() }, // microAlgos\n      { key: 'RewardsBase', valueSchema: new Uint64Schema() }, // rewardsBase\n      {\n        key: 'RewardedMicroAlgos', // rewardedMicroAlgos\n        valueSchema: new Uint64Schema(),\n      },\n      { key: 'AuthAddr', valueSchema: new AddressSchema() }, // authAddr\n      {\n        key: 'IncentiveEligible', // incentiveEligible\n        valueSchema: new BooleanSchema(),\n      },\n      {\n        key: 'TotalAppSchema', // totalAppSchema\n        valueSchema: StateSchema.encodingSchema,\n      },\n      {\n        key: 'TotalExtraAppPages', // totalExtraAppPages\n        valueSchema: new Uint64Schema(),\n      },\n      {\n        key: 'TotalAppParams', // totalAppParams\n        valueSchema: new Uint64Schema(),\n      },\n      {\n        key: 'TotalAppLocalStates', // totalAppLocalStates\n        valueSchema: new Uint64Schema(),\n      },\n      {\n        key: 'TotalAssetParams', // totalAssetParams\n        valueSchema: new Uint64Schema(),\n      },\n      { key: 'TotalAssets', valueSchema: new Uint64Schema() }, // totalAssets\n      { key: 'TotalBoxes', valueSchema: new Uint64Schema() }, // totalBoxes\n      {\n        key: 'TotalBoxBytes', // totalBoxBytes\n        valueSchema: new Uint64Schema(),\n      },\n      { key: 'LastProposed', valueSchema: new Uint64Schema() }, // lastProposed\n      {\n        key: 'LastHeartbeat', // lastHeartbeat\n        valueSchema: new Uint64Schema(),\n      },\n    ])\n  );\n\n  /**\n   * Account status. Values are:\n   * * 0: Offline\n   * * 1: Online\n   * * 2: NotParticipating\n   */\n  public status: number;\n  public microAlgos: bigint;\n  public rewardsBase: bigint;\n  public rewardedMicroAlgos: bigint;\n  public authAddr: Address;\n  public incentiveEligible: boolean;\n\n  /**\n   * Totals across created globals, and opted in locals.\n   */\n  public totalAppSchema: StateSchema;\n  /**\n   * Total number of extra pages across all created apps\n   */\n  public totalExtraAppPages: number;\n  /**\n   * Total number of apps this account has created\n   */\n  public totalAppParams: bigint;\n  /**\n   * Total number of apps this account is opted into.\n   */\n  public totalAppLocalStates: bigint;\n  /**\n   * Total number of assets created by this account\n   */\n  public totalAssetParams: bigint;\n  /**\n   * Total of asset creations and optins (i.e. number of holdings)\n   */\n  public totalAssets: bigint;\n  /**\n   * Total number of boxes associated to this account\n   */\n  public totalBoxes: bigint;\n  /**\n   * Total bytes for this account's boxes. keys _and_ values count\n   */\n  public totalBoxBytes: bigint;\n\n  /**\n   * The last round that this account proposed the winning block.\n   */\n  public lastProposed: bigint;\n  /**\n   * The last round that this account sent a heartbeat to show it was online.\n   */\n  public lastHeartbeat: bigint;\n\n  public constructor(params: {\n    status: number;\n    microAlgos: bigint;\n    rewardsBase: bigint;\n    rewardedMicroAlgos: bigint;\n    authAddr: Address;\n    incentiveEligible: boolean;\n    totalAppSchema: StateSchema;\n    totalExtraAppPages: number;\n    totalAppParams: bigint;\n    totalAppLocalStates: bigint;\n    totalAssetParams: bigint;\n    totalAssets: bigint;\n    totalBoxes: bigint;\n    totalBoxBytes: bigint;\n    lastProposed: bigint;\n    lastHeartbeat: bigint;\n  }) {\n    this.status = params.status;\n    this.microAlgos = params.microAlgos;\n    this.rewardsBase = params.rewardsBase;\n    this.rewardedMicroAlgos = params.rewardedMicroAlgos;\n    this.authAddr = params.authAddr;\n    this.incentiveEligible = params.incentiveEligible;\n    this.totalAppSchema = params.totalAppSchema;\n    this.totalExtraAppPages = params.totalExtraAppPages;\n    this.totalAppParams = params.totalAppParams;\n    this.totalAppLocalStates = params.totalAppLocalStates;\n    this.totalAssetParams = params.totalAssetParams;\n    this.totalAssets = params.totalAssets;\n    this.totalBoxes = params.totalBoxes;\n    this.totalBoxBytes = params.totalBoxBytes;\n    this.lastProposed = params.lastProposed;\n    this.lastHeartbeat = params.lastHeartbeat;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AccountBaseData.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Status', this.status],\n      ['MicroAlgos', this.microAlgos],\n      ['RewardsBase', this.rewardsBase],\n      ['RewardedMicroAlgos', this.rewardedMicroAlgos],\n      ['AuthAddr', this.authAddr],\n      ['IncentiveEligible', this.incentiveEligible],\n      ['TotalAppSchema', this.totalAppSchema.toEncodingData()],\n      ['TotalExtraAppPages', this.totalExtraAppPages],\n      ['TotalAppParams', this.totalAppParams],\n      ['TotalAppLocalStates', this.totalAppLocalStates],\n      ['TotalAssetParams', this.totalAssetParams],\n      ['TotalAssets', this.totalAssets],\n      ['TotalBoxes', this.totalBoxes],\n      ['TotalBoxBytes', this.totalBoxBytes],\n      ['LastProposed', this.lastProposed],\n      ['LastHeartbeat', this.lastHeartbeat],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AccountBaseData {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountBaseData: ${data}`);\n    }\n    return new AccountBaseData({\n      status: Number(data.get('Status')),\n      microAlgos: data.get('MicroAlgos'),\n      rewardsBase: data.get('RewardsBase'),\n      rewardedMicroAlgos: data.get('RewardedMicroAlgos'),\n      authAddr: data.get('AuthAddr'),\n      incentiveEligible: data.get('IncentiveEligible'),\n      totalAppSchema: StateSchema.fromEncodingData(data.get('TotalAppSchema')),\n      totalExtraAppPages: Number(data.get('TotalExtraAppPages')),\n      totalAppParams: data.get('TotalAppParams'),\n      totalAppLocalStates: data.get('TotalAppLocalStates'),\n      totalAssetParams: data.get('TotalAssetParams'),\n      totalAssets: data.get('TotalAssets'),\n      totalBoxes: data.get('TotalBoxes'),\n      totalBoxBytes: data.get('TotalBoxBytes'),\n      lastProposed: data.get('LastProposed'),\n      lastHeartbeat: data.get('LastHeartbeat'),\n    });\n  }\n}\n\n/**\n * AccountData provides per-account data\n */\nexport class AccountData implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: '',\n        valueSchema: AccountBaseData.encodingSchema,\n        embedded: true,\n      },\n      {\n        key: '',\n        valueSchema: VotingData.encodingSchema,\n        embedded: true,\n      },\n    ])\n  );\n\n  public accountBaseData: AccountBaseData;\n  public votingData: VotingData;\n\n  constructor(params: {\n    accountBaseData: AccountBaseData;\n    votingData: VotingData;\n  }) {\n    this.accountBaseData = params.accountBaseData;\n    this.votingData = params.votingData;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AccountData.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return combineMaps(\n      this.accountBaseData.toEncodingData(),\n      this.votingData.toEncodingData()\n    );\n  }\n\n  public static fromEncodingData(data: unknown): AccountData {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountData: ${data}`);\n    }\n    return new AccountData({\n      accountBaseData: AccountBaseData.fromEncodingData(data),\n      votingData: VotingData.fromEncodingData(data),\n    });\n  }\n}\n\nexport class BalanceRecord implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'Addr',\n        valueSchema: new AddressSchema(),\n      },\n      {\n        key: '',\n        valueSchema: AccountData.encodingSchema,\n        embedded: true,\n      },\n    ])\n  );\n\n  public addr: Address;\n  public accountData: AccountData;\n\n  constructor(params: { addr: Address; accountData: AccountData }) {\n    this.addr = params.addr;\n    this.accountData = params.accountData;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return BalanceRecord.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return combineMaps(\n      new Map<string, unknown>([['Addr', this.addr]]),\n      this.accountData.toEncodingData()\n    );\n  }\n\n  public static fromEncodingData(data: unknown): BalanceRecord {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BalanceRecord: ${data}`);\n    }\n    return new BalanceRecord({\n      addr: data.get('Addr'),\n      accountData: AccountData.fromEncodingData(data),\n    });\n  }\n}\n\nexport class AccountDeltas implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'Accts', // accounts\n        valueSchema: new ArraySchema(BalanceRecord.encodingSchema),\n      },\n      {\n        key: 'AppResources', // appResources\n        valueSchema: new OptionalSchema(\n          new ArraySchema(AppResourceRecord.encodingSchema)\n        ),\n      },\n      {\n        key: 'AssetResources', // assetResources\n        valueSchema: new OptionalSchema(\n          new ArraySchema(AssetResourceRecord.encodingSchema)\n        ),\n      },\n    ])\n  );\n\n  public accounts: BalanceRecord[];\n  public appResources: AppResourceRecord[];\n  public assetResources: AssetResourceRecord[];\n\n  constructor(params: {\n    accounts: BalanceRecord[];\n    appResources: AppResourceRecord[];\n    assetResources: AssetResourceRecord[];\n  }) {\n    this.accounts = params.accounts;\n    this.appResources = params.appResources;\n    this.assetResources = params.assetResources;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AccountDeltas.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Accts', this.accounts.map((account) => account.toEncodingData())],\n      [\n        'AppResources',\n        this.appResources.length === 0\n          ? undefined\n          : this.appResources.map((appResource) =>\n              appResource.toEncodingData()\n            ),\n      ],\n      [\n        'AssetResources',\n        this.assetResources.length === 0\n          ? undefined\n          : this.assetResources.map((assetResource) =>\n              assetResource.toEncodingData()\n            ),\n      ],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AccountDeltas {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountDeltas: ${data}`);\n    }\n    return new AccountDeltas({\n      accounts: (data.get('Accts') ?? []).map(BalanceRecord.fromEncodingData),\n      appResources: (data.get('AppResources') ?? []).map(\n        AppResourceRecord.fromEncodingData\n      ),\n      assetResources: (data.get('AssetResources') ?? []).map(\n        AssetResourceRecord.fromEncodingData\n      ),\n    });\n  }\n}\n\n/**\n * A KvValueDelta shows how the Data associated with a key in the kvstore has changed.\n */\nexport class KvValueDelta implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'Data',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n      },\n      {\n        key: 'OldData',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n      },\n    ])\n  );\n\n  /**\n   * Data stores the most recent value (undefined means deleted)\n   */\n  public data?: Uint8Array;\n\n  /**\n   * OldData stores the previous value (undefined means didn't exist)\n   */\n  public oldData?: Uint8Array;\n\n  constructor(params: { data?: Uint8Array; oldData?: Uint8Array }) {\n    this.data = params.data;\n    this.oldData = params.oldData;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return KvValueDelta.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Data', this.data],\n      ['OldData', this.oldData],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): KvValueDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded KvValueDelta: ${data}`);\n    }\n    return new KvValueDelta({\n      data: data.get('Data'),\n      oldData: data.get('OldData'),\n    });\n  }\n}\n\n/**\n * IncludedTransactions defines the transactions included in a block, their index and last valid round.\n */\nexport class IncludedTransactions implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'LastValid',\n        valueSchema: new Uint64Schema(),\n      },\n      {\n        key: 'Intra',\n        valueSchema: new Uint64Schema(),\n      },\n    ])\n  );\n\n  public lastValid: bigint;\n  /**\n   * The index of the transaction in the block\n   */\n  public intra: number;\n\n  constructor(params: { lastValid: bigint; intra: number }) {\n    this.lastValid = params.lastValid;\n    this.intra = params.intra;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return IncludedTransactions.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['LastValid', this.lastValid],\n      ['Intra', this.intra],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): IncludedTransactions {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded IncludedTransactions: ${data}`);\n    }\n    return new IncludedTransactions({\n      lastValid: data.get('LastValid'),\n      intra: Number(data.get('Intra')),\n    });\n  }\n}\n\n/**\n * ModifiedCreatable represents a change to a single creatable state\n */\nexport class ModifiedCreatable implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'Ctype', // creatableType\n        valueSchema: new Uint64Schema(),\n      },\n      {\n        key: 'Created', // created\n        valueSchema: new BooleanSchema(),\n      },\n      {\n        key: 'Creator', // creator\n        valueSchema: new AddressSchema(),\n      },\n      {\n        key: 'Ndeltas', // ndeltas\n        valueSchema: new Uint64Schema(),\n      },\n    ])\n  );\n\n  /**\n   * Type of the creatable. The values are:\n   * * 0: Asset\n   * * 1: Application\n   */\n  public creatableType: number;\n\n  /**\n   * Created if true, deleted if false\n   */\n  public created: boolean;\n\n  /**\n   * creator of the app/asset\n   */\n  public creator: Address;\n\n  /**\n   * Keeps track of how many times this app/asset appears in accountUpdates.creatableDeltas\n   */\n  public ndeltas: number;\n\n  public constructor(params: {\n    creatableType: number;\n    created: boolean;\n    creator: Address;\n    ndeltas: number;\n  }) {\n    this.creatableType = params.creatableType;\n    this.created = params.created;\n    this.creator = params.creator;\n    this.ndeltas = params.ndeltas;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return ModifiedCreatable.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Ctype', this.creatableType],\n      ['Created', this.created],\n      ['Creator', this.creator],\n      ['Ndeltas', this.ndeltas],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): ModifiedCreatable {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ModifiedCreatable: ${data}`);\n    }\n    return new ModifiedCreatable({\n      creatableType: Number(data.get('Ctype')),\n      created: data.get('Created'),\n      creator: data.get('Creator'),\n      ndeltas: Number(data.get('Ndeltas')),\n    });\n  }\n}\n\n/**\n * AlgoCount represents a total of algos of a certain class of accounts (split up by their Status value).\n */\nexport class AlgoCount implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      { key: 'mon', valueSchema: new Uint64Schema() }, // money\n      { key: 'rwd', valueSchema: new Uint64Schema() }, // rewardUnits\n    ])\n  );\n\n  /**\n   * Sum of algos of all accounts in this class.\n   */\n  public money: bigint;\n\n  /**\n   * Total number of whole reward units in accounts.\n   */\n  public rewardUnits: bigint;\n\n  constructor(params: { money: bigint; rewardUnits: bigint }) {\n    this.money = params.money;\n    this.rewardUnits = params.rewardUnits;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AlgoCount.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['mon', this.money],\n      ['rwd', this.rewardUnits],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AlgoCount {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AlgoCount: ${data}`);\n    }\n    return new AlgoCount({\n      money: data.get('mon'),\n      rewardUnits: data.get('rwd'),\n    });\n  }\n}\n\n/**\n * AccountTotals represents the totals of algos in the system grouped by different account status values.\n */\nexport class AccountTotals implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      { key: 'online', valueSchema: AlgoCount.encodingSchema }, // online\n      { key: 'offline', valueSchema: AlgoCount.encodingSchema }, // offline\n      { key: 'notpart', valueSchema: AlgoCount.encodingSchema }, // notParticipating\n      { key: 'rwdlvl', valueSchema: new Uint64Schema() }, // rewardsLevel\n    ])\n  );\n\n  public online: AlgoCount;\n  public offline: AlgoCount;\n  public notParticipating: AlgoCount;\n\n  /**\n   * Total number of algos received per reward unit since genesis\n   */\n  public rewardsLevel: bigint;\n\n  constructor(params: {\n    online: AlgoCount;\n    offline: AlgoCount;\n    notParticipating: AlgoCount;\n    rewardsLevel: bigint;\n  }) {\n    this.online = params.online;\n    this.offline = params.offline;\n    this.notParticipating = params.notParticipating;\n    this.rewardsLevel = params.rewardsLevel;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return AccountTotals.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['online', this.online.toEncodingData()],\n      ['offline', this.offline.toEncodingData()],\n      ['notpart', this.notParticipating.toEncodingData()],\n      ['rwdlvl', this.rewardsLevel],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): AccountTotals {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountTotals: ${data}`);\n    }\n    return new AccountTotals({\n      online: AlgoCount.fromEncodingData(data.get('online')),\n      offline: AlgoCount.fromEncodingData(data.get('offline')),\n      notParticipating: AlgoCount.fromEncodingData(data.get('notpart')),\n      rewardsLevel: data.get('rwdlvl'),\n    });\n  }\n}\n\n/**\n * LedgerStateDelta describes the delta between a given round to the previous round\n */\nexport class LedgerStateDelta implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'Accts', // accounts\n        valueSchema: AccountDeltas.encodingSchema,\n      },\n      {\n        key: 'KvMods', // kvMods\n        valueSchema: new OptionalSchema(\n          new SpecialCaseBinaryStringMapSchema(KvValueDelta.encodingSchema)\n        ),\n      },\n      {\n        key: 'Txids', // txids\n        valueSchema: new ByteArrayMapSchema(\n          IncludedTransactions.encodingSchema\n        ),\n      },\n      {\n        key: 'Txleases', // txleases\n        // Note: because txleases is currently just an UntypedSchema and we are expected to decode\n        // null values for this field, we use OptionalSchema to coerce null values to undefined so\n        // that the values can be properly omitted during encoding.\n        valueSchema: new OptionalSchema(new UntypedSchema()),\n      },\n      {\n        key: 'Creatables', // creatables\n        valueSchema: new OptionalSchema(\n          new Uint64MapSchema(ModifiedCreatable.encodingSchema)\n        ),\n      },\n      {\n        key: 'Hdr', // blockHeader\n        valueSchema: BlockHeader.encodingSchema,\n      },\n      {\n        key: 'StateProofNext', // stateProofNext\n        valueSchema: new Uint64Schema(),\n      },\n      {\n        key: 'PrevTimestamp', // prevTimestamp\n        valueSchema: new Uint64Schema(),\n      },\n      {\n        key: 'Totals', // totals\n        valueSchema: AccountTotals.encodingSchema,\n      },\n    ])\n  );\n\n  /**\n   * modified new accounts\n   */\n  public accounts: AccountDeltas;\n\n  /**\n   * modified kv pairs (nil == delete)\n   */\n  public kvMods: Map<Uint8Array, KvValueDelta>;\n\n  /**\n   * new Txids for the txtail and TxnCounter, mapped to txn.LastValid\n   */\n  public txids: Map<Uint8Array, IncludedTransactions>;\n\n  // TODO: properly support txleases once we are able to decode msgpack maps with object keys.\n  /**\n   *  new txleases for the txtail mapped to expiration\n   */\n  public txleases: UntypedValue;\n\n  /**\n   * new creatables creator lookup table\n   */\n  public creatables: Map<bigint, ModifiedCreatable>;\n\n  /**\n   * new block header\n   */\n  public blockHeader: BlockHeader;\n\n  /**\n   * StateProofNext represents modification on StateProofNextRound field in the block header. If the block contains\n   * a valid state proof transaction, this field will contain the next round for state proof.\n   * otherwise it will be set to 0.\n   */\n  public stateProofNext: bigint;\n\n  /**\n   * previous block timestamp\n   */\n  public prevTimestamp: bigint;\n\n  /**\n   * The account totals reflecting the changes in this StateDelta object.\n   */\n  public totals: AccountTotals;\n\n  public constructor(params: {\n    accounts: AccountDeltas;\n    kvMods: Map<Uint8Array, KvValueDelta>;\n    txids: Map<Uint8Array, IncludedTransactions>;\n    txleases: UntypedValue;\n    creatables: Map<bigint, ModifiedCreatable>;\n    blockHeader: BlockHeader;\n    stateProofNext: bigint;\n    prevTimestamp: bigint;\n    totals: AccountTotals;\n  }) {\n    this.accounts = params.accounts;\n    this.kvMods = params.kvMods;\n    this.txids = params.txids;\n    this.txleases = params.txleases;\n    this.creatables = params.creatables;\n    this.blockHeader = params.blockHeader;\n    this.stateProofNext = params.stateProofNext;\n    this.prevTimestamp = params.prevTimestamp;\n    this.totals = params.totals;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return LedgerStateDelta.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['Accts', this.accounts.toEncodingData()],\n      [\n        'KvMods',\n        this.kvMods.size === 0\n          ? undefined\n          : convertMap(this.kvMods, (key, value) => [\n              key,\n              value.toEncodingData(),\n            ]),\n      ],\n      [\n        'Txids',\n        convertMap(this.txids, (key, value) => [key, value.toEncodingData()]),\n      ],\n      ['Txleases', this.txleases.toEncodingData()],\n      [\n        'Creatables',\n        this.creatables.size === 0\n          ? undefined\n          : convertMap(this.creatables, (key, value) => [\n              key,\n              value.toEncodingData(),\n            ]),\n      ],\n      ['Hdr', this.blockHeader.toEncodingData()],\n      ['StateProofNext', this.stateProofNext],\n      ['PrevTimestamp', this.prevTimestamp],\n      ['Totals', this.totals.toEncodingData()],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): LedgerStateDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded LedgerStateDelta: ${data}`);\n    }\n    return new LedgerStateDelta({\n      accounts: AccountDeltas.fromEncodingData(data.get('Accts')),\n      kvMods: convertMap(\n        (data.get('KvMods') ?? new Map()) as Map<Uint8Array, unknown>,\n        (key, value) => [key, KvValueDelta.fromEncodingData(value)]\n      ),\n      txids: convertMap(\n        data.get('Txids') as Map<Uint8Array, unknown>,\n        (key, value) => [key, IncludedTransactions.fromEncodingData(value)]\n      ),\n      txleases: UntypedValue.fromEncodingData(data.get('Txleases')),\n      creatables: convertMap(\n        (data.get('Creatables') ?? new Map()) as Map<bigint, unknown>,\n        (key, value) => [key, ModifiedCreatable.fromEncodingData(value)]\n      ),\n      blockHeader: BlockHeader.fromEncodingData(data.get('Hdr')),\n      stateProofNext: data.get('StateProofNext'),\n      prevTimestamp: data.get('PrevTimestamp'),\n      totals: AccountTotals.fromEncodingData(data.get('Totals')),\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}