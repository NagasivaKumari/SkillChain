{"ast":null,"code":"/**\n * Enum for application transaction types.\n */\nexport var TransactionType;\n(function (TransactionType) {\n  /**\n   * Payment transaction\n   */\n  TransactionType[\"pay\"] = \"pay\";\n  /**\n   * Key registration transaction\n   */\n  TransactionType[\"keyreg\"] = \"keyreg\";\n  /**\n   * Asset configuration transaction\n   */\n  TransactionType[\"acfg\"] = \"acfg\";\n  /**\n   * Asset transfer transaction\n   */\n  TransactionType[\"axfer\"] = \"axfer\";\n  /**\n   * Asset freeze transaction\n   */\n  TransactionType[\"afrz\"] = \"afrz\";\n  /**\n   * Application transaction\n   */\n  TransactionType[\"appl\"] = \"appl\";\n  /**\n   * State proof transaction\n   */\n  TransactionType[\"stpf\"] = \"stpf\";\n  /**\n   * Heartbeat transaction\n   */\n  TransactionType[\"hb\"] = \"hb\";\n})(TransactionType || (TransactionType = {}));\n/**\n * Check if a string is a valid transaction type\n * @param s - string to check\n * @returns true if s is a valid transaction type\n */\nexport function isTransactionType(s) {\n  return s === TransactionType.pay || s === TransactionType.keyreg || s === TransactionType.acfg || s === TransactionType.axfer || s === TransactionType.afrz || s === TransactionType.appl || s === TransactionType.stpf || s === TransactionType.hb;\n}\n/**\n * Enums for application transactions on-transaction-complete behavior\n */\nexport var OnApplicationComplete;\n(function (OnApplicationComplete) {\n  /**\n   * NoOpOC indicates that an application transaction will simply call its\n   * ApprovalProgram\n   */\n  OnApplicationComplete[OnApplicationComplete[\"NoOpOC\"] = 0] = \"NoOpOC\";\n  /**\n   * OptInOC indicates that an application transaction will allocate some\n   * LocalState for the application in the sender's account\n   */\n  OnApplicationComplete[OnApplicationComplete[\"OptInOC\"] = 1] = \"OptInOC\";\n  /**\n   * CloseOutOC indicates that an application transaction will deallocate\n   * some LocalState for the application from the user's account\n   */\n  OnApplicationComplete[OnApplicationComplete[\"CloseOutOC\"] = 2] = \"CloseOutOC\";\n  /**\n   * ClearStateOC is similar to CloseOutOC, but may never fail. This\n   * allows users to reclaim their minimum balance from an application\n   * they no longer wish to opt in to.\n   */\n  OnApplicationComplete[OnApplicationComplete[\"ClearStateOC\"] = 3] = \"ClearStateOC\";\n  /**\n   * UpdateApplicationOC indicates that an application transaction will\n   * update the ApprovalProgram and ClearStateProgram for the application\n   */\n  OnApplicationComplete[OnApplicationComplete[\"UpdateApplicationOC\"] = 4] = \"UpdateApplicationOC\";\n  /**\n   * DeleteApplicationOC indicates that an application transaction will\n   * delete the AppParams for the application from the creator's balance\n   * record\n   */\n  OnApplicationComplete[OnApplicationComplete[\"DeleteApplicationOC\"] = 5] = \"DeleteApplicationOC\";\n})(OnApplicationComplete || (OnApplicationComplete = {}));\n/**\n * Check if a value is a valid OnApplicationComplete value\n * @param v - value to check\n * @returns true if v is a valid OnApplicationComplete value\n */\nexport function isOnApplicationComplete(v) {\n  return v === OnApplicationComplete.NoOpOC || v === OnApplicationComplete.OptInOC || v === OnApplicationComplete.CloseOutOC || v === OnApplicationComplete.ClearStateOC || v === OnApplicationComplete.UpdateApplicationOC || v === OnApplicationComplete.DeleteApplicationOC;\n}","map":{"version":3,"names":["TransactionType","isTransactionType","s","pay","keyreg","acfg","axfer","afrz","appl","stpf","hb","OnApplicationComplete","isOnApplicationComplete","v","NoOpOC","OptInOC","CloseOutOC","ClearStateOC","UpdateApplicationOC","DeleteApplicationOC"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\types\\transactions\\base.ts"],"sourcesContent":["import { Address } from '../../encoding/address.js';\nimport { StateProof, StateProofMessage } from '../../stateproof.js';\nimport { HeartbeatProof } from '../../heartbeat.js';\n\n/**\n * Enum for application transaction types.\n */\nexport enum TransactionType {\n  /**\n   * Payment transaction\n   */\n  pay = 'pay',\n\n  /**\n   * Key registration transaction\n   */\n  keyreg = 'keyreg',\n\n  /**\n   * Asset configuration transaction\n   */\n  acfg = 'acfg',\n\n  /**\n   * Asset transfer transaction\n   */\n  axfer = 'axfer',\n\n  /**\n   * Asset freeze transaction\n   */\n  afrz = 'afrz',\n\n  /**\n   * Application transaction\n   */\n  appl = 'appl',\n  /**\n   * State proof transaction\n   */\n  stpf = 'stpf',\n\n  /**\n   * Heartbeat transaction\n   */\n  hb = 'hb',\n}\n\n/**\n * Check if a string is a valid transaction type\n * @param s - string to check\n * @returns true if s is a valid transaction type\n */\nexport function isTransactionType(s: string): s is TransactionType {\n  return (\n    s === TransactionType.pay ||\n    s === TransactionType.keyreg ||\n    s === TransactionType.acfg ||\n    s === TransactionType.axfer ||\n    s === TransactionType.afrz ||\n    s === TransactionType.appl ||\n    s === TransactionType.stpf ||\n    s === TransactionType.hb\n  );\n}\n\n/**\n * Enums for application transactions on-transaction-complete behavior\n */\nexport enum OnApplicationComplete {\n  /**\n   * NoOpOC indicates that an application transaction will simply call its\n   * ApprovalProgram\n   */\n  NoOpOC,\n\n  /**\n   * OptInOC indicates that an application transaction will allocate some\n   * LocalState for the application in the sender's account\n   */\n  OptInOC,\n\n  /**\n   * CloseOutOC indicates that an application transaction will deallocate\n   * some LocalState for the application from the user's account\n   */\n  CloseOutOC,\n\n  /**\n   * ClearStateOC is similar to CloseOutOC, but may never fail. This\n   * allows users to reclaim their minimum balance from an application\n   * they no longer wish to opt in to.\n   */\n  ClearStateOC,\n\n  /**\n   * UpdateApplicationOC indicates that an application transaction will\n   * update the ApprovalProgram and ClearStateProgram for the application\n   */\n  UpdateApplicationOC,\n\n  /**\n   * DeleteApplicationOC indicates that an application transaction will\n   * delete the AppParams for the application from the creator's balance\n   * record\n   */\n  DeleteApplicationOC,\n}\n\n/**\n * Check if a value is a valid OnApplicationComplete value\n * @param v - value to check\n * @returns true if v is a valid OnApplicationComplete value\n */\nexport function isOnApplicationComplete(\n  v: unknown\n): v is OnApplicationComplete {\n  return (\n    v === OnApplicationComplete.NoOpOC ||\n    v === OnApplicationComplete.OptInOC ||\n    v === OnApplicationComplete.CloseOutOC ||\n    v === OnApplicationComplete.ClearStateOC ||\n    v === OnApplicationComplete.UpdateApplicationOC ||\n    v === OnApplicationComplete.DeleteApplicationOC\n  );\n}\n\n/**\n * Contains parameters relevant to the creation of a new transaction in a specific network at a specific time\n */\nexport interface SuggestedParams {\n  /**\n   * Set this to true to specify fee as microalgos-per-txn\n   *   If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum\n   */\n  flatFee?: boolean;\n\n  /**\n   * Integer fee per byte, in microAlgos. For a flat fee, set flatFee to true\n   */\n  fee: number | bigint;\n\n  /**\n   * Minimum fee (not per byte) required for the transaction to be confirmed\n   */\n  minFee: number | bigint;\n\n  /**\n   * First protocol round on which this txn is valid\n   */\n  firstValid: number | bigint;\n\n  /**\n   * Last protocol round on which this txn is valid\n   */\n  lastValid: number | bigint;\n\n  /**\n   * Specifies genesis ID of network in use\n   */\n  genesisID?: string;\n\n  /**\n   * Specifies hash genesis block of network in use\n   */\n  genesisHash?: Uint8Array;\n}\n\n/**\n * A grouping of the app ID and name of the box in an Uint8Array\n */\nexport interface BoxReference {\n  /**\n   * A unique application index\n   */\n  appIndex: number | bigint;\n\n  /**\n   * Name of box to reference\n   */\n  name: Uint8Array;\n}\n\n/**\n * Contains payment transaction parameters.\n *\n * The full documentation is available at:\n * https://developer.algorand.org/docs/get-details/transactions/transactions/#payment-transaction\n */\nexport interface PaymentTransactionParams {\n  /**\n   * Algorand address of recipient\n   */\n  receiver: string | Address;\n\n  /**\n   * Integer amount to send, in microAlgos. Must be nonnegative.\n   */\n  amount: number | bigint;\n\n  /**\n   * Optional, indicates the sender will close their account and the remaining balance will transfer\n   * to this account\n   */\n  closeRemainderTo?: string | Address;\n}\n\n/**\n * Contains key registration transaction parameters\n *\n * The full documentation is available at:\n * https://developer.algorand.org/docs/get-details/transactions/transactions/#key-registration-transaction\n */\nexport interface KeyRegistrationTransactionParams {\n  /**\n   * 32-byte voting key. For key deregistration, leave undefined\n   */\n  voteKey?: Uint8Array | string;\n\n  /**\n   * 32-byte selection key. For key deregistration, leave undefined\n   */\n  selectionKey?: Uint8Array | string;\n\n  /**\n   * 64-byte state proof key. For key deregistration, leave undefined\n   */\n  stateProofKey?: Uint8Array | string;\n\n  /**\n   * First round on which voting keys are valid\n   */\n  voteFirst?: number | bigint;\n\n  /**\n   * Last round on which voting keys are valid\n   */\n  voteLast?: number | bigint;\n\n  /**\n   * The dilution fo the 2-level participation key\n   */\n  voteKeyDilution?: number | bigint;\n\n  /**\n   * Set this value to true to mark this account as nonparticipating.\n   *\n   * All new Algorand accounts are participating by default. This means they earn rewards.\n   */\n  nonParticipation?: boolean;\n}\n\n/**\n * Contains asset configuration transaction parameters.\n *\n * The full documentation is available at:\n * https://developer.algorand.org/docs/get-details/transactions/transactions/#asset-configuration-transaction\n */\nexport interface AssetConfigurationTransactionParams {\n  /**\n   * Asset index uniquely specifying the asset\n   */\n  assetIndex?: number | bigint;\n\n  /**\n   * Total supply of the asset\n   */\n  total?: number | bigint;\n\n  /**\n   * Integer number of decimals for asset unit calcuation\n   */\n  decimals?: number | bigint;\n\n  /**\n   * Whether asset accounts should default to being frozen\n   */\n  defaultFrozen?: boolean;\n\n  /**\n   * The Algorand address in charge of reserve, freeze, clawback, destruction, etc.\n   */\n  manager?: string | Address;\n\n  /**\n   * The Algorand address representing asset reserve\n   */\n  reserve?: string | Address;\n\n  /**\n   * The Algorand address with power to freeze/unfreeze asset holdings\n   */\n  freeze?: string | Address;\n\n  /**\n   * The Algorand address with power to revoke asset holdings\n   */\n  clawback?: string | Address;\n\n  /**\n   * Unit name for this asset\n   */\n  unitName?: string;\n\n  /**\n   * Name for this asset\n   */\n  assetName?: string;\n\n  /**\n   * URL relating to this asset\n   */\n  assetURL?: string;\n\n  /**\n   * Uint8Array containing a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n   */\n  assetMetadataHash?: Uint8Array;\n}\n\n/**\n * Contains asset transfer transaction parameters.\n *\n * The full documentation is available at:\n * https://developer.algorand.org/docs/get-details/transactions/transactions/#asset-transfer-transaction\n */\nexport interface AssetTransferTransactionParams {\n  /**\n   * Asset index uniquely specifying the asset\n   */\n  assetIndex: number | bigint;\n\n  /**\n   * String representation of Algorand address – if provided, and if \"sender\" is\n   * the asset's revocation manager, then deduct from \"assetSender\" rather than \"sender\"\n   */\n  assetSender?: string | Address;\n\n  /**\n   * The Algorand address of recipient\n   */\n  receiver: string | Address;\n\n  /**\n   * Integer amount to send\n   */\n  amount: number | bigint;\n\n  /**\n   * Close out remaining asset balance of the sender to this account\n   */\n  closeRemainderTo?: string | Address;\n}\n\n/**\n * Contains asset freeze transaction parameters.\n *\n * The full documentation is available at:\n * https://developer.algorand.org/docs/get-details/transactions/transactions/#asset-freeze-transaction\n */\nexport interface AssetFreezeTransactionParams {\n  /**\n   * Asset index uniquely specifying the asset\n   */\n  assetIndex: number | bigint;\n\n  /**\n   * Algorand address being frozen or unfrozen\n   */\n  freezeTarget: string | Address;\n\n  /**\n   * true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n   */\n  frozen: boolean;\n}\n\n/**\n * Contains application call transaction parameters.\n *\n * The full documentation is available at:\n * https://developer.algorand.org/docs/get-details/transactions/transactions/#application-call-transaction\n */\nexport interface ApplicationCallTransactionParams {\n  /**\n   * A unique application ID\n   */\n  appIndex: number | bigint;\n\n  /**\n   * What application should do once the program has been run\n   */\n  onComplete: OnApplicationComplete;\n\n  /**\n   * Restricts number of ints in per-user local state\n   */\n  numLocalInts?: number | bigint;\n\n  /**\n   * Restricts number of byte slices in per-user local state\n   */\n  numLocalByteSlices?: number | bigint;\n\n  /**\n   * Restricts number of ints in global state\n   */\n  numGlobalInts?: number | bigint;\n\n  /**\n   * Restricts number of byte slices in global state\n   */\n  numGlobalByteSlices?: number | bigint;\n\n  /**\n   * The compiled TEAL that approves a transaction\n   */\n  approvalProgram?: Uint8Array;\n\n  /**\n   * The compiled TEAL program that runs when clearing state\n   */\n  clearProgram?: Uint8Array;\n\n  /**\n   * Array of Uint8Array, any additional arguments to the application\n   */\n  appArgs?: Uint8Array[];\n\n  /**\n   * Array of Address strings, any additional accounts to supply to the application\n   */\n  accounts?: Array<string | Address>;\n\n  /**\n   * Array of int, any other apps used by the application, identified by index\n   */\n  foreignApps?: Array<number | bigint>;\n\n  /**\n   * Array of int, any assets used by the application, identified by index\n   */\n  foreignAssets?: Array<number | bigint>;\n\n  /**\n   * Int representing extra pages of memory to rent during an application create transaction.\n   */\n  extraPages?: number | bigint;\n\n  /**\n   * A grouping of the app ID and name of the box in an Uint8Array\n   */\n  boxes?: BoxReference[];\n}\n\n/**\n * Contains state proof transaction parameters.\n */\nexport interface StateProofTransactionParams {\n  /*\n   * Uint64 identifying a particular configuration of state proofs.\n   */\n  stateProofType?: number | bigint;\n\n  /**\n   * The state proof.\n   */\n  stateProof?: StateProof;\n\n  /**\n   * The state proof message.\n   */\n  message?: StateProofMessage;\n}\n\n/**\n * Contains heartbeat transaction parameters.\n */\nexport interface HeartbeatTransactionParams {\n  /*\n   * Account address this txn is proving onlineness for\n   */\n  address: Address;\n\n  /**\n   * Signature using HeartbeatAddress's partkey, thereby showing it is online.\n   */\n  proof: HeartbeatProof;\n\n  /**\n   * The block seed for the this transaction's firstValid block.\n   */\n  seed: Uint8Array;\n\n  /**\n   * Must match the hbAddress account's current VoteID\n   */\n  voteID: Uint8Array;\n\n  /**\n   * Must match hbAddress account's current KeyDilution.\n   */\n  keyDilution: bigint;\n}\n\n/**\n * A full list of all available transaction parameters\n *\n * The full documentation is available at:\n * https://developer.algorand.org/docs/get-details/transactions/transactions/#common-fields-header-and-type\n */\nexport interface TransactionParams {\n  /**\n   * Transaction type\n   */\n  type: TransactionType;\n\n  /**\n   * Algorand address of sender\n   */\n  sender: string | Address;\n\n  /**\n   * Optional, arbitrary data to be included in the transaction's note field\n   */\n  note?: Uint8Array;\n\n  /**\n   * Optional, 32-byte lease to associate with this transaction.\n   *\n   * The sender cannot send another transaction with the same lease until the last round of original\n   * transaction has passed.\n   */\n  lease?: Uint8Array;\n\n  /**\n   * The Algorand address that will be used to authorize all future transactions from the sender, if provided.\n   */\n  rekeyTo?: string | Address;\n\n  /**\n   * Suggested parameters relevant to the network that will accept this transaction\n   */\n  suggestedParams: SuggestedParams;\n\n  /**\n   * Payment transaction parameters. Only set if type is TransactionType.pay\n   */\n  paymentParams?: PaymentTransactionParams;\n\n  /**\n   * Key registration transaction parameters. Only set if type is TransactionType.keyreg\n   */\n  keyregParams?: KeyRegistrationTransactionParams;\n\n  /**\n   * Asset configuration transaction parameters. Only set if type is TransactionType.acfg\n   */\n  assetConfigParams?: AssetConfigurationTransactionParams;\n\n  /**\n   * Asset transfer transaction parameters. Only set if type is TransactionType.axfer\n   */\n  assetTransferParams?: AssetTransferTransactionParams;\n\n  /**\n   * Asset freeze transaction parameters. Only set if type is TransactionType.afrz\n   */\n  assetFreezeParams?: AssetFreezeTransactionParams;\n\n  /**\n   * Application call transaction parameters. Only set if type is TransactionType.appl\n   */\n  appCallParams?: ApplicationCallTransactionParams;\n\n  /**\n   * State proof transaction parameters. Only set if type is TransactionType.stpf\n   */\n  stateProofParams?: StateProofTransactionParams;\n\n  /**\n   * Heartbeat transaction parameters. Only set if type is TransactionType.hb\n   */\n  heartbeatParams?: HeartbeatTransactionParams;\n}\n"],"mappings":"AAIA;;;AAGA,WAAYA,eAuCX;AAvCD,WAAYA,eAAe;EACzB;;;EAGAA,eAAA,eAAW;EAEX;;;EAGAA,eAAA,qBAAiB;EAEjB;;;EAGAA,eAAA,iBAAa;EAEb;;;EAGAA,eAAA,mBAAe;EAEf;;;EAGAA,eAAA,iBAAa;EAEb;;;EAGAA,eAAA,iBAAa;EACb;;;EAGAA,eAAA,iBAAa;EAEb;;;EAGAA,eAAA,aAAS;AACX,CAAC,EAvCWA,eAAe,KAAfA,eAAe;AAyC3B;;;;;AAKA,OAAM,SAAUC,iBAAiBA,CAACC,CAAS;EACzC,OACEA,CAAC,KAAKF,eAAe,CAACG,GAAG,IACzBD,CAAC,KAAKF,eAAe,CAACI,MAAM,IAC5BF,CAAC,KAAKF,eAAe,CAACK,IAAI,IAC1BH,CAAC,KAAKF,eAAe,CAACM,KAAK,IAC3BJ,CAAC,KAAKF,eAAe,CAACO,IAAI,IAC1BL,CAAC,KAAKF,eAAe,CAACQ,IAAI,IAC1BN,CAAC,KAAKF,eAAe,CAACS,IAAI,IAC1BP,CAAC,KAAKF,eAAe,CAACU,EAAE;AAE5B;AAEA;;;AAGA,WAAYC,qBAsCX;AAtCD,WAAYA,qBAAqB;EAC/B;;;;EAIAA,qBAAA,CAAAA,qBAAA,0BAAM;EAEN;;;;EAIAA,qBAAA,CAAAA,qBAAA,4BAAO;EAEP;;;;EAIAA,qBAAA,CAAAA,qBAAA,kCAAU;EAEV;;;;;EAKAA,qBAAA,CAAAA,qBAAA,sCAAY;EAEZ;;;;EAIAA,qBAAA,CAAAA,qBAAA,oDAAmB;EAEnB;;;;;EAKAA,qBAAA,CAAAA,qBAAA,oDAAmB;AACrB,CAAC,EAtCWA,qBAAqB,KAArBA,qBAAqB;AAwCjC;;;;;AAKA,OAAM,SAAUC,uBAAuBA,CACrCC,CAAU;EAEV,OACEA,CAAC,KAAKF,qBAAqB,CAACG,MAAM,IAClCD,CAAC,KAAKF,qBAAqB,CAACI,OAAO,IACnCF,CAAC,KAAKF,qBAAqB,CAACK,UAAU,IACtCH,CAAC,KAAKF,qBAAqB,CAACM,YAAY,IACxCJ,CAAC,KAAKF,qBAAqB,CAACO,mBAAmB,IAC/CL,CAAC,KAAKF,qBAAqB,CAACQ,mBAAmB;AAEnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}