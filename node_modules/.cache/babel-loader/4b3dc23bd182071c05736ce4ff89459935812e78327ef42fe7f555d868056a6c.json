{"ast":null,"code":"function boxReferenceToEncodingData(reference, foreignApps, appIndex) {\n  const referenceId = BigInt(reference.appIndex);\n  const referenceName = reference.name;\n  const isOwnReference = referenceId === BigInt(0) || referenceId === appIndex;\n  // Foreign apps start from index 1; index 0 is its own app ID.\n  const index = foreignApps.indexOf(referenceId) + 1;\n  // Check if the app referenced is itself after checking the foreign apps array.\n  // If index is zero, then the app ID was not found in the foreign apps array\n  // or the foreign apps array was null.\n  if (index === 0 && !isOwnReference) {\n    // Error if the app is trying to reference a foreign app that was not in\n    // its own foreign apps array.\n    throw new Error(`Box ref with appId ${referenceId} not in foreign-apps`);\n  }\n  return new Map([['i', index], ['n', referenceName]]);\n}\n/**\n * boxReferencesToEncodingData translates an array of BoxReferences into an array of encoding data\n * maps.\n */\nexport function boxReferencesToEncodingData(references, foreignApps, appIndex) {\n  const appIndexBigInt = BigInt(appIndex);\n  const foreignAppsBigInt = foreignApps.map(BigInt);\n  return references.map(bx => boxReferenceToEncodingData(bx, foreignAppsBigInt, appIndexBigInt));\n}","map":{"version":3,"names":["boxReferenceToEncodingData","reference","foreignApps","appIndex","referenceId","BigInt","referenceName","name","isOwnReference","index","indexOf","Error","Map","boxReferencesToEncodingData","references","appIndexBigInt","foreignAppsBigInt","map","bx"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\boxStorage.ts"],"sourcesContent":["import { BoxReference } from './types/transactions/base.js';\n\nfunction boxReferenceToEncodingData(\n  reference: BoxReference,\n  foreignApps: bigint[],\n  appIndex: bigint\n): Map<string, unknown> {\n  const referenceId = BigInt(reference.appIndex);\n  const referenceName = reference.name;\n  const isOwnReference = referenceId === BigInt(0) || referenceId === appIndex;\n\n  // Foreign apps start from index 1; index 0 is its own app ID.\n  const index = foreignApps.indexOf(referenceId) + 1;\n\n  // Check if the app referenced is itself after checking the foreign apps array.\n  // If index is zero, then the app ID was not found in the foreign apps array\n  // or the foreign apps array was null.\n  if (index === 0 && !isOwnReference) {\n    // Error if the app is trying to reference a foreign app that was not in\n    // its own foreign apps array.\n    throw new Error(`Box ref with appId ${referenceId} not in foreign-apps`);\n  }\n\n  return new Map<string, number | Uint8Array>([\n    ['i', index],\n    ['n', referenceName],\n  ]);\n}\n\n/**\n * boxReferencesToEncodingData translates an array of BoxReferences into an array of encoding data\n * maps.\n */\nexport function boxReferencesToEncodingData(\n  references: ReadonlyArray<BoxReference>,\n  foreignApps: ReadonlyArray<number | bigint>,\n  appIndex: number | bigint\n): Array<Map<string, unknown>> {\n  const appIndexBigInt = BigInt(appIndex);\n  const foreignAppsBigInt = foreignApps.map(BigInt);\n  return references.map((bx) =>\n    boxReferenceToEncodingData(bx, foreignAppsBigInt, appIndexBigInt)\n  );\n}\n"],"mappings":"AAEA,SAASA,0BAA0BA,CACjCC,SAAuB,EACvBC,WAAqB,EACrBC,QAAgB;EAEhB,MAAMC,WAAW,GAAGC,MAAM,CAACJ,SAAS,CAACE,QAAQ,CAAC;EAC9C,MAAMG,aAAa,GAAGL,SAAS,CAACM,IAAI;EACpC,MAAMC,cAAc,GAAGJ,WAAW,KAAKC,MAAM,CAAC,CAAC,CAAC,IAAID,WAAW,KAAKD,QAAQ;EAE5E;EACA,MAAMM,KAAK,GAAGP,WAAW,CAACQ,OAAO,CAACN,WAAW,CAAC,GAAG,CAAC;EAElD;EACA;EACA;EACA,IAAIK,KAAK,KAAK,CAAC,IAAI,CAACD,cAAc,EAAE;IAClC;IACA;IACA,MAAM,IAAIG,KAAK,CAAC,sBAAsBP,WAAW,sBAAsB,CAAC;EAC1E;EAEA,OAAO,IAAIQ,GAAG,CAA8B,CAC1C,CAAC,GAAG,EAAEH,KAAK,CAAC,EACZ,CAAC,GAAG,EAAEH,aAAa,CAAC,CACrB,CAAC;AACJ;AAEA;;;;AAIA,OAAM,SAAUO,2BAA2BA,CACzCC,UAAuC,EACvCZ,WAA2C,EAC3CC,QAAyB;EAEzB,MAAMY,cAAc,GAAGV,MAAM,CAACF,QAAQ,CAAC;EACvC,MAAMa,iBAAiB,GAAGd,WAAW,CAACe,GAAG,CAACZ,MAAM,CAAC;EACjD,OAAOS,UAAU,CAACG,GAAG,CAAEC,EAAE,IACvBlB,0BAA0B,CAACkB,EAAE,EAAEF,iBAAiB,EAAED,cAAc,CAAC,CAClE;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}