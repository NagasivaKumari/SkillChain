{"ast":null,"code":"import { utf8Count, utf8Encode } from \"./utils/utf8.mjs\";\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nimport { setInt64, setUint64 } from \"./utils/int.mjs\";\nimport { ensureUint8Array, compareUint8Arrays, RawBinaryString } from \"./utils/typedArrays.mjs\";\nexport var DEFAULT_MAX_DEPTH = 100;\nexport var DEFAULT_INITIAL_BUFFER_SIZE = 2048;\nvar Encoder = /** @class */function () {\n  function Encoder(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    this.extensionCodec = (_a = options === null || options === void 0 ? void 0 : options.extensionCodec) !== null && _a !== void 0 ? _a : ExtensionCodec.defaultCodec;\n    this.context = options === null || options === void 0 ? void 0 : options.context; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\n    this.forceBigIntToInt64 = (_b = options === null || options === void 0 ? void 0 : options.forceBigIntToInt64) !== null && _b !== void 0 ? _b : false;\n    this.maxDepth = (_c = options === null || options === void 0 ? void 0 : options.maxDepth) !== null && _c !== void 0 ? _c : DEFAULT_MAX_DEPTH;\n    this.initialBufferSize = (_d = options === null || options === void 0 ? void 0 : options.initialBufferSize) !== null && _d !== void 0 ? _d : DEFAULT_INITIAL_BUFFER_SIZE;\n    this.sortKeys = (_e = options === null || options === void 0 ? void 0 : options.sortKeys) !== null && _e !== void 0 ? _e : false;\n    this.forceFloat32 = (_f = options === null || options === void 0 ? void 0 : options.forceFloat32) !== null && _f !== void 0 ? _f : false;\n    this.ignoreUndefined = (_g = options === null || options === void 0 ? void 0 : options.ignoreUndefined) !== null && _g !== void 0 ? _g : false;\n    this.forceIntegerToFloat = (_h = options === null || options === void 0 ? void 0 : options.forceIntegerToFloat) !== null && _h !== void 0 ? _h : false;\n    this.pos = 0;\n    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n    this.bytes = new Uint8Array(this.view.buffer);\n  }\n  Encoder.prototype.reinitializeState = function () {\n    this.pos = 0;\n  };\n  /**\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n   *\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n   */\n  Encoder.prototype.encodeSharedRef = function (object) {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.subarray(0, this.pos);\n  };\n  /**\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n   */\n  Encoder.prototype.encode = function (object) {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.slice(0, this.pos);\n  };\n  Encoder.prototype.doEncode = function (object, depth) {\n    if (depth > this.maxDepth) {\n      throw new Error(\"Too deep objects in depth \".concat(depth));\n    }\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  };\n  Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {\n    var requiredSize = this.pos + sizeToWrite;\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  };\n  Encoder.prototype.resizeBuffer = function (newSize) {\n    var newBuffer = new ArrayBuffer(newSize);\n    var newBytes = new Uint8Array(newBuffer);\n    var newView = new DataView(newBuffer);\n    newBytes.set(this.bytes);\n    this.view = newView;\n    this.bytes = newBytes;\n  };\n  Encoder.prototype.encodeNil = function () {\n    this.writeU8(0xc0);\n  };\n  Encoder.prototype.encodeBoolean = function (object) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  };\n  Encoder.prototype.encodeNumber = function (object) {\n    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | object + 0x20);\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      this.encodeNumberAsFloat(object);\n    }\n  };\n  Encoder.prototype.encodeNumberAsFloat = function (object) {\n    if (this.forceFloat32) {\n      // float 32\n      this.writeU8(0xca);\n      this.writeF32(object);\n    } else {\n      // float 64\n      this.writeU8(0xcb);\n      this.writeF64(object);\n    }\n  };\n  Encoder.prototype.encodeBigInt = function (object) {\n    if (this.forceBigIntToInt64) {\n      this.encodeBigIntAsInt64(object);\n    } else if (object >= 0) {\n      if (object < 0x100000000 || this.forceIntegerToFloat) {\n        // uint 32 or lower, or force to float\n        this.encodeNumber(Number(object));\n      } else if (object < BigInt(\"0x10000000000000000\")) {\n        // uint 64\n        this.encodeBigIntAsInt64(object);\n      } else {\n        throw new Error(\"Bigint is too large for uint64: \".concat(object));\n      }\n    } else {\n      if (object >= -0x80000000 || this.forceIntegerToFloat) {\n        // int 32 or lower, or force to float\n        this.encodeNumber(Number(object));\n      } else if (object >= BigInt(-1) * BigInt(\"0x8000000000000000\")) {\n        // int 64\n        this.encodeBigIntAsInt64(object);\n      } else {\n        throw new Error(\"Bigint is too small for int64: \".concat(object));\n      }\n    }\n  };\n  Encoder.prototype.encodeBigIntAsInt64 = function (object) {\n    if (object >= BigInt(0)) {\n      // uint 64\n      this.writeU8(0xcf);\n      this.writeBigUint64(object);\n    } else {\n      // int 64\n      this.writeU8(0xd3);\n      this.writeBigInt64(object);\n    }\n  };\n  Encoder.prototype.writeStringHeader = function (byteLength) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(\"Too long string: \".concat(byteLength, \" bytes in UTF-8\"));\n    }\n  };\n  Encoder.prototype.encodeString = function (object) {\n    var maxHeaderSize = 1 + 4;\n    var byteLength = utf8Count(object);\n    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n    this.writeStringHeader(byteLength);\n    utf8Encode(object, this.bytes, this.pos);\n    this.pos += byteLength;\n  };\n  Encoder.prototype.encodeObject = function (object, depth) {\n    // try to encode objects with custom codec first of non-primitives\n    var ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (object instanceof RawBinaryString) {\n      this.encodeBinaryAsString(object);\n    } else if (typeof object === \"bigint\") {\n      // this is here instead of in doEncode so that we can try encoding with an extension first,\n      // otherwise we would break existing extensions for bigints\n      this.encodeBigInt(object);\n    } else if (object instanceof Map) {\n      this.encodeMap(object, depth);\n    } else if (typeof object === \"object\") {\n      this.encodeMapObject(object, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(\"Unrecognized object: \".concat(Object.prototype.toString.apply(object)));\n    }\n  };\n  Encoder.prototype.encodeBinary = function (object) {\n    var size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large binary: \".concat(size));\n    }\n    var bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  };\n  Encoder.prototype.encodeBinaryAsString = function (binaryString) {\n    var object = binaryString.rawBinaryValue;\n    this.writeStringHeader(object.byteLength);\n    var bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  };\n  Encoder.prototype.encodeArray = function (object, depth) {\n    var size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large array: \".concat(size));\n    }\n    for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {\n      var item = object_1[_i];\n      this.doEncode(item, depth + 1);\n    }\n  };\n  Encoder.prototype.countWithoutUndefined = function (map, keys) {\n    var count = 0;\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      if (map.get(key) !== undefined) {\n        count++;\n      }\n    }\n    return count;\n  };\n  Encoder.prototype.sortMapKeys = function (keys) {\n    var numericKeys = [];\n    var stringKeys = [];\n    var rawStringKeys = [];\n    var binaryKeys = [];\n    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n      var key = keys_2[_i];\n      if (typeof key === \"number\") {\n        if (isNaN(key)) {\n          throw new Error(\"Cannot sort map keys with NaN value\");\n        }\n        numericKeys.push(key);\n      } else if (typeof key === \"bigint\") {\n        numericKeys.push(key);\n      } else if (typeof key === \"string\") {\n        stringKeys.push(key);\n      } else if (ArrayBuffer.isView(key)) {\n        binaryKeys.push(ensureUint8Array(key));\n      } else if (key instanceof RawBinaryString) {\n        rawStringKeys.push(key);\n      } else {\n        throw new Error(\"Unsupported map key type: \".concat(Object.prototype.toString.apply(key)));\n      }\n    }\n    numericKeys.sort(function (a, b) {\n      return a < b ? -1 : a > b ? 1 : 0;\n    }); // Avoid using === to compare numbers and bigints\n    stringKeys.sort();\n    rawStringKeys.sort(function (a, b) {\n      return compareUint8Arrays(ensureUint8Array(a.rawBinaryValue), ensureUint8Array(b.rawBinaryValue));\n    });\n    binaryKeys.sort(compareUint8Arrays);\n    // At the moment this arbitrarily orders the keys as numeric, string, raw string, binary\n    return [].concat(numericKeys, stringKeys, rawStringKeys, binaryKeys);\n  };\n  Encoder.prototype.encodeMapObject = function (object, depth) {\n    this.encodeMap(new Map(Object.entries(object)), depth);\n  };\n  Encoder.prototype.encodeMap = function (map, depth) {\n    var keys = Array.from(map.keys());\n    if (this.sortKeys) {\n      keys = this.sortMapKeys(keys);\n    }\n    // Map keys may encode to the same underlying value. For example, the number 3 and the bigint 3.\n    // This is also possible with ArrayBufferViews. We may want to introduce a new encoding option\n    // which checks for duplicate keys in this sense and throws an error if they are found.\n    var size = this.ignoreUndefined ? this.countWithoutUndefined(map, keys) : keys.length;\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large map object: \".concat(size));\n    }\n    for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {\n      var key = keys_3[_i];\n      var value = map.get(key);\n      if (!(this.ignoreUndefined && value === undefined)) {\n        if (typeof key === \"string\") {\n          this.encodeString(key);\n        } else if (typeof key === \"number\") {\n          this.encodeNumber(key);\n        } else if (typeof key === \"bigint\") {\n          this.encodeBigInt(key);\n        } else if (ArrayBuffer.isView(key)) {\n          this.encodeBinary(key);\n        } else if (key instanceof RawBinaryString) {\n          this.encodeBinaryAsString(key);\n        } else {\n          throw new Error(\"Unsupported map key type: \".concat(Object.prototype.toString.apply(key)));\n        }\n        this.doEncode(value, depth + 1);\n      }\n    }\n  };\n  Encoder.prototype.encodeExtension = function (ext) {\n    var size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large extension object: \".concat(size));\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  };\n  Encoder.prototype.writeU8 = function (value) {\n    this.ensureBufferSizeToWrite(1);\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  };\n  Encoder.prototype.writeU8a = function (values) {\n    var size = values.length;\n    this.ensureBufferSizeToWrite(size);\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  };\n  Encoder.prototype.writeI8 = function (value) {\n    this.ensureBufferSizeToWrite(1);\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  };\n  Encoder.prototype.writeU16 = function (value) {\n    this.ensureBufferSizeToWrite(2);\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  };\n  Encoder.prototype.writeI16 = function (value) {\n    this.ensureBufferSizeToWrite(2);\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  };\n  Encoder.prototype.writeU32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  };\n  Encoder.prototype.writeI32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  };\n  Encoder.prototype.writeF32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  };\n  Encoder.prototype.writeF64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  };\n  Encoder.prototype.writeU64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  };\n  Encoder.prototype.writeI64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  };\n  Encoder.prototype.writeBigUint64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setBigUint64(this.pos, value);\n    this.pos += 8;\n  };\n  Encoder.prototype.writeBigInt64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setBigInt64(this.pos, value);\n    this.pos += 8;\n  };\n  return Encoder;\n}();\nexport { Encoder };","map":{"version":3,"names":["utf8Count","utf8Encode","ExtensionCodec","setInt64","setUint64","ensureUint8Array","compareUint8Arrays","RawBinaryString","DEFAULT_MAX_DEPTH","DEFAULT_INITIAL_BUFFER_SIZE","Encoder","options","extensionCodec","_a","defaultCodec","context","forceBigIntToInt64","_b","maxDepth","_c","initialBufferSize","_d","sortKeys","_e","forceFloat32","_f","ignoreUndefined","_g","forceIntegerToFloat","_h","pos","view","DataView","ArrayBuffer","bytes","Uint8Array","buffer","prototype","reinitializeState","encodeSharedRef","object","doEncode","subarray","encode","slice","depth","Error","concat","encodeNil","encodeBoolean","encodeNumber","encodeString","encodeObject","ensureBufferSizeToWrite","sizeToWrite","requiredSize","byteLength","resizeBuffer","newSize","newBuffer","newBytes","newView","set","writeU8","Number","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","encodeNumberAsFloat","writeF32","writeF64","encodeBigInt","encodeBigIntAsInt64","BigInt","writeBigUint64","writeBigInt64","writeStringHeader","maxHeaderSize","ext","tryToEncode","encodeExtension","Array","isArray","encodeArray","isView","encodeBinary","encodeBinaryAsString","Map","encodeMap","encodeMapObject","Object","toString","apply","size","writeU8a","binaryString","rawBinaryValue","length","_i","object_1","item","countWithoutUndefined","map","keys","count","keys_1","key","get","undefined","sortMapKeys","numericKeys","stringKeys","rawStringKeys","binaryKeys","keys_2","isNaN","push","sort","a","b","entries","from","keys_3","value","data","type","setUint8","values","setInt8","setUint16","setInt16","setUint32","setInt32","setFloat32","setFloat64","setBigUint64","setBigInt64"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algorand-msgpack\\src\\Encoder.ts"],"sourcesContent":["import { utf8Count, utf8Encode } from \"./utils/utf8\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array, compareUint8Arrays, RawBinaryString } from \"./utils/typedArrays\";\nimport type { ExtData } from \"./ExtData\";\nimport type { ContextOf } from \"./context\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport type EncoderOptions<ContextType = undefined> = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Encodes bigint as Int64 or Uint64 if it's set to true, regardless of the size of bigint number.\n     * {@link forceIntegerToFloat} does not affect bigint if this is enabled.\n     * Depends on ES2020's {@link DataView#setBigInt64} and\n     * {@link DataView#setBigUint64}.\n     *\n     * Defaults to false.\n     */\n    forceBigIntToInt64: boolean;\n\n    /**\n     * The maximum depth in nested objects and arrays.\n     *\n     * Defaults to 100.\n     */\n    maxDepth: number;\n\n    /**\n     * The initial size of the internal buffer.\n     *\n     * Defaults to 2048.\n     */\n    initialBufferSize: number;\n\n    /**\n     * If `true`, the keys of an object is sorted. In other words, the encoded\n     * binary is canonical and thus comparable to another encoded binary.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     *\n     * If enabled, the encoder will throw an error if the NaN value is included in the keys of a\n     * map, since it is not comparable.\n     *\n     * If enabled and the keys of a map include multiple different types, each type will be sorted\n     * separately, and the order of the types will be as follows:\n     * 1. Numbers (including bigints)\n     * 2. Strings\n     * 3. Binary data\n     */\n    sortKeys: boolean;\n\n    /**\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\n     *\n     * Only use it if precisions don't matter.\n     *\n     * Defaults to `false`.\n     */\n    forceFloat32: boolean;\n\n    /**\n     * If `true`, an object property with `undefined` value are ignored.\n     * e.g. `{ foo: undefined }` will be encoded as `{}`, as `JSON.stringify()` does.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    ignoreUndefined: boolean;\n\n    /**\n     * If `true`, integer numbers are encoded as floating point numbers,\n     * with the `forceFloat32` option taken into account.\n     *\n     * Defaults to `false`.\n     */\n    forceIntegerToFloat: boolean;\n  }>\n> &\n  ContextOf<ContextType>;\n\nexport class Encoder<ContextType = undefined> {\n  private readonly extensionCodec: ExtensionCodecType<ContextType>;\n  private readonly context: ContextType;\n  private readonly forceBigIntToInt64: boolean;\n  private readonly maxDepth: number;\n  private readonly initialBufferSize: number;\n  private readonly sortKeys: boolean;\n  private readonly forceFloat32: boolean;\n  private readonly ignoreUndefined: boolean;\n  private readonly forceIntegerToFloat: boolean;\n\n  private pos: number;\n  private view: DataView;\n  private bytes: Uint8Array;\n\n  public constructor(options?: EncoderOptions<ContextType>) {\n    this.extensionCodec = options?.extensionCodec ?? (ExtensionCodec.defaultCodec as ExtensionCodecType<ContextType>);\n    this.context = (options as { context: ContextType } | undefined)?.context as ContextType; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\n\n    this.forceBigIntToInt64 = options?.forceBigIntToInt64 ?? false;\n    this.maxDepth = options?.maxDepth ?? DEFAULT_MAX_DEPTH;\n    this.initialBufferSize = options?.initialBufferSize ?? DEFAULT_INITIAL_BUFFER_SIZE;\n    this.sortKeys = options?.sortKeys ?? false;\n    this.forceFloat32 = options?.forceFloat32 ?? false;\n    this.ignoreUndefined = options?.ignoreUndefined ?? false;\n    this.forceIntegerToFloat = options?.forceIntegerToFloat ?? false;\n\n    this.pos = 0;\n    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n    this.bytes = new Uint8Array(this.view.buffer);\n  }\n\n  private reinitializeState() {\n    this.pos = 0;\n  }\n\n  /**\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n   *\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n   */\n  public encodeSharedRef(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  /**\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n   */\n  public encode(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.slice(0, this.pos);\n  }\n\n  private doEncode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  private resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  private encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  private encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n\n  private encodeNumber(object: number): void {\n    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      this.encodeNumberAsFloat(object);\n    }\n  }\n\n  private encodeNumberAsFloat(object: number): void {\n    if (this.forceFloat32) {\n      // float 32\n      this.writeU8(0xca);\n      this.writeF32(object);\n    } else {\n      // float 64\n      this.writeU8(0xcb);\n      this.writeF64(object);\n    }\n  }\n\n  private encodeBigInt(object: bigint) {\n    if (this.forceBigIntToInt64) {\n      this.encodeBigIntAsInt64(object);\n    } else if (object >= 0) {\n      if (object < 0x100000000 || this.forceIntegerToFloat) {\n        // uint 32 or lower, or force to float\n        this.encodeNumber(Number(object));\n      } else if (object < BigInt(\"0x10000000000000000\")) {\n        // uint 64\n        this.encodeBigIntAsInt64(object);\n      } else {\n        throw new Error(`Bigint is too large for uint64: ${object}`);\n      }\n    } else {\n      if (object >= -0x80000000 || this.forceIntegerToFloat) {\n        // int 32 or lower, or force to float\n        this.encodeNumber(Number(object));\n      } else if (object >= BigInt(-1) * BigInt(\"0x8000000000000000\")) {\n        // int 64\n        this.encodeBigIntAsInt64(object);\n      } else {\n        throw new Error(`Bigint is too small for int64: ${object}`);\n      }\n    }\n  }\n\n  private encodeBigIntAsInt64(object: bigint): void {\n    if (object >= BigInt(0)) {\n      // uint 64\n      this.writeU8(0xcf);\n      this.writeBigUint64(object);\n    } else {\n      // int 64\n      this.writeU8(0xd3);\n      this.writeBigInt64(object);\n    }\n  }\n\n  private writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  private encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n\n    const byteLength = utf8Count(object);\n    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n    this.writeStringHeader(byteLength);\n    utf8Encode(object, this.bytes, this.pos);\n    this.pos += byteLength;\n  }\n\n  private encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (object instanceof RawBinaryString) {\n      this.encodeBinaryAsString(object);\n    } else if (typeof object === \"bigint\") {\n      // this is here instead of in doEncode so that we can try encoding with an extension first,\n      // otherwise we would break existing extensions for bigints\n      this.encodeBigInt(object);\n    } else if (object instanceof Map) {\n      this.encodeMap(object, depth);\n    } else if (typeof object === \"object\") {\n      this.encodeMapObject(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  private encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeBinaryAsString(binaryString: RawBinaryString) {\n    const object = binaryString.rawBinaryValue;\n    this.writeStringHeader(object.byteLength);\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  private countWithoutUndefined(map: Map<unknown, unknown>, keys: ReadonlyArray<unknown>): number {\n    let count = 0;\n\n    for (const key of keys) {\n      if (map.get(key) !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private sortMapKeys(keys: Array<unknown>): Array<unknown> {\n    const numericKeys: Array<number | bigint> = [];\n    const stringKeys: Array<string> = [];\n    const rawStringKeys: Array<RawBinaryString> = [];\n    const binaryKeys: Array<Uint8Array> = [];\n    for (const key of keys) {\n      if (typeof key === \"number\") {\n        if (isNaN(key)) {\n          throw new Error(\"Cannot sort map keys with NaN value\");\n        }\n        numericKeys.push(key);\n      } else if (typeof key === \"bigint\") {\n        numericKeys.push(key);\n      } else if (typeof key === \"string\") {\n        stringKeys.push(key);\n      } else if (ArrayBuffer.isView(key)) {\n        binaryKeys.push(ensureUint8Array(key));\n      } else if (key instanceof RawBinaryString) {\n        rawStringKeys.push(key);\n      } else {\n        throw new Error(`Unsupported map key type: ${Object.prototype.toString.apply(key)}`);\n      }\n    }\n    numericKeys.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0)); // Avoid using === to compare numbers and bigints\n    stringKeys.sort();\n    rawStringKeys.sort((a, b) =>\n      compareUint8Arrays(ensureUint8Array(a.rawBinaryValue), ensureUint8Array(b.rawBinaryValue)),\n    );\n    binaryKeys.sort(compareUint8Arrays);\n    // At the moment this arbitrarily orders the keys as numeric, string, raw string, binary\n    return ([] as Array<unknown>).concat(numericKeys, stringKeys, rawStringKeys, binaryKeys);\n  }\n\n  private encodeMapObject(object: Record<string, unknown>, depth: number) {\n    this.encodeMap(new Map<string, unknown>(Object.entries(object)), depth);\n  }\n\n  private encodeMap(map: Map<unknown, unknown>, depth: number) {\n    let keys = Array.from(map.keys());\n    if (this.sortKeys) {\n      keys = this.sortMapKeys(keys);\n    }\n\n    // Map keys may encode to the same underlying value. For example, the number 3 and the bigint 3.\n    // This is also possible with ArrayBufferViews. We may want to introduce a new encoding option\n    // which checks for duplicate keys in this sense and throws an error if they are found.\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(map, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = map.get(key);\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        if (typeof key === \"string\") {\n          this.encodeString(key);\n        } else if (typeof key === \"number\") {\n          this.encodeNumber(key);\n        } else if (typeof key === \"bigint\") {\n          this.encodeBigInt(key);\n        } else if (ArrayBuffer.isView(key)) {\n          this.encodeBinary(key);\n        } else if (key instanceof RawBinaryString) {\n          this.encodeBinaryAsString(key);\n        } else {\n          throw new Error(`Unsupported map key type: ${Object.prototype.toString.apply(key)}`);\n        }\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  private encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  private writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  private writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeBigUint64(value: bigint) {\n    this.ensureBufferSizeToWrite(8);\n\n    this.view.setBigUint64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeBigInt64(value: bigint) {\n    this.ensureBufferSizeToWrite(8);\n\n    this.view.setBigInt64(this.pos, value);\n    this.pos += 8;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}