{"ast":null,"code":"import base32 from 'hi-base32';\nimport { Schema } from '../encoding.js';\n/**\n * Length of a block hash in bytes\n */\nconst blockHashByteLength = 32;\n/* eslint-disable class-methods-use-this */\n/**\n * Length of a 32-byte encoded in base32 without padding\n */\nconst base32Length = 52;\n/**\n * BlockHashSchema is a schema for block hashes.\n *\n * In msgapck, these types are encoded as 32-byte binary strings. In JSON, they\n * are encoded as strings prefixed with \"blk-\" followed by the base32 encoding\n * of the 32-byte block hash without any padding.\n */\nexport class BlockHashSchema extends Schema {\n  defaultValue() {\n    return new Uint8Array(blockHashByteLength);\n  }\n  isDefaultValue(data) {\n    return data instanceof Uint8Array && data.byteLength === blockHashByteLength && data.every(byte => byte === 0);\n  }\n  prepareMsgpack(data) {\n    if (data instanceof Uint8Array && data.byteLength === blockHashByteLength) {\n      return data;\n    }\n    throw new Error(`Invalid block hash: (${typeof data}) ${data}`);\n  }\n  fromPreparedMsgpack(encoded,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _rawStringProvider) {\n    if (encoded instanceof Uint8Array && encoded.byteLength === blockHashByteLength) {\n      return encoded;\n    }\n    throw new Error(`Invalid block hash: (${typeof encoded}) ${encoded}`);\n  }\n  prepareJSON(data,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _options) {\n    if (data instanceof Uint8Array && data.byteLength === blockHashByteLength) {\n      return `blk-${base32.encode(data).slice(0, base32Length)}`;\n    }\n    throw new Error(`Invalid block hash: (${typeof data}) ${data}`);\n  }\n  fromPreparedJSON(encoded) {\n    if (typeof encoded === 'string' && encoded.length === base32Length + 4 && encoded.startsWith('blk-')) {\n      return Uint8Array.from(base32.decode.asBytes(encoded.slice(4)));\n    }\n    throw new Error(`Invalid block hash: (${typeof encoded}) ${encoded}`);\n  }\n}","map":{"version":3,"names":["base32","Schema","blockHashByteLength","base32Length","BlockHashSchema","defaultValue","Uint8Array","isDefaultValue","data","byteLength","every","byte","prepareMsgpack","Error","fromPreparedMsgpack","encoded","_rawStringProvider","prepareJSON","_options","encode","slice","fromPreparedJSON","length","startsWith","from","decode","asBytes"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\encoding\\schema\\blockhash.ts"],"sourcesContent":["import base32 from 'hi-base32';\nimport {\n  Schema,\n  MsgpackEncodingData,\n  MsgpackRawStringProvider,\n  JSONEncodingData,\n  PrepareJSONOptions,\n} from '../encoding.js';\n\n/**\n * Length of a block hash in bytes\n */\nconst blockHashByteLength = 32;\n\n/* eslint-disable class-methods-use-this */\n\n/**\n * Length of a 32-byte encoded in base32 without padding\n */\nconst base32Length = 52;\n\n/**\n * BlockHashSchema is a schema for block hashes.\n *\n * In msgapck, these types are encoded as 32-byte binary strings. In JSON, they\n * are encoded as strings prefixed with \"blk-\" followed by the base32 encoding\n * of the 32-byte block hash without any padding.\n */\nexport class BlockHashSchema extends Schema {\n  public defaultValue(): Uint8Array {\n    return new Uint8Array(blockHashByteLength);\n  }\n\n  public isDefaultValue(data: unknown): boolean {\n    return (\n      data instanceof Uint8Array &&\n      data.byteLength === blockHashByteLength &&\n      data.every((byte) => byte === 0)\n    );\n  }\n\n  public prepareMsgpack(data: unknown): MsgpackEncodingData {\n    if (data instanceof Uint8Array && data.byteLength === blockHashByteLength) {\n      return data;\n    }\n    throw new Error(`Invalid block hash: (${typeof data}) ${data}`);\n  }\n\n  public fromPreparedMsgpack(\n    encoded: MsgpackEncodingData,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider: MsgpackRawStringProvider\n  ): Uint8Array {\n    if (\n      encoded instanceof Uint8Array &&\n      encoded.byteLength === blockHashByteLength\n    ) {\n      return encoded;\n    }\n    throw new Error(`Invalid block hash: (${typeof encoded}) ${encoded}`);\n  }\n\n  public prepareJSON(\n    data: unknown,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options: PrepareJSONOptions\n  ): JSONEncodingData {\n    if (data instanceof Uint8Array && data.byteLength === blockHashByteLength) {\n      return `blk-${base32.encode(data).slice(0, base32Length)}`;\n    }\n    throw new Error(`Invalid block hash: (${typeof data}) ${data}`);\n  }\n\n  public fromPreparedJSON(encoded: JSONEncodingData): Uint8Array {\n    if (\n      typeof encoded === 'string' &&\n      encoded.length === base32Length + 4 &&\n      encoded.startsWith('blk-')\n    ) {\n      return Uint8Array.from(base32.decode.asBytes(encoded.slice(4)));\n    }\n    throw new Error(`Invalid block hash: (${typeof encoded}) ${encoded}`);\n  }\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,WAAW;AAC9B,SACEC,MAAM,QAKD,gBAAgB;AAEvB;;;AAGA,MAAMC,mBAAmB,GAAG,EAAE;AAE9B;AAEA;;;AAGA,MAAMC,YAAY,GAAG,EAAE;AAEvB;;;;;;;AAOA,OAAM,MAAOC,eAAgB,SAAQH,MAAM;EAClCI,YAAYA,CAAA;IACjB,OAAO,IAAIC,UAAU,CAACJ,mBAAmB,CAAC;EAC5C;EAEOK,cAAcA,CAACC,IAAa;IACjC,OACEA,IAAI,YAAYF,UAAU,IAC1BE,IAAI,CAACC,UAAU,KAAKP,mBAAmB,IACvCM,IAAI,CAACE,KAAK,CAAEC,IAAI,IAAKA,IAAI,KAAK,CAAC,CAAC;EAEpC;EAEOC,cAAcA,CAACJ,IAAa;IACjC,IAAIA,IAAI,YAAYF,UAAU,IAAIE,IAAI,CAACC,UAAU,KAAKP,mBAAmB,EAAE;MACzE,OAAOM,IAAI;IACb;IACA,MAAM,IAAIK,KAAK,CAAC,wBAAwB,OAAOL,IAAI,KAAKA,IAAI,EAAE,CAAC;EACjE;EAEOM,mBAAmBA,CACxBC,OAA4B;EAC5B;EACAC,kBAA4C;IAE5C,IACED,OAAO,YAAYT,UAAU,IAC7BS,OAAO,CAACN,UAAU,KAAKP,mBAAmB,EAC1C;MACA,OAAOa,OAAO;IAChB;IACA,MAAM,IAAIF,KAAK,CAAC,wBAAwB,OAAOE,OAAO,KAAKA,OAAO,EAAE,CAAC;EACvE;EAEOE,WAAWA,CAChBT,IAAa;EACb;EACAU,QAA4B;IAE5B,IAAIV,IAAI,YAAYF,UAAU,IAAIE,IAAI,CAACC,UAAU,KAAKP,mBAAmB,EAAE;MACzE,OAAO,OAAOF,MAAM,CAACmB,MAAM,CAACX,IAAI,CAAC,CAACY,KAAK,CAAC,CAAC,EAAEjB,YAAY,CAAC,EAAE;IAC5D;IACA,MAAM,IAAIU,KAAK,CAAC,wBAAwB,OAAOL,IAAI,KAAKA,IAAI,EAAE,CAAC;EACjE;EAEOa,gBAAgBA,CAACN,OAAyB;IAC/C,IACE,OAAOA,OAAO,KAAK,QAAQ,IAC3BA,OAAO,CAACO,MAAM,KAAKnB,YAAY,GAAG,CAAC,IACnCY,OAAO,CAACQ,UAAU,CAAC,MAAM,CAAC,EAC1B;MACA,OAAOjB,UAAU,CAACkB,IAAI,CAACxB,MAAM,CAACyB,MAAM,CAACC,OAAO,CAACX,OAAO,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE;IACA,MAAM,IAAIP,KAAK,CAAC,wBAAwB,OAAOE,OAAO,KAAKA,OAAO,EAAE,CAAC;EACvE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}