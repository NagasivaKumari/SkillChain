{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\nvar __await = this && this.__await || function (v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n};\nvar __asyncGenerator = this && this.__asyncGenerator || function (thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n    i,\n    q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n};\nimport { prettyByte } from \"./utils/prettyByte.mjs\";\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nimport { IntMode, getInt64, getUint64, convertSafeIntegerToMode, UINT32_MAX } from \"./utils/int.mjs\";\nimport { utf8Decode } from \"./utils/utf8.mjs\";\nimport { createDataView, ensureUint8Array, RawBinaryString } from \"./utils/typedArrays.mjs\";\nimport { CachedKeyDecoder } from \"./CachedKeyDecoder.mjs\";\nimport { DecodeError } from \"./DecodeError.mjs\";\nvar STATE_ARRAY = \"array\";\nvar STATE_MAP_KEY = \"map_key\";\nvar STATE_MAP_VALUE = \"map_value\";\nfunction isValidMapKeyType(key, useMap, supportObjectNumberKeys) {\n  if (useMap) {\n    return typeof key === \"string\" || typeof key === \"number\" || typeof key === \"bigint\" || key instanceof Uint8Array || key instanceof RawBinaryString;\n  }\n  // Plain objects support a more limited set of key types\n  return typeof key === \"string\" || supportObjectNumberKeys && typeof key === \"number\";\n}\nvar StackPool = /** @class */function () {\n  function StackPool(useMap) {\n    this.useMap = useMap;\n    this.stack = [];\n    this.stackHeadPosition = -1;\n  }\n  Object.defineProperty(StackPool.prototype, \"length\", {\n    get: function () {\n      return this.stackHeadPosition + 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  StackPool.prototype.top = function () {\n    return this.stack[this.stackHeadPosition];\n  };\n  StackPool.prototype.pushArrayState = function (size) {\n    var state = this.getUninitializedStateFromPool();\n    state.type = STATE_ARRAY;\n    state.position = 0;\n    state.size = size;\n    state.array = new Array(size);\n  };\n  StackPool.prototype.pushMapState = function (size) {\n    var state = this.getUninitializedStateFromPool();\n    state.type = STATE_MAP_KEY;\n    state.readCount = 0;\n    state.size = size;\n    state.map = this.useMap ? new Map() : {};\n  };\n  StackPool.prototype.getUninitializedStateFromPool = function () {\n    this.stackHeadPosition++;\n    if (this.stackHeadPosition === this.stack.length) {\n      var partialState = {\n        type: undefined,\n        size: 0,\n        array: undefined,\n        position: 0,\n        readCount: 0,\n        map: undefined,\n        key: null\n      };\n      this.stack.push(partialState);\n    }\n    return this.stack[this.stackHeadPosition];\n  };\n  StackPool.prototype.release = function (state) {\n    var topStackState = this.stack[this.stackHeadPosition];\n    if (topStackState !== state) {\n      throw new Error(\"Invalid stack state. Released state is not on top of the stack.\");\n    }\n    if (state.type === STATE_ARRAY) {\n      var partialState = state;\n      partialState.size = 0;\n      partialState.array = undefined;\n      partialState.position = 0;\n      partialState.type = undefined;\n    }\n    if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {\n      var partialState = state;\n      partialState.size = 0;\n      partialState.map = undefined;\n      partialState.readCount = 0;\n      partialState.type = undefined;\n    }\n    this.stackHeadPosition--;\n  };\n  StackPool.prototype.reset = function () {\n    this.stack.length = 0;\n    this.stackHeadPosition = -1;\n  };\n  return StackPool;\n}();\nvar HEAD_BYTE_REQUIRED = -1;\nvar EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nvar EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\ntry {\n  // IE11: The spec says it should throw RangeError,\n  // IE11: but in IE11 it throws TypeError.\n  EMPTY_VIEW.getInt8(0);\n} catch (e) {\n  if (!(e instanceof RangeError)) {\n    throw new Error(\"This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access\");\n  }\n}\nexport var DataViewIndexOutOfBoundsError = RangeError;\nvar MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\nvar sharedCachedKeyDecoder = new CachedKeyDecoder();\nvar Decoder = /** @class */function () {\n  function Decoder(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    this.totalPos = 0;\n    this.pos = 0;\n    this.view = EMPTY_VIEW;\n    this.bytes = EMPTY_BYTES;\n    this.headByte = HEAD_BYTE_REQUIRED;\n    this.extensionCodec = (_a = options === null || options === void 0 ? void 0 : options.extensionCodec) !== null && _a !== void 0 ? _a : ExtensionCodec.defaultCodec;\n    this.context = options === null || options === void 0 ? void 0 : options.context; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\n    this.intMode = (_b = options === null || options === void 0 ? void 0 : options.intMode) !== null && _b !== void 0 ? _b : (options === null || options === void 0 ? void 0 : options.useBigInt64) ? IntMode.AS_ENCODED : IntMode.UNSAFE_NUMBER;\n    this.rawBinaryStringValues = (_c = options === null || options === void 0 ? void 0 : options.rawBinaryStringValues) !== null && _c !== void 0 ? _c : false;\n    this.rawBinaryStringKeys = (_d = options === null || options === void 0 ? void 0 : options.rawBinaryStringKeys) !== null && _d !== void 0 ? _d : false;\n    this.useRawBinaryStringClass = (_e = options === null || options === void 0 ? void 0 : options.useRawBinaryStringClass) !== null && _e !== void 0 ? _e : false;\n    this.useMap = (_f = options === null || options === void 0 ? void 0 : options.useMap) !== null && _f !== void 0 ? _f : false;\n    this.supportObjectNumberKeys = (_g = options === null || options === void 0 ? void 0 : options.supportObjectNumberKeys) !== null && _g !== void 0 ? _g : false;\n    this.maxStrLength = (_h = options === null || options === void 0 ? void 0 : options.maxStrLength) !== null && _h !== void 0 ? _h : UINT32_MAX;\n    this.maxBinLength = (_j = options === null || options === void 0 ? void 0 : options.maxBinLength) !== null && _j !== void 0 ? _j : UINT32_MAX;\n    this.maxArrayLength = (_k = options === null || options === void 0 ? void 0 : options.maxArrayLength) !== null && _k !== void 0 ? _k : UINT32_MAX;\n    this.maxMapLength = (_l = options === null || options === void 0 ? void 0 : options.maxMapLength) !== null && _l !== void 0 ? _l : UINT32_MAX;\n    this.maxExtLength = (_m = options === null || options === void 0 ? void 0 : options.maxExtLength) !== null && _m !== void 0 ? _m : UINT32_MAX;\n    this.keyDecoder = (options === null || options === void 0 ? void 0 : options.keyDecoder) !== undefined ? options.keyDecoder : sharedCachedKeyDecoder;\n    if (this.rawBinaryStringKeys && !this.useMap) {\n      throw new Error(\"rawBinaryStringKeys is only supported when useMap is true\");\n    }\n    this.stack = new StackPool(this.useMap);\n  }\n  Decoder.prototype.reinitializeState = function () {\n    this.totalPos = 0;\n    this.headByte = HEAD_BYTE_REQUIRED;\n    this.stack.reset();\n    // view, bytes, and pos will be re-initialized in setBuffer()\n  };\n  Decoder.prototype.setBuffer = function (buffer) {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  };\n  Decoder.prototype.appendBuffer = function (buffer) {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\n      this.setBuffer(buffer);\n    } else {\n      var remainingData = this.bytes.subarray(this.pos);\n      var newData = ensureUint8Array(buffer);\n      // concat remainingData + newData\n      var newBuffer = new Uint8Array(remainingData.length + newData.length);\n      newBuffer.set(remainingData);\n      newBuffer.set(newData, remainingData.length);\n      this.setBuffer(newBuffer);\n    }\n  };\n  Decoder.prototype.hasRemaining = function (size) {\n    return this.view.byteLength - this.pos >= size;\n  };\n  Decoder.prototype.createExtraByteError = function (posToShow) {\n    var _a = this,\n      view = _a.view,\n      pos = _a.pos;\n    return new RangeError(\"Extra \".concat(view.byteLength - pos, \" of \").concat(view.byteLength, \" byte(s) found at buffer[\").concat(posToShow, \"]\"));\n  };\n  /**\n   * @throws {@link DecodeError}\n   * @throws {@link RangeError}\n   */\n  Decoder.prototype.decode = function (buffer) {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n    var object = this.doDecodeSync();\n    if (this.hasRemaining(1)) {\n      throw this.createExtraByteError(this.pos);\n    }\n    return object;\n  };\n  Decoder.prototype.decodeMulti = function (buffer) {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          this.reinitializeState();\n          this.setBuffer(buffer);\n          _a.label = 1;\n        case 1:\n          if (!this.hasRemaining(1)) return [3 /*break*/, 3];\n          return [4 /*yield*/, this.doDecodeSync()];\n        case 2:\n          _a.sent();\n          return [3 /*break*/, 1];\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  };\n  Decoder.prototype.decodeAsync = function (stream) {\n    var _a, stream_1, stream_1_1;\n    var _b, e_1, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var decoded, object, buffer, e_1_1, _e, headByte, pos, totalPos;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            decoded = false;\n            _f.label = 1;\n          case 1:\n            _f.trys.push([1, 6, 7, 12]);\n            _a = true, stream_1 = __asyncValues(stream);\n            _f.label = 2;\n          case 2:\n            return [4 /*yield*/, stream_1.next()];\n          case 3:\n            if (!(stream_1_1 = _f.sent(), _b = stream_1_1.done, !_b)) return [3 /*break*/, 5];\n            _d = stream_1_1.value;\n            _a = false;\n            buffer = _d;\n            if (decoded) {\n              throw this.createExtraByteError(this.totalPos);\n            }\n            this.appendBuffer(buffer);\n            try {\n              object = this.doDecodeSync();\n              decoded = true;\n            } catch (e) {\n              if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n                throw e; // rethrow\n              }\n              // fallthrough\n            }\n            this.totalPos += this.pos;\n            _f.label = 4;\n          case 4:\n            _a = true;\n            return [3 /*break*/, 2];\n          case 5:\n            return [3 /*break*/, 12];\n          case 6:\n            e_1_1 = _f.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 12];\n          case 7:\n            _f.trys.push([7,, 10, 11]);\n            if (!(!_a && !_b && (_c = stream_1.return))) return [3 /*break*/, 9];\n            return [4 /*yield*/, _c.call(stream_1)];\n          case 8:\n            _f.sent();\n            _f.label = 9;\n          case 9:\n            return [3 /*break*/, 11];\n          case 10:\n            if (e_1) throw e_1.error;\n            return [7 /*endfinally*/];\n          case 11:\n            return [7 /*endfinally*/];\n          case 12:\n            if (decoded) {\n              if (this.hasRemaining(1)) {\n                throw this.createExtraByteError(this.totalPos);\n              }\n              return [2 /*return*/, object];\n            }\n            _e = this, headByte = _e.headByte, pos = _e.pos, totalPos = _e.totalPos;\n            throw new RangeError(\"Insufficient data in parsing \".concat(prettyByte(headByte), \" at \").concat(totalPos, \" (\").concat(pos, \" in the current buffer)\"));\n        }\n      });\n    });\n  };\n  Decoder.prototype.decodeArrayStream = function (stream) {\n    return this.decodeMultiAsync(stream, true);\n  };\n  Decoder.prototype.decodeStream = function (stream) {\n    return this.decodeMultiAsync(stream, false);\n  };\n  Decoder.prototype.decodeMultiAsync = function (stream, isArray) {\n    return __asyncGenerator(this, arguments, function decodeMultiAsync_1() {\n      var isArrayHeaderRequired, arrayItemsLeft, _a, stream_2, stream_2_1, buffer, e_2, e_3_1;\n      var _b, e_3, _c, _d;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            isArrayHeaderRequired = isArray;\n            arrayItemsLeft = -1;\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 13, 14, 19]);\n            _a = true, stream_2 = __asyncValues(stream);\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, __await(stream_2.next())];\n          case 3:\n            if (!(stream_2_1 = _e.sent(), _b = stream_2_1.done, !_b)) return [3 /*break*/, 12];\n            _d = stream_2_1.value;\n            _a = false;\n            buffer = _d;\n            if (isArray && arrayItemsLeft === 0) {\n              throw this.createExtraByteError(this.totalPos);\n            }\n            this.appendBuffer(buffer);\n            if (isArrayHeaderRequired) {\n              arrayItemsLeft = this.readArraySize();\n              isArrayHeaderRequired = false;\n              this.complete();\n            }\n            _e.label = 4;\n          case 4:\n            _e.trys.push([4, 9,, 10]);\n            _e.label = 5;\n          case 5:\n            if (!true) return [3 /*break*/, 8];\n            return [4 /*yield*/, __await(this.doDecodeSync())];\n          case 6:\n            return [4 /*yield*/, _e.sent()];\n          case 7:\n            _e.sent();\n            if (--arrayItemsLeft === 0) {\n              return [3 /*break*/, 8];\n            }\n            return [3 /*break*/, 5];\n          case 8:\n            return [3 /*break*/, 10];\n          case 9:\n            e_2 = _e.sent();\n            if (!(e_2 instanceof DataViewIndexOutOfBoundsError)) {\n              throw e_2; // rethrow\n            }\n            return [3 /*break*/, 10];\n          case 10:\n            this.totalPos += this.pos;\n            _e.label = 11;\n          case 11:\n            _a = true;\n            return [3 /*break*/, 2];\n          case 12:\n            return [3 /*break*/, 19];\n          case 13:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 19];\n          case 14:\n            _e.trys.push([14,, 17, 18]);\n            if (!(!_a && !_b && (_c = stream_2.return))) return [3 /*break*/, 16];\n            return [4 /*yield*/, __await(_c.call(stream_2))];\n          case 15:\n            _e.sent();\n            _e.label = 16;\n          case 16:\n            return [3 /*break*/, 18];\n          case 17:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 18:\n            return [7 /*endfinally*/];\n          case 19:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  Decoder.prototype.doDecodeSync = function () {\n    DECODE: while (true) {\n      var headByte = this.readHeadByte();\n      var object = void 0;\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = this.convertNumber(headByte - 0x100);\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = this.convertNumber(headByte);\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          var size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = this.useMap ? new Map() : {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          var size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          var byteLength = headByte - 0xa0;\n          object = this.decodeString(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.convertNumber(this.readU8());\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.convertNumber(this.readU16());\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.convertNumber(this.readU32());\n      } else if (headByte === 0xcf) {\n        // uint 64\n        object = this.readU64();\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.convertNumber(this.readI8());\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.convertNumber(this.readI16());\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.convertNumber(this.readI32());\n      } else if (headByte === 0xd3) {\n        // int 64\n        object = this.readI64();\n      } else if (headByte === 0xd9) {\n        // str 8\n        var byteLength = this.lookU8();\n        object = this.decodeString(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        var byteLength = this.lookU16();\n        object = this.decodeString(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        var byteLength = this.lookU32();\n        object = this.decodeString(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        var size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        var size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        var size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        var size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        var size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        var size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        var size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        var size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        var size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        var size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new DecodeError(\"Unrecognized type byte: \".concat(prettyByte(headByte)));\n      }\n      this.complete();\n      var stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        var state = stack.top();\n        if (state.type === STATE_ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            object = state.array;\n            stack.release(state);\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === STATE_MAP_KEY) {\n          if (!isValidMapKeyType(object, this.useMap, this.supportObjectNumberKeys)) {\n            var acceptableTypes = this.useMap ? \"string, number, bigint, or Uint8Array\" : this.supportObjectNumberKeys ? \"string or number\" : \"string\";\n            throw new DecodeError(\"The type of key must be \".concat(acceptableTypes, \" but got \").concat(typeof object));\n          }\n          if (!this.useMap && object === \"__proto__\") {\n            throw new DecodeError(\"The key __proto__ is not allowed\");\n          }\n          state.key = object;\n          state.type = STATE_MAP_VALUE;\n          continue DECODE;\n        } else {\n          // it must be `state.type === State.MAP_VALUE` here\n          if (this.useMap) {\n            state.map.set(state.key, object);\n          } else {\n            state.map[state.key] = object;\n          }\n          state.readCount++;\n          if (state.readCount === state.size) {\n            object = state.map;\n            stack.release(state);\n          } else {\n            state.key = null;\n            state.type = STATE_MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n      return object;\n    }\n  };\n  Decoder.prototype.readHeadByte = function () {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n    return this.headByte;\n  };\n  Decoder.prototype.complete = function () {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  };\n  Decoder.prototype.readArraySize = function () {\n    var headByte = this.readHeadByte();\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default:\n        {\n          if (headByte < 0xa0) {\n            return headByte - 0x90;\n          } else {\n            throw new DecodeError(\"Unrecognized array type byte: \".concat(prettyByte(headByte)));\n          }\n        }\n    }\n  };\n  Decoder.prototype.pushMapState = function (size) {\n    if (size > this.maxMapLength) {\n      throw new DecodeError(\"Max length exceeded: map length (\".concat(size, \") > maxMapLengthLength (\").concat(this.maxMapLength, \")\"));\n    }\n    this.stack.pushMapState(size);\n  };\n  Decoder.prototype.pushArrayState = function (size) {\n    if (size > this.maxArrayLength) {\n      throw new DecodeError(\"Max length exceeded: array length (\".concat(size, \") > maxArrayLength (\").concat(this.maxArrayLength, \")\"));\n    }\n    this.stack.pushArrayState(size);\n  };\n  Decoder.prototype.decodeString = function (byteLength, headerOffset) {\n    if (this.stateIsMapKey() ? this.rawBinaryStringKeys : this.rawBinaryStringValues) {\n      var decoded = this.decodeBinary(byteLength, headerOffset);\n      if (this.useRawBinaryStringClass) {\n        return new RawBinaryString(decoded);\n      }\n      return decoded;\n    }\n    return this.decodeUtf8String(byteLength, headerOffset);\n  };\n  Decoder.prototype.decodeUtf8String = function (byteLength, headerOffset) {\n    var _a;\n    if (byteLength > this.maxStrLength) {\n      throw new DecodeError(\"Max length exceeded: UTF-8 byte length (\".concat(byteLength, \") > maxStrLength (\").concat(this.maxStrLength, \")\"));\n    }\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n    var offset = this.pos + headerOffset;\n    var object;\n    if (this.stateIsMapKey() && ((_a = this.keyDecoder) === null || _a === void 0 ? void 0 : _a.canBeCached(byteLength))) {\n      object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n    } else {\n      object = utf8Decode(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  };\n  Decoder.prototype.stateIsMapKey = function () {\n    if (this.stack.length > 0) {\n      var state = this.stack.top();\n      return state.type === STATE_MAP_KEY;\n    }\n    return false;\n  };\n  Decoder.prototype.decodeBinary = function (byteLength, headOffset) {\n    if (byteLength > this.maxBinLength) {\n      throw new DecodeError(\"Max length exceeded: bin length (\".concat(byteLength, \") > maxBinLength (\").concat(this.maxBinLength, \")\"));\n    }\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n    var offset = this.pos + headOffset;\n    var object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  };\n  Decoder.prototype.decodeExtension = function (size, headOffset) {\n    if (size > this.maxExtLength) {\n      throw new DecodeError(\"Max length exceeded: ext length (\".concat(size, \") > maxExtLength (\").concat(this.maxExtLength, \")\"));\n    }\n    var extType = this.view.getInt8(this.pos + headOffset);\n    var data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType, this.context);\n  };\n  Decoder.prototype.convertNumber = function (value) {\n    return convertSafeIntegerToMode(value, this.intMode);\n  };\n  Decoder.prototype.lookU8 = function () {\n    return this.view.getUint8(this.pos);\n  };\n  Decoder.prototype.lookU16 = function () {\n    return this.view.getUint16(this.pos);\n  };\n  Decoder.prototype.lookU32 = function () {\n    return this.view.getUint32(this.pos);\n  };\n  Decoder.prototype.readU8 = function () {\n    var value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  };\n  Decoder.prototype.readI8 = function () {\n    var value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  };\n  Decoder.prototype.readU16 = function () {\n    var value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  };\n  Decoder.prototype.readI16 = function () {\n    var value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  };\n  Decoder.prototype.readU32 = function () {\n    var value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  };\n  Decoder.prototype.readI32 = function () {\n    var value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  };\n  Decoder.prototype.readU64 = function () {\n    var value = getUint64(this.view, this.pos, this.intMode);\n    this.pos += 8;\n    return value;\n  };\n  Decoder.prototype.readI64 = function () {\n    var value = getInt64(this.view, this.pos, this.intMode);\n    this.pos += 8;\n    return value;\n  };\n  Decoder.prototype.readF32 = function () {\n    var value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  };\n  Decoder.prototype.readF64 = function () {\n    var value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  };\n  return Decoder;\n}();\nexport { Decoder };","map":{"version":3,"names":["prettyByte","ExtensionCodec","IntMode","getInt64","getUint64","convertSafeIntegerToMode","UINT32_MAX","utf8Decode","createDataView","ensureUint8Array","RawBinaryString","CachedKeyDecoder","DecodeError","STATE_ARRAY","STATE_MAP_KEY","STATE_MAP_VALUE","isValidMapKeyType","key","useMap","supportObjectNumberKeys","Uint8Array","StackPool","stack","stackHeadPosition","Object","defineProperty","prototype","get","top","pushArrayState","size","state","getUninitializedStateFromPool","type","position","array","Array","pushMapState","readCount","map","Map","length","partialState","undefined","push","release","topStackState","Error","reset","HEAD_BYTE_REQUIRED","EMPTY_VIEW","DataView","ArrayBuffer","EMPTY_BYTES","buffer","getInt8","e","RangeError","DataViewIndexOutOfBoundsError","MORE_DATA","sharedCachedKeyDecoder","Decoder","options","totalPos","pos","view","bytes","headByte","extensionCodec","_a","defaultCodec","context","intMode","_b","useBigInt64","AS_ENCODED","UNSAFE_NUMBER","rawBinaryStringValues","_c","rawBinaryStringKeys","_d","useRawBinaryStringClass","_e","_f","_g","maxStrLength","_h","maxBinLength","_j","maxArrayLength","_k","maxMapLength","_l","maxExtLength","_m","keyDecoder","reinitializeState","setBuffer","appendBuffer","hasRemaining","remainingData","subarray","newData","newBuffer","set","byteLength","createExtraByteError","posToShow","concat","decode","object","doDecodeSync","decodeMulti","sent","decodeAsync","stream","decoded","stream_1","__asyncValues","stream_1_1","value","decodeArrayStream","decodeMultiAsync","decodeStream","isArray","isArrayHeaderRequired","arrayItemsLeft","stream_2","stream_2_1","readArraySize","complete","e_2","DECODE","readHeadByte","convertNumber","decodeString","readF32","readF64","readU8","readU16","readU32","readU64","readI8","readI16","readI32","readI64","lookU8","lookU16","lookU32","decodeBinary","decodeExtension","acceptableTypes","headerOffset","stateIsMapKey","decodeUtf8String","offset","canBeCached","headOffset","extType","data","getUint8","getUint16","getUint32","getInt16","getInt32","getFloat32","getFloat64"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algorand-msgpack\\src\\Decoder.ts"],"sourcesContent":["import { prettyByte } from \"./utils/prettyByte\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { IntMode, getInt64, getUint64, convertSafeIntegerToMode, UINT32_MAX } from \"./utils/int\";\nimport { utf8Decode } from \"./utils/utf8\";\nimport { createDataView, ensureUint8Array, RawBinaryString } from \"./utils/typedArrays\";\nimport { CachedKeyDecoder, KeyDecoder } from \"./CachedKeyDecoder\";\nimport { DecodeError } from \"./DecodeError\";\nimport type { ContextOf } from \"./context\";\n\nexport type DecoderOptions<ContextType = undefined> = Readonly<\n  Partial<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Decodes Int64 and Uint64 as bigint if it's set to true.\n     * Depends on ES2020's {@link DataView#getBigInt64} and\n     * {@link DataView#getBigUint64}.\n     *\n     * Defaults to false. If true, equivalent to intMode: IntMode.AS_ENCODED.\n     */\n    useBigInt64: boolean;\n\n    /**\n     * Allows for more fine-grained control of BigInt handling, overrides useBigInt64.\n     *\n     * Defaults to IntMode.AS_ENCODED if useBigInt64 is true or IntMode.UNSAFE_NUMBER otherwise.\n     */\n    intMode?: IntMode;\n\n    /**\n     * By default, string values will be decoded as UTF-8 strings. However, if this option is true,\n     * string values will be returned as Uint8Arrays without additional decoding.\n     *\n     * This is useful if the strings may contain invalid UTF-8 sequences.\n     *\n     * When enabled, raw string length is limited by the maxBinLength option.\n     *\n     * Note that this option only applies to string values, not map keys. See `rawBinaryStringKeys`\n     * for map keys.\n     */\n    rawBinaryStringValues: boolean;\n\n    /**\n     * By default, map keys will be decoded as UTF-8 strings. However, if this option is true, map\n     * keys will be returned as Uint8Arrays without additional decoding.\n     *\n     * Requires `useMap` to be true, since plain objects do not support binary keys.\n     *\n     * When enabled, raw string length is limited by the maxBinLength option.\n     *\n     * Note that this option only applies to map keys, not string values. See `rawBinaryStringValues`\n     * for string values.\n     */\n    rawBinaryStringKeys: boolean;\n\n    /**\n     * If true, the decoder will use the RawBinaryString class to store raw binary strings created\n     * during decoding from the rawBinaryStringValues and rawBinaryStringKeys options. If false, it\n     * will use Uint8Arrays.\n     *\n     * Defaults to false.\n     *\n     * Has no effect if rawBinaryStringValues and rawBinaryStringKeys are both false.\n     */\n    useRawBinaryStringClass: boolean;\n\n    /**\n     * If true, the decoder will use the Map object to store map values. If false, it will use plain\n     * objects. Defaults to false.\n     *\n     * Besides the type of container, the main difference is that Map objects support a wider range\n     * of key types. Plain objects only support string keys (though you can enable\n     * `supportObjectNumberKeys` to coerce number keys to strings), while Map objects support\n     * strings, numbers, bigints, and Uint8Arrays.\n     */\n    useMap: boolean;\n\n    /**\n     * If true, the decoder will support decoding numbers as map keys on plain objects. Defaults to\n     * false.\n     *\n     * Note that any numbers used as object keys will be converted to strings, so there is a risk of\n     * key collision as well as the inability to re-encode the object to the same representation.\n     *\n     * This option is ignored if `useMap` is true.\n     *\n     * This is useful for backwards compatibility before `useMap` was introduced. Consider instead\n     * using `useMap` for new code.\n     */\n    supportObjectNumberKeys: boolean;\n\n    /**\n     * Maximum string length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n\n    /**\n     * An object key decoder. Defaults to the shared instance of {@link CachedKeyDecoder}.\n     * `null` is a special value to disable the use of the key decoder at all.\n     */\n    keyDecoder: KeyDecoder | null;\n  }>\n> &\n  ContextOf<ContextType>;\n\nconst STATE_ARRAY = \"array\";\nconst STATE_MAP_KEY = \"map_key\";\nconst STATE_MAP_VALUE = \"map_value\";\n\ntype MapKeyType = string | number | bigint | Uint8Array;\n\nfunction isValidMapKeyType(key: unknown, useMap: boolean, supportObjectNumberKeys: boolean): key is MapKeyType {\n  if (useMap) {\n    return (\n      typeof key === \"string\" ||\n      typeof key === \"number\" ||\n      typeof key === \"bigint\" ||\n      key instanceof Uint8Array ||\n      key instanceof RawBinaryString\n    );\n  }\n  // Plain objects support a more limited set of key types\n  return typeof key === \"string\" || (supportObjectNumberKeys && typeof key === \"number\");\n}\n\ntype StackMapState = {\n  type: typeof STATE_MAP_KEY | typeof STATE_MAP_VALUE;\n  size: number;\n  key: MapKeyType | null;\n  readCount: number;\n  map: Record<string, unknown> | Map<MapKeyType, unknown>;\n};\n\ntype StackArrayState = {\n  type: typeof STATE_ARRAY;\n  size: number;\n  array: Array<unknown>;\n  position: number;\n};\n\nclass StackPool {\n  private readonly stack: Array<StackState> = [];\n  private stackHeadPosition = -1;\n\n  constructor(private readonly useMap: boolean) {}\n\n  public get length(): number {\n    return this.stackHeadPosition + 1;\n  }\n\n  public top(): StackState | undefined {\n    return this.stack[this.stackHeadPosition];\n  }\n\n  public pushArrayState(size: number) {\n    const state = this.getUninitializedStateFromPool() as StackArrayState;\n\n    state.type = STATE_ARRAY;\n    state.position = 0;\n    state.size = size;\n    state.array = new Array(size);\n  }\n\n  public pushMapState(size: number) {\n    const state = this.getUninitializedStateFromPool() as StackMapState;\n\n    state.type = STATE_MAP_KEY;\n    state.readCount = 0;\n    state.size = size;\n    state.map = this.useMap ? new Map() : {};\n  }\n\n  private getUninitializedStateFromPool() {\n    this.stackHeadPosition++;\n\n    if (this.stackHeadPosition === this.stack.length) {\n      const partialState: Partial<StackState> = {\n        type: undefined,\n        size: 0,\n        array: undefined,\n        position: 0,\n        readCount: 0,\n        map: undefined,\n        key: null,\n      };\n\n      this.stack.push(partialState as StackState);\n    }\n\n    return this.stack[this.stackHeadPosition];\n  }\n\n  public release(state: StackState): void {\n    const topStackState = this.stack[this.stackHeadPosition];\n\n    if (topStackState !== state) {\n      throw new Error(\"Invalid stack state. Released state is not on top of the stack.\");\n    }\n\n    if (state.type === STATE_ARRAY) {\n      const partialState = state as Partial<StackArrayState>;\n      partialState.size = 0;\n      partialState.array = undefined;\n      partialState.position = 0;\n      partialState.type = undefined;\n    }\n\n    if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {\n      const partialState = state as Partial<StackMapState>;\n      partialState.size = 0;\n      partialState.map = undefined;\n      partialState.readCount = 0;\n      partialState.type = undefined;\n    }\n\n    this.stackHeadPosition--;\n  }\n\n  public reset(): void {\n    this.stack.length = 0;\n    this.stackHeadPosition = -1;\n  }\n}\n\ntype StackState = StackArrayState | StackMapState;\n\nconst HEAD_BYTE_REQUIRED = -1;\n\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n\ntry {\n  // IE11: The spec says it should throw RangeError,\n  // IE11: but in IE11 it throws TypeError.\n  EMPTY_VIEW.getInt8(0);\n} catch (e) {\n  if (!(e instanceof RangeError)) {\n    throw new Error(\n      \"This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access\",\n    );\n  }\n}\nexport const DataViewIndexOutOfBoundsError = RangeError;\n\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\n\nconst sharedCachedKeyDecoder = new CachedKeyDecoder();\n\nexport class Decoder<ContextType = undefined> {\n  private readonly extensionCodec: ExtensionCodecType<ContextType>;\n  private readonly context: ContextType;\n  private readonly intMode: IntMode;\n  private readonly rawBinaryStringValues: boolean;\n  private readonly rawBinaryStringKeys: boolean;\n  private readonly useRawBinaryStringClass: boolean;\n  private readonly useMap: boolean;\n  private readonly supportObjectNumberKeys: boolean;\n  private readonly maxStrLength: number;\n  private readonly maxBinLength: number;\n  private readonly maxArrayLength: number;\n  private readonly maxMapLength: number;\n  private readonly maxExtLength: number;\n  private readonly keyDecoder: KeyDecoder | null;\n\n  private totalPos = 0;\n  private pos = 0;\n\n  private view = EMPTY_VIEW;\n  private bytes = EMPTY_BYTES;\n  private headByte = HEAD_BYTE_REQUIRED;\n  private readonly stack: StackPool;\n\n  public constructor(options?: DecoderOptions<ContextType>) {\n    this.extensionCodec = options?.extensionCodec ?? (ExtensionCodec.defaultCodec as ExtensionCodecType<ContextType>);\n    this.context = (options as { context: ContextType } | undefined)?.context as ContextType; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\n\n    this.intMode = options?.intMode ?? (options?.useBigInt64 ? IntMode.AS_ENCODED : IntMode.UNSAFE_NUMBER);\n    this.rawBinaryStringValues = options?.rawBinaryStringValues ?? false;\n    this.rawBinaryStringKeys = options?.rawBinaryStringKeys ?? false;\n    this.useRawBinaryStringClass = options?.useRawBinaryStringClass ?? false;\n    this.useMap = options?.useMap ?? false;\n    this.supportObjectNumberKeys = options?.supportObjectNumberKeys ?? false;\n    this.maxStrLength = options?.maxStrLength ?? UINT32_MAX;\n    this.maxBinLength = options?.maxBinLength ?? UINT32_MAX;\n    this.maxArrayLength = options?.maxArrayLength ?? UINT32_MAX;\n    this.maxMapLength = options?.maxMapLength ?? UINT32_MAX;\n    this.maxExtLength = options?.maxExtLength ?? UINT32_MAX;\n    this.keyDecoder = options?.keyDecoder !== undefined ? options.keyDecoder : sharedCachedKeyDecoder;\n\n    if (this.rawBinaryStringKeys && !this.useMap) {\n      throw new Error(\"rawBinaryStringKeys is only supported when useMap is true\");\n    }\n\n    this.stack = new StackPool(this.useMap);\n  }\n\n  private reinitializeState() {\n    this.totalPos = 0;\n    this.headByte = HEAD_BYTE_REQUIRED;\n    this.stack.reset();\n\n    // view, bytes, and pos will be re-initialized in setBuffer()\n  }\n\n  private setBuffer(buffer: ArrayLike<number> | BufferSource): void {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  }\n\n  private appendBuffer(buffer: ArrayLike<number> | BufferSource) {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\n      this.setBuffer(buffer);\n    } else {\n      const remainingData = this.bytes.subarray(this.pos);\n      const newData = ensureUint8Array(buffer);\n\n      // concat remainingData + newData\n      const newBuffer = new Uint8Array(remainingData.length + newData.length);\n      newBuffer.set(remainingData);\n      newBuffer.set(newData, remainingData.length);\n      this.setBuffer(newBuffer);\n    }\n  }\n\n  private hasRemaining(size: number) {\n    return this.view.byteLength - this.pos >= size;\n  }\n\n  private createExtraByteError(posToShow: number): Error {\n    const { view, pos } = this;\n    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);\n  }\n\n  /**\n   * @throws {@link DecodeError}\n   * @throws {@link RangeError}\n   */\n  public decode(buffer: ArrayLike<number> | BufferSource): unknown {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    const object = this.doDecodeSync();\n    if (this.hasRemaining(1)) {\n      throw this.createExtraByteError(this.pos);\n    }\n    return object;\n  }\n\n  public *decodeMulti(buffer: ArrayLike<number> | BufferSource): Generator<unknown, void, unknown> {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    while (this.hasRemaining(1)) {\n      yield this.doDecodeSync();\n    }\n  }\n\n  public async decodeAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>): Promise<unknown> {\n    let decoded = false;\n    let object: unknown;\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      try {\n        object = this.doDecodeSync();\n        decoded = true;\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n\n    if (decoded) {\n      if (this.hasRemaining(1)) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n      return object;\n    }\n\n    const { headByte, pos, totalPos } = this;\n    throw new RangeError(\n      `Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\n    );\n  }\n\n  public decodeArrayStream(\n    stream: AsyncIterable<ArrayLike<number> | BufferSource>,\n  ): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, true);\n  }\n\n  public decodeStream(stream: AsyncIterable<ArrayLike<number> | BufferSource>): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, false);\n  }\n\n  private async *decodeMultiAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>, isArray: boolean) {\n    let isArrayHeaderRequired = isArray;\n    let arrayItemsLeft = -1;\n\n    for await (const buffer of stream) {\n      if (isArray && arrayItemsLeft === 0) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      if (isArrayHeaderRequired) {\n        arrayItemsLeft = this.readArraySize();\n        isArrayHeaderRequired = false;\n        this.complete();\n      }\n\n      try {\n        while (true) {\n          yield this.doDecodeSync();\n          if (--arrayItemsLeft === 0) {\n            break;\n          }\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n  }\n\n  private doDecodeSync(): unknown {\n    DECODE: while (true) {\n      const headByte = this.readHeadByte();\n      let object: unknown;\n\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = this.convertNumber(headByte - 0x100);\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = this.convertNumber(headByte);\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          const size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = this.useMap ? new Map() : {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          const size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          const byteLength = headByte - 0xa0;\n          object = this.decodeString(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.convertNumber(this.readU8());\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.convertNumber(this.readU16());\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.convertNumber(this.readU32());\n      } else if (headByte === 0xcf) {\n        // uint 64\n        object = this.readU64();\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.convertNumber(this.readI8());\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.convertNumber(this.readI16());\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.convertNumber(this.readI32());\n      } else if (headByte === 0xd3) {\n        // int 64\n        object = this.readI64();\n      } else if (headByte === 0xd9) {\n        // str 8\n        const byteLength = this.lookU8();\n        object = this.decodeString(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        const byteLength = this.lookU16();\n        object = this.decodeString(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        const byteLength = this.lookU32();\n        object = this.decodeString(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        const size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        const size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        const size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        const size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        const size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        const size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);\n      }\n\n      this.complete();\n\n      const stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        const state = stack.top()!;\n        if (state.type === STATE_ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            object = state.array;\n            stack.release(state);\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === STATE_MAP_KEY) {\n          if (!isValidMapKeyType(object, this.useMap, this.supportObjectNumberKeys)) {\n            const acceptableTypes = this.useMap\n              ? \"string, number, bigint, or Uint8Array\"\n              : this.supportObjectNumberKeys\n              ? \"string or number\"\n              : \"string\";\n            throw new DecodeError(`The type of key must be ${acceptableTypes} but got ${typeof object}`);\n          }\n          if (!this.useMap && object === \"__proto__\") {\n            throw new DecodeError(\"The key __proto__ is not allowed\");\n          }\n\n          state.key = object;\n          state.type = STATE_MAP_VALUE;\n          continue DECODE;\n        } else {\n          // it must be `state.type === State.MAP_VALUE` here\n\n          if (this.useMap) {\n            (state.map as Map<MapKeyType, unknown>).set(state.key!, object);\n          } else {\n            (state.map as Record<string, unknown>)[state.key as string] = object;\n          }\n          state.readCount++;\n\n          if (state.readCount === state.size) {\n            object = state.map;\n            stack.release(state);\n          } else {\n            state.key = null;\n            state.type = STATE_MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n\n      return object;\n    }\n  }\n\n  private readHeadByte(): number {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n\n    return this.headByte;\n  }\n\n  private complete(): void {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  private readArraySize(): number {\n    const headByte = this.readHeadByte();\n\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default: {\n        if (headByte < 0xa0) {\n          return headByte - 0x90;\n        } else {\n          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);\n        }\n      }\n    }\n  }\n\n  private pushMapState(size: number) {\n    if (size > this.maxMapLength) {\n      throw new DecodeError(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n    }\n\n    this.stack.pushMapState(size);\n  }\n\n  private pushArrayState(size: number) {\n    if (size > this.maxArrayLength) {\n      throw new DecodeError(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n    }\n\n    this.stack.pushArrayState(size);\n  }\n\n  private decodeString(byteLength: number, headerOffset: number): string | Uint8Array | RawBinaryString {\n    if (this.stateIsMapKey() ? this.rawBinaryStringKeys : this.rawBinaryStringValues) {\n      const decoded = this.decodeBinary(byteLength, headerOffset);\n      if (this.useRawBinaryStringClass) {\n        return new RawBinaryString(decoded);\n      }\n      return decoded;\n    }\n    return this.decodeUtf8String(byteLength, headerOffset);\n  }\n\n  private decodeUtf8String(byteLength: number, headerOffset: number): string {\n    if (byteLength > this.maxStrLength) {\n      throw new DecodeError(\n        `Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`,\n      );\n    }\n\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headerOffset;\n    let object: string;\n    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {\n      object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n    } else {\n      object = utf8Decode(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  }\n\n  private stateIsMapKey(): boolean {\n    if (this.stack.length > 0) {\n      const state = this.stack.top()!;\n      return state.type === STATE_MAP_KEY;\n    }\n    return false;\n  }\n\n  private decodeBinary(byteLength: number, headOffset: number): Uint8Array {\n    if (byteLength > this.maxBinLength) {\n      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n    }\n\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headOffset;\n    const object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  }\n\n  private decodeExtension(size: number, headOffset: number): unknown {\n    if (size > this.maxExtLength) {\n      throw new DecodeError(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n    }\n\n    const extType = this.view.getInt8(this.pos + headOffset);\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType, this.context);\n  }\n\n  private convertNumber(value: number): number | bigint {\n    return convertSafeIntegerToMode(value, this.intMode);\n  }\n\n  private lookU8() {\n    return this.view.getUint8(this.pos);\n  }\n\n  private lookU16() {\n    return this.view.getUint16(this.pos);\n  }\n\n  private lookU32() {\n    return this.view.getUint32(this.pos);\n  }\n\n  private readU8(): number {\n    const value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readI8(): number {\n    const value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readU16(): number {\n    const value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readI16(): number {\n    const value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readU32(): number {\n    const value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readI32(): number {\n    const value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readU64(): number | bigint {\n    const value = getUint64(this.view, this.pos, this.intMode);\n    this.pos += 8;\n    return value;\n  }\n\n  private readI64(): number | bigint {\n    const value = getInt64(this.view, this.pos, this.intMode);\n    this.pos += 8;\n    return value;\n  }\n\n  private readF32() {\n    const value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readF64() {\n    const value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}