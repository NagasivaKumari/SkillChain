{"ast":null,"code":"import { Schema } from '../encoding.js';\nimport { base64ToBytes, bytesToBase64 } from '../binarydata.js';\n/* eslint-disable class-methods-use-this */\nexport class ByteArraySchema extends Schema {\n  defaultValue() {\n    return new Uint8Array();\n  }\n  isDefaultValue(data) {\n    return data instanceof Uint8Array && data.byteLength === 0;\n  }\n  prepareMsgpack(data) {\n    if (data instanceof Uint8Array) {\n      return data;\n    }\n    throw new Error(`Invalid byte array: (${typeof data}) ${data}`);\n  }\n  fromPreparedMsgpack(encoded,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _rawStringProvider) {\n    if (encoded instanceof Uint8Array) {\n      return encoded;\n    }\n    throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);\n  }\n  prepareJSON(data,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _options) {\n    if (data instanceof Uint8Array) {\n      return bytesToBase64(data);\n    }\n    throw new Error(`Invalid byte array: (${typeof data}) ${data}`);\n  }\n  fromPreparedJSON(encoded) {\n    if (typeof encoded === 'string') {\n      return base64ToBytes(encoded);\n    }\n    throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);\n  }\n}\nexport class FixedLengthByteArraySchema extends Schema {\n  constructor(length) {\n    super();\n    this.length = length;\n  }\n  defaultValue() {\n    return new Uint8Array(this.length);\n  }\n  isDefaultValue(data) {\n    return data instanceof Uint8Array && data.byteLength === this.length && data.every(byte => byte === 0);\n  }\n  prepareMsgpack(data) {\n    if (data instanceof Uint8Array) {\n      if (data.byteLength === this.length) {\n        return data;\n      }\n      throw new Error(`Invalid byte array length: wanted ${this.length}, got ${data.byteLength}`);\n    }\n    throw new Error('Invalid byte array');\n  }\n  fromPreparedMsgpack(encoded,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _rawStringProvider) {\n    if (encoded instanceof Uint8Array) {\n      if (encoded.byteLength === this.length) {\n        return encoded;\n      }\n      throw new Error(`Invalid byte array length: wanted ${this.length}, got ${encoded.byteLength}`);\n    }\n    throw new Error('Invalid byte array');\n  }\n  prepareJSON(data) {\n    if (data instanceof Uint8Array) {\n      if (data.byteLength === this.length) {\n        return bytesToBase64(data);\n      }\n      throw new Error(`Invalid byte array length: wanted ${this.length}, got ${data.byteLength}`);\n    }\n    throw new Error('Invalid byte array');\n  }\n  fromPreparedJSON(encoded) {\n    if (typeof encoded === 'string') {\n      const bytes = base64ToBytes(encoded);\n      if (bytes.byteLength === this.length) {\n        return bytes;\n      }\n      throw new Error(`Invalid byte array length: wanted ${this.length}, got ${bytes.byteLength}`);\n    }\n    throw new Error('Invalid base64 byte array');\n  }\n}","map":{"version":3,"names":["Schema","base64ToBytes","bytesToBase64","ByteArraySchema","defaultValue","Uint8Array","isDefaultValue","data","byteLength","prepareMsgpack","Error","fromPreparedMsgpack","encoded","_rawStringProvider","prepareJSON","_options","fromPreparedJSON","FixedLengthByteArraySchema","constructor","length","every","byte","bytes"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\encoding\\schema\\bytearray.ts"],"sourcesContent":["import {\n  Schema,\n  MsgpackEncodingData,\n  MsgpackRawStringProvider,\n  JSONEncodingData,\n  PrepareJSONOptions,\n} from '../encoding.js';\nimport { base64ToBytes, bytesToBase64 } from '../binarydata.js';\n\n/* eslint-disable class-methods-use-this */\n\nexport class ByteArraySchema extends Schema {\n  public defaultValue(): Uint8Array {\n    return new Uint8Array();\n  }\n\n  public isDefaultValue(data: unknown): boolean {\n    return data instanceof Uint8Array && data.byteLength === 0;\n  }\n\n  public prepareMsgpack(data: unknown): MsgpackEncodingData {\n    if (data instanceof Uint8Array) {\n      return data;\n    }\n    throw new Error(`Invalid byte array: (${typeof data}) ${data}`);\n  }\n\n  public fromPreparedMsgpack(\n    encoded: MsgpackEncodingData,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider: MsgpackRawStringProvider\n  ): Uint8Array {\n    if (encoded instanceof Uint8Array) {\n      return encoded;\n    }\n    throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);\n  }\n\n  public prepareJSON(\n    data: unknown,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options: PrepareJSONOptions\n  ): JSONEncodingData {\n    if (data instanceof Uint8Array) {\n      return bytesToBase64(data);\n    }\n    throw new Error(`Invalid byte array: (${typeof data}) ${data}`);\n  }\n\n  public fromPreparedJSON(encoded: JSONEncodingData): Uint8Array {\n    if (typeof encoded === 'string') {\n      return base64ToBytes(encoded);\n    }\n    throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);\n  }\n}\n\nexport class FixedLengthByteArraySchema extends Schema {\n  constructor(public readonly length: number) {\n    super();\n  }\n\n  public defaultValue(): Uint8Array {\n    return new Uint8Array(this.length);\n  }\n\n  public isDefaultValue(data: unknown): boolean {\n    return (\n      data instanceof Uint8Array &&\n      data.byteLength === this.length &&\n      data.every((byte) => byte === 0)\n    );\n  }\n\n  public prepareMsgpack(data: unknown): MsgpackEncodingData {\n    if (data instanceof Uint8Array) {\n      if (data.byteLength === this.length) {\n        return data;\n      }\n      throw new Error(\n        `Invalid byte array length: wanted ${this.length}, got ${data.byteLength}`\n      );\n    }\n    throw new Error('Invalid byte array');\n  }\n\n  public fromPreparedMsgpack(\n    encoded: MsgpackEncodingData,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider: MsgpackRawStringProvider\n  ): Uint8Array {\n    if (encoded instanceof Uint8Array) {\n      if (encoded.byteLength === this.length) {\n        return encoded;\n      }\n      throw new Error(\n        `Invalid byte array length: wanted ${this.length}, got ${encoded.byteLength}`\n      );\n    }\n    throw new Error('Invalid byte array');\n  }\n\n  public prepareJSON(data: unknown): JSONEncodingData {\n    if (data instanceof Uint8Array) {\n      if (data.byteLength === this.length) {\n        return bytesToBase64(data);\n      }\n      throw new Error(\n        `Invalid byte array length: wanted ${this.length}, got ${data.byteLength}`\n      );\n    }\n    throw new Error('Invalid byte array');\n  }\n\n  public fromPreparedJSON(encoded: JSONEncodingData): Uint8Array {\n    if (typeof encoded === 'string') {\n      const bytes = base64ToBytes(encoded);\n      if (bytes.byteLength === this.length) {\n        return bytes;\n      }\n      throw new Error(\n        `Invalid byte array length: wanted ${this.length}, got ${bytes.byteLength}`\n      );\n    }\n    throw new Error('Invalid base64 byte array');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}