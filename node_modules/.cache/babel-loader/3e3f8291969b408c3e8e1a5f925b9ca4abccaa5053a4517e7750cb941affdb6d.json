{"ast":null,"code":"import { HTTPClient } from '../client.js';\n/**\n * Convert a token string to a token header\n * @param token - The token string\n * @param headerIdentifier - An identifier for the token header\n */\nfunction convertTokenStringToTokenHeader(headerIdentifier, token = '') {\n  const tokenHeader = {};\n  if (token === '') {\n    return tokenHeader;\n  }\n  tokenHeader[headerIdentifier] = token;\n  return tokenHeader;\n}\nfunction isBaseHTTPClient(tbc) {\n  return typeof tbc.get === 'function';\n}\n/**\n * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic\n */\nexport default class ServiceClient {\n  constructor(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient, baseServer, port, defaultHeaders = {}) {\n    if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {\n      // we are using a base client\n      this.c = new HTTPClient(tokenHeaderOrStrOrBaseClient);\n    } else {\n      // Accept token header as string or object\n      // - workaround to allow backwards compatibility for multiple headers\n      let tokenHeader;\n      if (typeof tokenHeaderOrStrOrBaseClient === 'string') {\n        tokenHeader = convertTokenStringToTokenHeader(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient);\n      } else {\n        tokenHeader = tokenHeaderOrStrOrBaseClient;\n      }\n      this.c = new HTTPClient(tokenHeader, baseServer, port, defaultHeaders);\n    }\n  }\n}","map":{"version":3,"names":["HTTPClient","convertTokenStringToTokenHeader","headerIdentifier","token","tokenHeader","isBaseHTTPClient","tbc","get","ServiceClient","constructor","tokenHeaderIdentifier","tokenHeaderOrStrOrBaseClient","baseServer","port","defaultHeaders","c"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\serviceClient.ts"],"sourcesContent":["import { HTTPClient } from '../client.js';\nimport { BaseHTTPClient } from '../baseHTTPClient.js';\nimport { TokenHeader } from '../urlTokenBaseHTTPClient.js';\n\nexport type TokenHeaderIdentifier =\n  | 'X-Indexer-API-Token'\n  | 'X-KMD-API-Token'\n  | 'X-Algo-API-Token'\n  | string;\n\n/**\n * Convert a token string to a token header\n * @param token - The token string\n * @param headerIdentifier - An identifier for the token header\n */\nfunction convertTokenStringToTokenHeader(\n  headerIdentifier: TokenHeaderIdentifier,\n  token: string = ''\n): TokenHeader {\n  const tokenHeader: TokenHeader = {};\n  if (token === '') {\n    return tokenHeader;\n  }\n  tokenHeader[headerIdentifier] = token;\n  return tokenHeader;\n}\n\nfunction isBaseHTTPClient(\n  tbc: string | TokenHeader | BaseHTTPClient\n): tbc is BaseHTTPClient {\n  return typeof (tbc as BaseHTTPClient).get === 'function';\n}\n\n/**\n * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic\n */\nexport default abstract class ServiceClient {\n  /** @ignore */\n  c: HTTPClient;\n\n  constructor(\n    tokenHeaderIdentifier: TokenHeaderIdentifier,\n    tokenHeaderOrStrOrBaseClient: string | TokenHeader | BaseHTTPClient,\n    baseServer: string,\n    port?: string | number,\n    defaultHeaders: Record<string, any> = {}\n  ) {\n    if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {\n      // we are using a base client\n      this.c = new HTTPClient(tokenHeaderOrStrOrBaseClient);\n    } else {\n      // Accept token header as string or object\n      // - workaround to allow backwards compatibility for multiple headers\n      let tokenHeader: TokenHeader;\n      if (typeof tokenHeaderOrStrOrBaseClient === 'string') {\n        tokenHeader = convertTokenStringToTokenHeader(\n          tokenHeaderIdentifier,\n          tokenHeaderOrStrOrBaseClient\n        );\n      } else {\n        tokenHeader = tokenHeaderOrStrOrBaseClient;\n      }\n\n      this.c = new HTTPClient(tokenHeader, baseServer, port, defaultHeaders);\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,cAAc;AAUzC;;;;;AAKA,SAASC,+BAA+BA,CACtCC,gBAAuC,EACvCC,KAAA,GAAgB,EAAE;EAElB,MAAMC,WAAW,GAAgB,EAAE;EACnC,IAAID,KAAK,KAAK,EAAE,EAAE;IAChB,OAAOC,WAAW;EACpB;EACAA,WAAW,CAACF,gBAAgB,CAAC,GAAGC,KAAK;EACrC,OAAOC,WAAW;AACpB;AAEA,SAASC,gBAAgBA,CACvBC,GAA0C;EAE1C,OAAO,OAAQA,GAAsB,CAACC,GAAG,KAAK,UAAU;AAC1D;AAEA;;;AAGA,eAAc,MAAgBC,aAAa;EAIzCC,YACEC,qBAA4C,EAC5CC,4BAAmE,EACnEC,UAAkB,EAClBC,IAAsB,EACtBC,cAAA,GAAsC,EAAE;IAExC,IAAIT,gBAAgB,CAACM,4BAA4B,CAAC,EAAE;MAClD;MACA,IAAI,CAACI,CAAC,GAAG,IAAIf,UAAU,CAACW,4BAA4B,CAAC;IACvD,CAAC,MAAM;MACL;MACA;MACA,IAAIP,WAAwB;MAC5B,IAAI,OAAOO,4BAA4B,KAAK,QAAQ,EAAE;QACpDP,WAAW,GAAGH,+BAA+B,CAC3CS,qBAAqB,EACrBC,4BAA4B,CAC7B;MACH,CAAC,MAAM;QACLP,WAAW,GAAGO,4BAA4B;MAC5C;MAEA,IAAI,CAACI,CAAC,GAAG,IAAIf,UAAU,CAACI,WAAW,EAAEQ,UAAU,EAAEC,IAAI,EAAEC,cAAc,CAAC;IACxE;EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}