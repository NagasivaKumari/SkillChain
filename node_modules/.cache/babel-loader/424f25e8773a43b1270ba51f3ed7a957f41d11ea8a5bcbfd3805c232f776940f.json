{"ast":null,"code":"import algosdk from 'algosdk';\nimport { algodClient } from '../config/algorand';\nexport class AlgorandService {\n  // Create a new account\n  static async createAccount() {\n    return algosdk.generateAccount();\n  }\n\n  // Get account information\n  static async getAccountInfo(address) {\n    try {\n      const accountInfo = await algodClient.accountInformation(address).do();\n      return accountInfo;\n    } catch (error) {\n      console.error('Error getting account info:', error);\n      throw error;\n    }\n  }\n\n  // Send ALGOs\n  static async sendAlgos(from, to, amount) {\n    try {\n      const params = await algodClient.getTransactionParams().do();\n      const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        sender: from.addr,\n        receiver: to,\n        amount: amount,\n        suggestedParams: params\n      });\n      const signedTxn = txn.signTxn(from.sk);\n      const response = await algodClient.sendRawTransaction(signedTxn).do();\n\n      // Wait for confirmation\n      await algosdk.waitForConfirmation(algodClient, response.txid, 4);\n      return response.txid;\n    } catch (error) {\n      console.error('Error sending ALGOs:', error);\n      throw error;\n    }\n  }\n\n  // Create an asset\n  static async createAsset(creator, assetName, unitName, total, decimals) {\n    try {\n      const params = await algodClient.getTransactionParams().do();\n      const txn = algosdk.makeAssetCreateTxnWithSuggestedParamsFromObject({\n        sender: creator.addr,\n        total: total,\n        decimals: decimals,\n        defaultFrozen: false,\n        manager: creator.addr,\n        reserve: creator.addr,\n        freeze: creator.addr,\n        clawback: creator.addr,\n        assetName: assetName,\n        unitName: unitName,\n        suggestedParams: params\n      });\n      const signedTxn = txn.signTxn(creator.sk);\n      const response = await algodClient.sendRawTransaction(signedTxn).do();\n\n      // Wait for confirmation\n      const confirmedTxn = await algosdk.waitForConfirmation(algodClient, response.txid, 4);\n      const assetId = confirmedTxn.assetIndex;\n      return assetId;\n    } catch (error) {\n      console.error('Error creating asset:', error);\n      throw error;\n    }\n  }\n\n  // Opt-in to an asset\n  static async optInToAsset(account, assetId) {\n    try {\n      const params = await algodClient.getTransactionParams().do();\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        sender: account.addr,\n        receiver: account.addr,\n        amount: 0,\n        assetIndex: assetId,\n        suggestedParams: params\n      });\n      const signedTxn = txn.signTxn(account.sk);\n      const response = await algodClient.sendRawTransaction(signedTxn).do();\n\n      // Wait for confirmation\n      await algosdk.waitForConfirmation(algodClient, response.txid, 4);\n      return response.txid;\n    } catch (error) {\n      console.error('Error opting in to asset:', error);\n      throw error;\n    }\n  }\n\n  // Transfer an asset\n  static async transferAsset(from, to, assetId, amount) {\n    try {\n      const params = await algodClient.getTransactionParams().do();\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        sender: from.addr,\n        receiver: to,\n        amount: amount,\n        assetIndex: assetId,\n        suggestedParams: params\n      });\n      const signedTxn = txn.signTxn(from.sk);\n      const response = await algodClient.sendRawTransaction(signedTxn).do();\n\n      // Wait for confirmation\n      await algosdk.waitForConfirmation(algodClient, response.txid, 4);\n      return response.txid;\n    } catch (error) {\n      console.error('Error transferring asset:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["algosdk","algodClient","AlgorandService","createAccount","generateAccount","getAccountInfo","address","accountInfo","accountInformation","do","error","console","sendAlgos","from","to","amount","params","getTransactionParams","txn","makePaymentTxnWithSuggestedParamsFromObject","sender","addr","receiver","suggestedParams","signedTxn","signTxn","sk","response","sendRawTransaction","waitForConfirmation","txid","createAsset","creator","assetName","unitName","total","decimals","makeAssetCreateTxnWithSuggestedParamsFromObject","defaultFrozen","manager","reserve","freeze","clawback","confirmedTxn","assetId","assetIndex","optInToAsset","account","makeAssetTransferTxnWithSuggestedParamsFromObject","transferAsset"],"sources":["C:/Users/naga shiva kumari/OneDrive/Documents/Blockchain/src/utils/algorand.ts"],"sourcesContent":["import algosdk from 'algosdk';\r\nimport { algodClient } from '../config/algorand';\r\n\r\nexport class AlgorandService {\r\n    // Create a new account\r\n    static async createAccount(): Promise<algosdk.Account> {\r\n        return algosdk.generateAccount();\r\n    }\r\n\r\n    // Get account information\r\n    static async getAccountInfo(address: string) {\r\n        try {\r\n            const accountInfo = await algodClient.accountInformation(address).do();\r\n            return accountInfo;\r\n        } catch (error) {\r\n            console.error('Error getting account info:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Send ALGOs\r\n    static async sendAlgos(\r\n        from: algosdk.Account,\r\n        to: string,\r\n        amount: number\r\n    ): Promise<string> {\r\n        try {\r\n            const params = await algodClient.getTransactionParams().do();\r\n            const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n                sender: from.addr,\r\n                receiver: to,\r\n                amount: amount,\r\n                suggestedParams: params\r\n            });\r\n\r\n            const signedTxn = txn.signTxn(from.sk);\r\n            const response = await algodClient.sendRawTransaction(signedTxn).do();\r\n            \r\n            // Wait for confirmation\r\n            await algosdk.waitForConfirmation(algodClient, response.txid, 4);\r\n            return response.txid;\r\n        } catch (error) {\r\n            console.error('Error sending ALGOs:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Create an asset\r\n    static async createAsset(\r\n        creator: algosdk.Account,\r\n        assetName: string,\r\n        unitName: string,\r\n        total: number,\r\n        decimals: number\r\n    ): Promise<number> {\r\n        try {\r\n            const params = await algodClient.getTransactionParams().do();\r\n            const txn = algosdk.makeAssetCreateTxnWithSuggestedParamsFromObject({\r\n                sender: creator.addr,\r\n                total: total,\r\n                decimals: decimals,\r\n                defaultFrozen: false,\r\n                manager: creator.addr,\r\n                reserve: creator.addr,\r\n                freeze: creator.addr,\r\n                clawback: creator.addr,\r\n                assetName: assetName,\r\n                unitName: unitName,\r\n                suggestedParams: params\r\n            });\r\n\r\n            const signedTxn = txn.signTxn(creator.sk);\r\n            const response = await algodClient.sendRawTransaction(signedTxn).do();\r\n            \r\n            // Wait for confirmation\r\n            const confirmedTxn = await algosdk.waitForConfirmation(algodClient, response.txid, 4);\r\n            const assetId = confirmedTxn.assetIndex;\r\n            return assetId;\r\n        } catch (error) {\r\n            console.error('Error creating asset:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Opt-in to an asset\r\n    static async optInToAsset(\r\n        account: algosdk.Account,\r\n        assetId: number\r\n    ): Promise<string> {\r\n        try {\r\n            const params = await algodClient.getTransactionParams().do();\r\n            const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n                sender: account.addr,\r\n                receiver: account.addr,\r\n                amount: 0,\r\n                assetIndex: assetId,\r\n                suggestedParams: params\r\n            });\r\n\r\n            const signedTxn = txn.signTxn(account.sk);\r\n            const response = await algodClient.sendRawTransaction(signedTxn).do();\r\n            \r\n            // Wait for confirmation\r\n            await algosdk.waitForConfirmation(algodClient, response.txid, 4);\r\n            return response.txid;\r\n        } catch (error) {\r\n            console.error('Error opting in to asset:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Transfer an asset\r\n    static async transferAsset(\r\n        from: algosdk.Account,\r\n        to: string,\r\n        assetId: number,\r\n        amount: number\r\n    ): Promise<string> {\r\n        try {\r\n            const params = await algodClient.getTransactionParams().do();\r\n            const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n                sender: from.addr,\r\n                receiver: to,\r\n                amount: amount,\r\n                assetIndex: assetId,\r\n                suggestedParams: params\r\n            });\r\n\r\n            const signedTxn = txn.signTxn(from.sk);\r\n            const response = await algodClient.sendRawTransaction(signedTxn).do();\r\n            \r\n            // Wait for confirmation\r\n            await algosdk.waitForConfirmation(algodClient, response.txid, 4);\r\n            return response.txid;\r\n        } catch (error) {\r\n            console.error('Error transferring asset:', error);\r\n            throw error;\r\n        }\r\n    }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}