{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\naga shiva kumari\\\\OneDrive\\\\Documents\\\\Blockchain\\\\src\\\\contexts\\\\AlgorandContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { AlgorandService } from '../utils/algorand';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlgorandContext = /*#__PURE__*/createContext(undefined);\nexport const AlgorandProvider = ({\n  children\n}) => {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [accountInfo, setAccountInfo] = useState(null);\n  const createAccount = async () => {\n    const newAccount = await AlgorandService.createAccount();\n    setAccount(newAccount);\n    await updateAccountInfo(newAccount.addr.toString());\n  };\n  const connectWallet = async () => {\n    // This is a placeholder for wallet connection\n    // In a real implementation, you would connect to MyAlgo, Pera, or other Algorand wallets\n    console.log('Wallet connection not implemented');\n  };\n  const updateAccountInfo = async address => {\n    try {\n      const info = await AlgorandService.getAccountInfo(address);\n      setAccountInfo(info);\n    } catch (error) {\n      console.error('Error updating account info:', error);\n    }\n  };\n  const sendAlgos = async (to, amount) => {\n    if (!account) throw new Error('No account connected');\n    const txId = await AlgorandService.sendAlgos(account, to, amount);\n    await updateAccountInfo(account.addr.toString());\n    return txId;\n  };\n  const createAsset = async (name, unit, total, decimals) => {\n    if (!account) throw new Error('No account connected');\n    const assetId = await AlgorandService.createAsset(account, name, unit, total, decimals);\n    await updateAccountInfo(account.addr.toString());\n    return assetId;\n  };\n  const transferAsset = async (to, assetId, amount) => {\n    if (!account) throw new Error('No account connected');\n    const txId = await AlgorandService.transferAsset(account, to, assetId, amount);\n    await updateAccountInfo(account.addr.toString());\n    return txId;\n  };\n  useEffect(() => {\n    if (account) {\n      updateAccountInfo(account.addr.toString());\n    }\n  }, [account]);\n  return /*#__PURE__*/_jsxDEV(AlgorandContext.Provider, {\n    value: {\n      account,\n      accountInfo,\n      createAccount,\n      connectWallet,\n      sendAlgos,\n      createAsset,\n      transferAsset\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(AlgorandProvider, \"RMNlxqqLsUexTo+ZL3TBkKCZIy0=\");\n_c = AlgorandProvider;\nexport const useAlgorand = () => {\n  _s2();\n  const context = useContext(AlgorandContext);\n  if (context === undefined) {\n    throw new Error('useAlgorand must be used within an AlgorandProvider');\n  }\n  return context;\n};\n_s2(useAlgorand, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AlgorandProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AlgorandService","jsxDEV","_jsxDEV","AlgorandContext","undefined","AlgorandProvider","children","_s","account","setAccount","accountInfo","setAccountInfo","createAccount","newAccount","updateAccountInfo","addr","toString","connectWallet","console","log","address","info","getAccountInfo","error","sendAlgos","to","amount","Error","txId","createAsset","name","unit","total","decimals","assetId","transferAsset","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAlgorand","_s2","context","$RefreshReg$"],"sources":["C:/Users/naga shiva kumari/OneDrive/Documents/Blockchain/src/contexts/AlgorandContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport algosdk from 'algosdk';\r\nimport { AlgorandService } from '../utils/algorand';\r\nimport { algodClient } from '../config/algorand';\r\n\r\ninterface AlgorandContextType {\r\n    account: algosdk.Account | null;\r\n    accountInfo: any | null;\r\n    createAccount: () => Promise<void>;\r\n    connectWallet: () => Promise<void>;\r\n    sendAlgos: (to: string, amount: number) => Promise<string>;\r\n    createAsset: (name: string, unit: string, total: number, decimals: number) => Promise<number>;\r\n    transferAsset: (to: string, assetId: number, amount: number) => Promise<string>;\r\n}\r\n\r\nconst AlgorandContext = createContext<AlgorandContextType | undefined>(undefined);\r\n\r\nexport const AlgorandProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    const [account, setAccount] = useState<algosdk.Account | null>(null);\r\n    const [accountInfo, setAccountInfo] = useState<any | null>(null);\r\n\r\n    const createAccount = async () => {\r\n        const newAccount = await AlgorandService.createAccount();\r\n        setAccount(newAccount);\r\n        await updateAccountInfo(newAccount.addr.toString());\r\n    };\r\n\r\n    const connectWallet = async () => {\r\n        // This is a placeholder for wallet connection\r\n        // In a real implementation, you would connect to MyAlgo, Pera, or other Algorand wallets\r\n        console.log('Wallet connection not implemented');\r\n    };\r\n\r\n    const updateAccountInfo = async (address: string) => {\r\n        try {\r\n            const info = await AlgorandService.getAccountInfo(address);\r\n            setAccountInfo(info);\r\n        } catch (error) {\r\n            console.error('Error updating account info:', error);\r\n        }\r\n    };\r\n\r\n    const sendAlgos = async (to: string, amount: number) => {\r\n        if (!account) throw new Error('No account connected');\r\n        const txId = await AlgorandService.sendAlgos(account, to, amount);\r\n        await updateAccountInfo(account.addr.toString());\r\n        return txId;\r\n    };\r\n\r\n    const createAsset = async (name: string, unit: string, total: number, decimals: number) => {\r\n        if (!account) throw new Error('No account connected');\r\n        const assetId = await AlgorandService.createAsset(account, name, unit, total, decimals);\r\n        await updateAccountInfo(account.addr.toString());\r\n        return assetId;\r\n    };\r\n\r\n    const transferAsset = async (to: string, assetId: number, amount: number) => {\r\n        if (!account) throw new Error('No account connected');\r\n        const txId = await AlgorandService.transferAsset(account, to, assetId, amount);\r\n        await updateAccountInfo(account.addr.toString());\r\n        return txId;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (account) {\r\n            updateAccountInfo(account.addr.toString());\r\n        }\r\n    }, [account]);\r\n\r\n    return (\r\n        <AlgorandContext.Provider\r\n            value={{\r\n                account,\r\n                accountInfo,\r\n                createAccount,\r\n                connectWallet,\r\n                sendAlgos,\r\n                createAsset,\r\n                transferAsset,\r\n            }}\r\n        >\r\n            {children}\r\n        </AlgorandContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAlgorand = () => {\r\n    const context = useContext(AlgorandContext);\r\n    if (context === undefined) {\r\n        throw new Error('useAlgorand must be used within an AlgorandProvider');\r\n    }\r\n    return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}