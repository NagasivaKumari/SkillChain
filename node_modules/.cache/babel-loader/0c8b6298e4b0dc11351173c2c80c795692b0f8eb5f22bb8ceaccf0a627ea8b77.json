{"ast":null,"code":"import { concatArrays } from '../../../utils/utils.js';\nimport { PostTransactionsResponse } from './models/types.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport JSONRequest from '../jsonrequest.js';\n/**\n * Sets the default header (if not previously set) for sending a raw\n * transaction.\n * @param headers - A headers object\n */\nexport function setSendTransactionHeaders(headers = {}) {\n  let hdrs = headers;\n  if (Object.keys(hdrs).every(key => key.toLowerCase() !== 'content-type')) {\n    hdrs = {\n      ...headers\n    };\n    hdrs['Content-Type'] = 'application/x-binary';\n  }\n  return hdrs;\n}\nfunction isByteArray(array) {\n  return array && array.byteLength !== undefined;\n}\n/**\n * broadcasts the passed signed txns to the network\n */\nexport default class SendRawTransaction extends JSONRequest {\n  constructor(c, stxOrStxs) {\n    super(c);\n    let forPosting = stxOrStxs;\n    if (Array.isArray(stxOrStxs)) {\n      if (!stxOrStxs.every(isByteArray)) {\n        throw new TypeError('Array elements must be byte arrays');\n      }\n      // Flatten into a single Uint8Array\n      forPosting = concatArrays(...stxOrStxs);\n    } else if (!isByteArray(forPosting)) {\n      throw new TypeError('Argument must be byte array');\n    }\n    this.txnBytesToPost = forPosting;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/transactions';\n  }\n  executeRequest(headers, customOptions) {\n    const txHeaders = setSendTransactionHeaders(headers);\n    return this.c.post({\n      relativePath: this.path(),\n      data: this.txnBytesToPost,\n      requestHeaders: txHeaders,\n      customOptions\n    });\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response) {\n    return decodeJSON(response.getJSONText(), PostTransactionsResponse);\n  }\n}","map":{"version":3,"names":["concatArrays","PostTransactionsResponse","decodeJSON","JSONRequest","setSendTransactionHeaders","headers","hdrs","Object","keys","every","key","toLowerCase","isByteArray","array","byteLength","undefined","SendRawTransaction","constructor","c","stxOrStxs","forPosting","Array","isArray","TypeError","txnBytesToPost","path","executeRequest","customOptions","txHeaders","post","relativePath","data","requestHeaders","prepare","response","getJSONText"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\algod\\sendRawTransaction.ts"],"sourcesContent":["import { concatArrays } from '../../../utils/utils.js';\nimport { PostTransactionsResponse } from './models/types.js';\nimport { HTTPClient, HTTPClientResponse } from '../../client.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport JSONRequest from '../jsonrequest.js';\n\n/**\n * Sets the default header (if not previously set) for sending a raw\n * transaction.\n * @param headers - A headers object\n */\nexport function setSendTransactionHeaders(\n  headers: Record<string, string> = {}\n) {\n  let hdrs = headers;\n  if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {\n    hdrs = { ...headers };\n    hdrs['Content-Type'] = 'application/x-binary';\n  }\n  return hdrs;\n}\n\nfunction isByteArray(array: any): array is Uint8Array {\n  return array && array.byteLength !== undefined;\n}\n\n/**\n * broadcasts the passed signed txns to the network\n */\nexport default class SendRawTransaction extends JSONRequest<PostTransactionsResponse> {\n  private txnBytesToPost: Uint8Array;\n\n  constructor(c: HTTPClient, stxOrStxs: Uint8Array | Uint8Array[]) {\n    super(c);\n\n    let forPosting = stxOrStxs;\n    if (Array.isArray(stxOrStxs)) {\n      if (!stxOrStxs.every(isByteArray)) {\n        throw new TypeError('Array elements must be byte arrays');\n      }\n      // Flatten into a single Uint8Array\n      forPosting = concatArrays(...stxOrStxs);\n    } else if (!isByteArray(forPosting)) {\n      throw new TypeError('Argument must be byte array');\n    }\n    this.txnBytesToPost = forPosting;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/transactions';\n  }\n\n  protected executeRequest(\n    headers?: Record<string, string>,\n    customOptions?: Record<string, unknown>\n  ): Promise<HTTPClientResponse> {\n    const txHeaders = setSendTransactionHeaders(headers);\n    return this.c.post({\n      relativePath: this.path(),\n      data: this.txnBytesToPost,\n      requestHeaders: txHeaders,\n      customOptions,\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response: HTTPClientResponse): PostTransactionsResponse {\n    return decodeJSON(response.getJSONText(), PostTransactionsResponse);\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,yBAAyB;AACtD,SAASC,wBAAwB,QAAQ,mBAAmB;AAE5D,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,OAAOC,WAAW,MAAM,mBAAmB;AAE3C;;;;;AAKA,OAAM,SAAUC,yBAAyBA,CACvCC,OAAA,GAAkC,EAAE;EAEpC,IAAIC,IAAI,GAAGD,OAAO;EAClB,IAAIE,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,KAAK,CAAEC,GAAG,IAAKA,GAAG,CAACC,WAAW,EAAE,KAAK,cAAc,CAAC,EAAE;IAC1EL,IAAI,GAAG;MAAE,GAAGD;IAAO,CAAE;IACrBC,IAAI,CAAC,cAAc,CAAC,GAAG,sBAAsB;EAC/C;EACA,OAAOA,IAAI;AACb;AAEA,SAASM,WAAWA,CAACC,KAAU;EAC7B,OAAOA,KAAK,IAAIA,KAAK,CAACC,UAAU,KAAKC,SAAS;AAChD;AAEA;;;AAGA,eAAc,MAAOC,kBAAmB,SAAQb,WAAqC;EAGnFc,YAAYC,CAAa,EAAEC,SAAoC;IAC7D,KAAK,CAACD,CAAC,CAAC;IAER,IAAIE,UAAU,GAAGD,SAAS;IAC1B,IAAIE,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,EAAE;MAC5B,IAAI,CAACA,SAAS,CAACV,KAAK,CAACG,WAAW,CAAC,EAAE;QACjC,MAAM,IAAIW,SAAS,CAAC,oCAAoC,CAAC;MAC3D;MACA;MACAH,UAAU,GAAGpB,YAAY,CAAC,GAAGmB,SAAS,CAAC;IACzC,CAAC,MAAM,IAAI,CAACP,WAAW,CAACQ,UAAU,CAAC,EAAE;MACnC,MAAM,IAAIG,SAAS,CAAC,6BAA6B,CAAC;IACpD;IACA,IAAI,CAACC,cAAc,GAAGJ,UAAU;EAClC;EAEA;EACAK,IAAIA,CAAA;IACF,OAAO,kBAAkB;EAC3B;EAEUC,cAAcA,CACtBrB,OAAgC,EAChCsB,aAAuC;IAEvC,MAAMC,SAAS,GAAGxB,yBAAyB,CAACC,OAAO,CAAC;IACpD,OAAO,IAAI,CAACa,CAAC,CAACW,IAAI,CAAC;MACjBC,YAAY,EAAE,IAAI,CAACL,IAAI,EAAE;MACzBM,IAAI,EAAE,IAAI,CAACP,cAAc;MACzBQ,cAAc,EAAEJ,SAAS;MACzBD;KACD,CAAC;EACJ;EAEA;EACAM,OAAOA,CAACC,QAA4B;IAClC,OAAOhC,UAAU,CAACgC,QAAQ,CAACC,WAAW,EAAE,EAAElC,wBAAwB,CAAC;EACrE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}