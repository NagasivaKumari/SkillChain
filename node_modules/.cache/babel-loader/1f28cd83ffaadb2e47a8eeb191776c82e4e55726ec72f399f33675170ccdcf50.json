{"ast":null,"code":"import JSONRequest from '../jsonrequest.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport { TransactionProofResponse } from './models/types.js';\nexport default class GetTransactionProof extends JSONRequest {\n  constructor(c, round, txID) {\n    super(c);\n    this.txID = txID;\n    this.round = BigInt(round);\n  }\n  path() {\n    return `/v2/blocks/${this.round}/transactions/${this.txID}/proof`;\n  }\n  /**\n   * Exclude assets and application data from results\n   * The type of hash function used to create the proof, must be one of: \"sha512_256\", \"sha256\"\n   *\n   * #### Example\n   * ```typescript\n   * const hashType = \"sha256\";\n   * const round = 123456;\n   * const txId = \"abc123;\n   * const txProof = await algodClient.getTransactionProof(round, txId)\n   *        .hashType(hashType)\n   *        .do();\n   * ```\n   *\n   * @param hashType\n   * @category query\n   */\n  hashType(hashType) {\n    this.query.hashtype = hashType;\n    return this;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response) {\n    return decodeJSON(response.getJSONText(), TransactionProofResponse);\n  }\n}","map":{"version":3,"names":["JSONRequest","decodeJSON","TransactionProofResponse","GetTransactionProof","constructor","c","round","txID","BigInt","path","hashType","query","hashtype","prepare","response","getJSONText"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\algod\\getTransactionProof.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest.js';\nimport { HTTPClient, HTTPClientResponse } from '../../client.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport { TransactionProofResponse } from './models/types.js';\n\nexport default class GetTransactionProof extends JSONRequest<TransactionProofResponse> {\n  private round: bigint;\n\n  constructor(\n    c: HTTPClient,\n    round: number | bigint,\n    private txID: string\n  ) {\n    super(c);\n    this.round = BigInt(round);\n  }\n\n  path() {\n    return `/v2/blocks/${this.round}/transactions/${this.txID}/proof`;\n  }\n\n  /**\n   * Exclude assets and application data from results\n   * The type of hash function used to create the proof, must be one of: \"sha512_256\", \"sha256\"\n   *\n   * #### Example\n   * ```typescript\n   * const hashType = \"sha256\";\n   * const round = 123456;\n   * const txId = \"abc123;\n   * const txProof = await algodClient.getTransactionProof(round, txId)\n   *        .hashType(hashType)\n   *        .do();\n   * ```\n   *\n   * @param hashType\n   * @category query\n   */\n  hashType(hashType: string) {\n    this.query.hashtype = hashType;\n    return this;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response: HTTPClientResponse): TransactionProofResponse {\n    return decodeJSON(response.getJSONText(), TransactionProofResponse);\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAE3C,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,SAASC,wBAAwB,QAAQ,mBAAmB;AAE5D,eAAc,MAAOC,mBAAoB,SAAQH,WAAqC;EAGpFI,YACEC,CAAa,EACbC,KAAsB,EACdC,IAAY;IAEpB,KAAK,CAACF,CAAC,CAAC;IAFA,KAAAE,IAAI,GAAJA,IAAI;IAGZ,IAAI,CAACD,KAAK,GAAGE,MAAM,CAACF,KAAK,CAAC;EAC5B;EAEAG,IAAIA,CAAA;IACF,OAAO,cAAc,IAAI,CAACH,KAAK,iBAAiB,IAAI,CAACC,IAAI,QAAQ;EACnE;EAEA;;;;;;;;;;;;;;;;;EAiBAG,QAAQA,CAACA,QAAgB;IACvB,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAGF,QAAQ;IAC9B,OAAO,IAAI;EACb;EAEA;EACAG,OAAOA,CAACC,QAA4B;IAClC,OAAOb,UAAU,CAACa,QAAQ,CAACC,WAAW,EAAE,EAAEb,wBAAwB,CAAC;EACrE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}