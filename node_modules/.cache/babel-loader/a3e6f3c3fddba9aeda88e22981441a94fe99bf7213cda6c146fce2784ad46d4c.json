{"ast":null,"code":"import JSONRequest from '../jsonrequest.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport { BoxesResponse } from './models/types.js';\n/**\n * Given an application ID, return all the box names associated with the app.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();\n * const boxNames = boxesResponse.boxes.map(box => box.name);\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)\n * @param index - The application ID to look up.\n * @category GET\n */\nexport default class GetApplicationBoxes extends JSONRequest {\n  constructor(c, index) {\n    super(c);\n    this.index = BigInt(index);\n    this.query.max = 0;\n  }\n  /**\n   * @returns `/v2/applications/${index}/boxes`\n   */\n  path() {\n    return `/v2/applications/${this.index}/boxes`;\n  }\n  /**\n   * Limit results for pagination.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   * const boxesResult = await algodClient\n   *        .GetApplicationBoxes(1234)\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit - maximum number of results to return.\n   * @category query\n   */\n  max(max) {\n    this.query.max = max;\n    return this;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response) {\n    return decodeJSON(response.getJSONText(), BoxesResponse);\n  }\n}","map":{"version":3,"names":["JSONRequest","decodeJSON","BoxesResponse","GetApplicationBoxes","constructor","c","index","BigInt","query","max","path","prepare","response","getJSONText"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\algod\\getApplicationBoxes.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest.js';\nimport { HTTPClient, HTTPClientResponse } from '../../client.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport { BoxesResponse } from './models/types.js';\n\n/**\n * Given an application ID, return all the box names associated with the app.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();\n * const boxNames = boxesResponse.boxes.map(box => box.name);\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)\n * @param index - The application ID to look up.\n * @category GET\n */\nexport default class GetApplicationBoxes extends JSONRequest<BoxesResponse> {\n  private index: bigint;\n\n  constructor(c: HTTPClient, index: number | bigint) {\n    super(c);\n    this.index = BigInt(index);\n    this.query.max = 0;\n  }\n\n  /**\n   * @returns `/v2/applications/${index}/boxes`\n   */\n  path() {\n    return `/v2/applications/${this.index}/boxes`;\n  }\n\n  /**\n   * Limit results for pagination.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   * const boxesResult = await algodClient\n   *        .GetApplicationBoxes(1234)\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit - maximum number of results to return.\n   * @category query\n   */\n  max(max: number) {\n    this.query.max = max;\n    return this;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response: HTTPClientResponse): BoxesResponse {\n    return decodeJSON(response.getJSONText(), BoxesResponse);\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAE3C,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,SAASC,aAAa,QAAQ,mBAAmB;AAEjD;;;;;;;;;;;;;;AAcA,eAAc,MAAOC,mBAAoB,SAAQH,WAA0B;EAGzEI,YAAYC,CAAa,EAAEC,KAAsB;IAC/C,KAAK,CAACD,CAAC,CAAC;IACR,IAAI,CAACC,KAAK,GAAGC,MAAM,CAACD,KAAK,CAAC;IAC1B,IAAI,CAACE,KAAK,CAACC,GAAG,GAAG,CAAC;EACpB;EAEA;;;EAGAC,IAAIA,CAAA;IACF,OAAO,oBAAoB,IAAI,CAACJ,KAAK,QAAQ;EAC/C;EAEA;;;;;;;;;;;;;;;EAeAG,GAAGA,CAACA,GAAW;IACb,IAAI,CAACD,KAAK,CAACC,GAAG,GAAGA,GAAG;IACpB,OAAO,IAAI;EACb;EAEA;EACAE,OAAOA,CAACC,QAA4B;IAClC,OAAOX,UAAU,CAACW,QAAQ,CAACC,WAAW,EAAE,EAAEX,aAAa,CAAC;EAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}