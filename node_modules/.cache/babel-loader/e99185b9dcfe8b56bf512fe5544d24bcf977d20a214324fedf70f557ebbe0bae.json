{"ast":null,"code":"import { AddressSchema, Uint64Schema, ByteArraySchema, FixedLengthByteArraySchema, NamedMapSchema, allOmitEmpty } from './encoding/schema/index.js';\nexport class HeartbeatProof {\n  constructor(params) {\n    this.sig = params.sig;\n    this.pk = params.pk;\n    this.pk2 = params.pk2;\n    this.pk1Sig = params.pk1Sig;\n    this.pk2Sig = params.pk2Sig;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return HeartbeatProof.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['s', this.sig], ['p', this.pk], ['p2', this.pk2], ['p1s', this.pk1Sig], ['p2s', this.pk2Sig]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded HeartbeatProof: ${data}`);\n    }\n    return new HeartbeatProof({\n      sig: data.get('s'),\n      pk: data.get('p'),\n      pk2: data.get('p2'),\n      pk1Sig: data.get('p1s'),\n      pk2Sig: data.get('p2s')\n    });\n  }\n}\nHeartbeatProof.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 's',\n  // Sig\n  valueSchema: new FixedLengthByteArraySchema(64)\n}, {\n  key: 'p',\n  // PK\n  valueSchema: new FixedLengthByteArraySchema(32)\n}, {\n  key: 'p2',\n  // PK2\n  valueSchema: new FixedLengthByteArraySchema(32)\n}, {\n  key: 'p1s',\n  // PK1Sig\n  valueSchema: new FixedLengthByteArraySchema(64)\n}, {\n  key: 'p2s',\n  // PK2Sig\n  valueSchema: new FixedLengthByteArraySchema(64)\n}]));\nexport class Heartbeat {\n  constructor(params) {\n    this.address = params.address;\n    this.proof = params.proof;\n    this.seed = params.seed;\n    this.voteID = params.voteID;\n    this.keyDilution = params.keyDilution;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Heartbeat.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['a', this.address], ['prf', this.proof.toEncodingData()], ['sd', this.seed], ['vid', this.voteID], ['kd', this.keyDilution]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Heartbeat: ${data}`);\n    }\n    return new Heartbeat({\n      address: data.get('a'),\n      proof: HeartbeatProof.fromEncodingData(data.get('prf')),\n      seed: data.get('sd'),\n      voteID: data.get('vid'),\n      keyDilution: data.get('kd')\n    });\n  }\n}\nHeartbeat.encodingSchema = new NamedMapSchema(allOmitEmpty([{\n  key: 'a',\n  // HbAddress\n  valueSchema: new AddressSchema()\n}, {\n  key: 'prf',\n  // HbProof\n  valueSchema: HeartbeatProof.encodingSchema\n}, {\n  key: 'sd',\n  // HbSeed\n  valueSchema: new ByteArraySchema()\n}, {\n  key: 'vid',\n  // HbVoteID\n  valueSchema: new FixedLengthByteArraySchema(32)\n}, {\n  key: 'kd',\n  // HbKeyDilution\n  valueSchema: new Uint64Schema()\n}]));","map":{"version":3,"names":["AddressSchema","Uint64Schema","ByteArraySchema","FixedLengthByteArraySchema","NamedMapSchema","allOmitEmpty","HeartbeatProof","constructor","params","sig","pk","pk2","pk1Sig","pk2Sig","getEncodingSchema","encodingSchema","toEncodingData","Map","fromEncodingData","data","Error","get","key","valueSchema","Heartbeat","address","proof","seed","voteID","keyDilution"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\heartbeat.ts"],"sourcesContent":["import { Address } from './encoding/address.js';\nimport { Encodable, Schema } from './encoding/encoding.js';\nimport {\n  AddressSchema,\n  Uint64Schema,\n  ByteArraySchema,\n  FixedLengthByteArraySchema,\n  NamedMapSchema,\n  allOmitEmpty,\n} from './encoding/schema/index.js';\n\nexport class HeartbeatProof implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 's', // Sig\n        valueSchema: new FixedLengthByteArraySchema(64),\n      },\n      {\n        key: 'p', // PK\n        valueSchema: new FixedLengthByteArraySchema(32),\n      },\n      {\n        key: 'p2', // PK2\n        valueSchema: new FixedLengthByteArraySchema(32),\n      },\n      {\n        key: 'p1s', // PK1Sig\n        valueSchema: new FixedLengthByteArraySchema(64),\n      },\n      {\n        key: 'p2s', // PK2Sig\n        valueSchema: new FixedLengthByteArraySchema(64),\n      },\n    ])\n  );\n\n  public sig: Uint8Array;\n\n  public pk: Uint8Array;\n\n  public pk2: Uint8Array;\n\n  public pk1Sig: Uint8Array;\n\n  public pk2Sig: Uint8Array;\n\n  public constructor(params: {\n    sig: Uint8Array;\n    pk: Uint8Array;\n    pk2: Uint8Array;\n    pk1Sig: Uint8Array;\n    pk2Sig: Uint8Array;\n  }) {\n    this.sig = params.sig;\n    this.pk = params.pk;\n    this.pk2 = params.pk2;\n    this.pk1Sig = params.pk1Sig;\n    this.pk2Sig = params.pk2Sig;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return HeartbeatProof.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['s', this.sig],\n      ['p', this.pk],\n      ['p2', this.pk2],\n      ['p1s', this.pk1Sig],\n      ['p2s', this.pk2Sig],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): HeartbeatProof {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded HeartbeatProof: ${data}`);\n    }\n    return new HeartbeatProof({\n      sig: data.get('s'),\n      pk: data.get('p'),\n      pk2: data.get('p2'),\n      pk1Sig: data.get('p1s'),\n      pk2Sig: data.get('p2s'),\n    });\n  }\n}\n\nexport class Heartbeat implements Encodable {\n  public static readonly encodingSchema = new NamedMapSchema(\n    allOmitEmpty([\n      {\n        key: 'a', // HbAddress\n        valueSchema: new AddressSchema(),\n      },\n      {\n        key: 'prf', // HbProof\n        valueSchema: HeartbeatProof.encodingSchema,\n      },\n      {\n        key: 'sd', // HbSeed\n        valueSchema: new ByteArraySchema(),\n      },\n      {\n        key: 'vid', // HbVoteID\n        valueSchema: new FixedLengthByteArraySchema(32),\n      },\n      {\n        key: 'kd', // HbKeyDilution\n        valueSchema: new Uint64Schema(),\n      },\n    ])\n  );\n\n  public address: Address;\n\n  public proof: HeartbeatProof;\n\n  public seed: Uint8Array;\n\n  public voteID: Uint8Array;\n\n  public keyDilution: bigint;\n\n  public constructor(params: {\n    address: Address;\n    proof: HeartbeatProof;\n    seed: Uint8Array;\n    voteID: Uint8Array;\n    keyDilution: bigint;\n  }) {\n    this.address = params.address;\n    this.proof = params.proof;\n    this.seed = params.seed;\n    this.voteID = params.voteID;\n    this.keyDilution = params.keyDilution;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public getEncodingSchema(): Schema {\n    return Heartbeat.encodingSchema;\n  }\n\n  public toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['a', this.address],\n      ['prf', this.proof.toEncodingData()],\n      ['sd', this.seed],\n      ['vid', this.voteID],\n      ['kd', this.keyDilution],\n    ]);\n  }\n\n  public static fromEncodingData(data: unknown): Heartbeat {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Heartbeat: ${data}`);\n    }\n    return new Heartbeat({\n      address: data.get('a'),\n      proof: HeartbeatProof.fromEncodingData(data.get('prf')),\n      seed: data.get('sd'),\n      voteID: data.get('vid'),\n      keyDilution: data.get('kd'),\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}