{"ast":null,"code":"import JSONRequest from '../jsonrequest.js';\nimport { decodeMsgpack } from '../../../encoding/encoding.js';\nimport { BlockResponse } from './models/types.js';\n/**\n * block gets the block info for the given round. this call may block\n */\nexport default class Block extends JSONRequest {\n  constructor(c, roundNumber) {\n    super(c);\n    this.round = BigInt(roundNumber);\n    this.query = {\n      format: 'msgpack'\n    };\n  }\n  path() {\n    return `/v2/blocks/${this.round}`;\n  }\n  /**\n   * If true, only the block header (exclusive of payset or certificate) may be included in response.\n   *\n   * #### Example\n   * ```typescript\n   *\n   * const roundNumber = 41000000;\n   *\n   * const blockResponse = await algodClient\n   *        .block(roundNumber)\n   *        .headerOnly(true)\n   *        .do();\n   * ```\n   *\n   * @param headerOnly - the flag indicating whether exclusively return header in response\n   * @category query\n   */\n  headerOnly(headerOnly) {\n    this.query['header-only'] = headerOnly;\n    return this;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response) {\n    return decodeMsgpack(response.body, BlockResponse);\n  }\n}","map":{"version":3,"names":["JSONRequest","decodeMsgpack","BlockResponse","Block","constructor","c","roundNumber","round","BigInt","query","format","path","headerOnly","prepare","response","body"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\algod\\block.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest.js';\nimport { HTTPClient, HTTPClientResponse } from '../../client.js';\nimport { decodeMsgpack } from '../../../encoding/encoding.js';\nimport { BlockResponse } from './models/types.js';\n\n/**\n * block gets the block info for the given round. this call may block\n */\nexport default class Block extends JSONRequest<BlockResponse> {\n  private round: bigint;\n\n  constructor(c: HTTPClient, roundNumber: number | bigint) {\n    super(c);\n    this.round = BigInt(roundNumber);\n    this.query = { format: 'msgpack' };\n  }\n\n  path() {\n    return `/v2/blocks/${this.round}`;\n  }\n\n  /**\n   * If true, only the block header (exclusive of payset or certificate) may be included in response.\n   *\n   * #### Example\n   * ```typescript\n   *\n   * const roundNumber = 41000000;\n   *\n   * const blockResponse = await algodClient\n   *        .block(roundNumber)\n   *        .headerOnly(true)\n   *        .do();\n   * ```\n   *\n   * @param headerOnly - the flag indicating whether exclusively return header in response\n   * @category query\n   */\n  headerOnly(headerOnly: boolean) {\n    this.query['header-only'] = headerOnly;\n    return this;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response: HTTPClientResponse): BlockResponse {\n    return decodeMsgpack(response.body, BlockResponse);\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAE3C,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,aAAa,QAAQ,mBAAmB;AAEjD;;;AAGA,eAAc,MAAOC,KAAM,SAAQH,WAA0B;EAG3DI,YAAYC,CAAa,EAAEC,WAA4B;IACrD,KAAK,CAACD,CAAC,CAAC;IACR,IAAI,CAACE,KAAK,GAAGC,MAAM,CAACF,WAAW,CAAC;IAChC,IAAI,CAACG,KAAK,GAAG;MAAEC,MAAM,EAAE;IAAS,CAAE;EACpC;EAEAC,IAAIA,CAAA;IACF,OAAO,cAAc,IAAI,CAACJ,KAAK,EAAE;EACnC;EAEA;;;;;;;;;;;;;;;;;EAiBAK,UAAUA,CAACA,UAAmB;IAC5B,IAAI,CAACH,KAAK,CAAC,aAAa,CAAC,GAAGG,UAAU;IACtC,OAAO,IAAI;EACb;EAEA;EACAC,OAAOA,CAACC,QAA4B;IAClC,OAAOb,aAAa,CAACa,QAAQ,CAACC,IAAI,EAAEb,aAAa,CAAC;EACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}