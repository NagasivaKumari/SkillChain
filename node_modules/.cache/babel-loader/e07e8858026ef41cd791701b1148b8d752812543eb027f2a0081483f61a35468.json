{"ast":null,"code":"import ServiceClient from '../serviceClient.js';\nimport MakeHealthCheck from './makeHealthCheck.js';\nimport LookupAssetBalances from './lookupAssetBalances.js';\nimport LookupAssetTransactions from './lookupAssetTransactions.js';\nimport LookupAccountTransactions from './lookupAccountTransactions.js';\nimport LookupBlock from './lookupBlock.js';\nimport LookupTransactionByID from './lookupTransactionByID.js';\nimport LookupAccountByID from './lookupAccountByID.js';\nimport LookupAccountAssets from './lookupAccountAssets.js';\nimport LookupAccountCreatedAssets from './lookupAccountCreatedAssets.js';\nimport LookupAccountAppLocalStates from './lookupAccountAppLocalStates.js';\nimport LookupAccountCreatedApplications from './lookupAccountCreatedApplications.js';\nimport LookupAssetByID from './lookupAssetByID.js';\nimport LookupApplications from './lookupApplications.js';\nimport LookupApplicationLogs from './lookupApplicationLogs.js';\nimport LookupApplicationBoxByIDandName from './lookupApplicationBoxByIDandName.js';\nimport SearchAccounts from './searchAccounts.js';\nimport SearchForBlockHeaders from './searchForBlockHeaders.js';\nimport SearchForTransactions from './searchForTransactions.js';\nimport SearchForAssets from './searchForAssets.js';\nimport SearchForApplications from './searchForApplications.js';\nimport SearchForApplicationBoxes from './searchForApplicationBoxes.js';\n/**\n * The Indexer provides a REST API interface of API calls to support searching the Algorand Blockchain.\n *\n * The Indexer REST APIs retrieve the blockchain data from a PostgreSQL compatible database that must be populated.\n *\n * This database is populated using the same indexer instance or a separate instance of the indexer which must connect to the algod process of a running Algorand node to read block data.\n *\n * This node must also be an Archival node to make searching the entire blockchain possible.\n *\n * #### Relevant Information\n * [Learn more about Indexer](https://developer.algorand.org/docs/get-details/indexer/)\n *\n * [Run Indexer in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/#algod-indexer-and-kmd-rest-endpoints)\n */\nexport class IndexerClient extends ServiceClient {\n  /**\n   * Create an IndexerClient from\n   * * either a token, baseServer, port, and optional headers\n   * * or a base client server for interoperability with external dApp wallets\n   *\n   * #### Example\n   * ```typescript\n   * const token  = \"\";\n   * const server = \"http://localhost\";\n   * const port   = 8980;\n   * const indexerClient = new algosdk.Indexer(token, server, port);\n   * ```\n   * @remarks\n   * The above configuration is for a sandbox private network.\n   * For applications on production, you are encouraged to run your own node with indexer, or use an Algorand REST API provider with a dedicated API key.\n   *\n   * @param tokenOrBaseClient - The API token for the Indexer API\n   * @param baseServer - REST endpoint\n   * @param port - Port number if specifically configured by the server\n   * @param headers - Optional headers\n   */\n  constructor(tokenOrBaseClient, baseServer = 'http://127.0.0.1', port = 8080, headers = {}) {\n    super('X-Indexer-API-Token', tokenOrBaseClient, baseServer, port, headers);\n  }\n  /**\n   * Returns the health object for the service.\n   * Returns 200 if healthy.\n   *\n   * #### Example\n   * ```typescript\n   * const health = await indexerClient.makeHealthCheck().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)\n   * @category GET\n   */\n  makeHealthCheck() {\n    return new MakeHealthCheck(this.c);\n  }\n  /**\n   * Returns the list of accounts who hold the given asset and their balance.\n   *\n   * #### Example\n   * ```typescript\n   * const assetId = 163650;\n   * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)\n   * @param index - The asset ID to look up.\n   * @category GET\n   */\n  lookupAssetBalances(index) {\n    return new LookupAssetBalances(this.c, index);\n  }\n  /**\n   * Returns transactions relating to the given asset.\n   *\n   * #### Example\n   * ```typescript\n   * const assetId = 163650;\n   * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\n   * @param index - The asset ID to look up.\n   * @category GET\n   */\n  lookupAssetTransactions(index) {\n    return new LookupAssetTransactions(this.c, index);\n  }\n  /**\n   * Returns transactions relating to the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\n   * @param account - The address of the account.\n   * @category GET\n   */\n  lookupAccountTransactions(account) {\n    return new LookupAccountTransactions(this.c, account);\n  }\n  /**\n   * Returns the block for the passed round.\n   *\n   * #### Example\n   * ```typescript\n   * const targetBlock = 18309917;\n   * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\n   * @param round - The number of the round to look up.\n   * @category GET\n   */\n  lookupBlock(round) {\n    return new LookupBlock(this.c, round);\n  }\n  /**\n   * Returns information about the given transaction.\n   *\n   * #### Example\n   * ```typescript\n   * const txnId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n   * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)\n   * @param txID - The ID of the transaction to look up.\n   * @category GET\n   */\n  lookupTransactionByID(txID) {\n    return new LookupTransactionByID(this.c, txID);\n  }\n  /**\n   * Returns information about the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountInfo = await indexerClient.lookupAccountByID(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)\n   * @param account - The address of the account to look up.\n   * @category GET\n   */\n  lookupAccountByID(account) {\n    return new LookupAccountByID(this.c, account);\n  }\n  /**\n   * Returns asset about the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountAssets = await indexerClient.lookupAccountAssets(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)\n   * @param account - The address of the account to look up.\n   * @category GET\n   */\n  lookupAccountAssets(account) {\n    return new LookupAccountAssets(this.c, account);\n  }\n  /**\n   * Returns asset information created by the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)\n   * @param account - The address of the account to look up.\n   * @category GET\n   */\n  lookupAccountCreatedAssets(account) {\n    return new LookupAccountCreatedAssets(this.c, account);\n  }\n  /**\n   * Returns application local state about the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)\n   * @param account - The address of the account to look up.\n   * @category GET\n   */\n  lookupAccountAppLocalStates(account) {\n    return new LookupAccountAppLocalStates(this.c, account);\n  }\n  /**\n   * Returns application information created by the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)\n   * @param account - The address of the account to look up.\n   * @category GET\n   */\n  lookupAccountCreatedApplications(account) {\n    return new LookupAccountCreatedApplications(this.c, account);\n  }\n  /**\n   * Returns information about the passed asset.\n   *\n   * #### Example\n   * ```typescript\n   * const assetId = 163650;\n   * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)\n   * @param index - The ID of the asset ot look up.\n   * @category GET\n   */\n  lookupAssetByID(index) {\n    return new LookupAssetByID(this.c, index);\n  }\n  /**\n   * Returns information about the passed application.\n   *\n   * #### Example\n   * ```typescript\n   * const appId = 60553466;\n   * const appInfo = await indexerClient.lookupApplications(appId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)\n   * @param index - The ID of the application to look up.\n   * @category GET\n   */\n  lookupApplications(index) {\n    return new LookupApplications(this.c, index);\n  }\n  /**\n   * Returns log messages generated by the passed in application.\n   *\n   * #### Example\n   * ```typescript\n   * const appId = 60553466;\n   * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n   * @param appID - The ID of the application which generated the logs.\n   * @category GET\n   */\n  lookupApplicationLogs(appID) {\n    return new LookupApplicationLogs(this.c, appID);\n  }\n  /**\n   * Returns information about indexed accounts.\n   *\n   * #### Example\n   * ```typescript\n   * const accounts = await indexerClient.searchAccounts().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\n   * @category GET\n   */\n  searchAccounts() {\n    return new SearchAccounts(this.c);\n  }\n  /**\n   * Returns information about indexed block headers.\n   *\n   * #### Example\n   * ```typescript\n   * const bhs = await indexerClient.searchForBlockHeaders().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)\n   * @category GET\n   */\n  searchForBlockHeaders() {\n    return new SearchForBlockHeaders(this.c);\n  }\n  /**\n   * Returns information about indexed transactions.\n   *\n   * #### Example\n   * ```typescript\n   * const txns = await indexerClient.searchForTransactions().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\n   * @category GET\n   */\n  searchForTransactions() {\n    return new SearchForTransactions(this.c);\n  }\n  /**\n   * Returns information about indexed assets.\n   *\n   * #### Example\n   * ```typescript\n   * const assets = await indexerClient.searchForAssets().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\n   * @category GET\n   */\n  searchForAssets() {\n    return new SearchForAssets(this.c);\n  }\n  /**\n   * Returns information about indexed applications.\n   *\n   * #### Example\n   * ```typescript\n   * const apps = await indexerClient.searchForApplications().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)\n   * @category GET\n   */\n  searchForApplications() {\n    return new SearchForApplications(this.c);\n  }\n  /**\n   * Returns information about indexed application boxes.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   * const appID = 1234;\n   *\n   * const responsePage1 = await indexerClient\n   *        .searchForApplicationBoxes(appID)\n   *        .limit(maxResults)\n   *        .do();\n   * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n   *\n   * const responsePage2 = await indexerClient\n   *        .searchForApplicationBoxes(appID)\n   *        .limit(maxResults)\n   *        .nextToken(responsePage1.nextToken)\n   *        .do();\n   * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)\n   * @param appID - The ID of the application with boxes.\n   * @category GET\n   */\n  searchForApplicationBoxes(appID) {\n    return new SearchForApplicationBoxes(this.c, appID);\n  }\n  /**\n   * Returns information about the application box given its name.\n   *\n   * #### Example\n   * ```typescript\n   * const boxName = Buffer.from(\"foo\");\n   * const boxResponse = await indexerClient\n   *        .LookupApplicationBoxByIDandName(1234, boxName)\n   *        .do();\n   * const boxValue = boxResponse.value;\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n   * @param appID - The ID of the application with boxes.\n   * @category GET\n   */\n  lookupApplicationBoxByIDandName(appID, boxName) {\n    return new LookupApplicationBoxByIDandName(this.c, appID, boxName);\n  }\n}","map":{"version":3,"names":["ServiceClient","MakeHealthCheck","LookupAssetBalances","LookupAssetTransactions","LookupAccountTransactions","LookupBlock","LookupTransactionByID","LookupAccountByID","LookupAccountAssets","LookupAccountCreatedAssets","LookupAccountAppLocalStates","LookupAccountCreatedApplications","LookupAssetByID","LookupApplications","LookupApplicationLogs","LookupApplicationBoxByIDandName","SearchAccounts","SearchForBlockHeaders","SearchForTransactions","SearchForAssets","SearchForApplications","SearchForApplicationBoxes","IndexerClient","constructor","tokenOrBaseClient","baseServer","port","headers","makeHealthCheck","c","lookupAssetBalances","index","lookupAssetTransactions","lookupAccountTransactions","account","lookupBlock","round","lookupTransactionByID","txID","lookupAccountByID","lookupAccountAssets","lookupAccountCreatedAssets","lookupAccountAppLocalStates","lookupAccountCreatedApplications","lookupAssetByID","lookupApplications","lookupApplicationLogs","appID","searchAccounts","searchForBlockHeaders","searchForTransactions","searchForAssets","searchForApplications","searchForApplicationBoxes","lookupApplicationBoxByIDandName","boxName"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\indexer\\indexer.ts"],"sourcesContent":["import ServiceClient from '../serviceClient.js';\nimport MakeHealthCheck from './makeHealthCheck.js';\nimport LookupAssetBalances from './lookupAssetBalances.js';\nimport LookupAssetTransactions from './lookupAssetTransactions.js';\nimport LookupAccountTransactions from './lookupAccountTransactions.js';\nimport LookupBlock from './lookupBlock.js';\nimport LookupTransactionByID from './lookupTransactionByID.js';\nimport LookupAccountByID from './lookupAccountByID.js';\nimport LookupAccountAssets from './lookupAccountAssets.js';\nimport LookupAccountCreatedAssets from './lookupAccountCreatedAssets.js';\nimport LookupAccountAppLocalStates from './lookupAccountAppLocalStates.js';\nimport LookupAccountCreatedApplications from './lookupAccountCreatedApplications.js';\nimport LookupAssetByID from './lookupAssetByID.js';\nimport LookupApplications from './lookupApplications.js';\nimport LookupApplicationLogs from './lookupApplicationLogs.js';\nimport LookupApplicationBoxByIDandName from './lookupApplicationBoxByIDandName.js';\nimport SearchAccounts from './searchAccounts.js';\nimport SearchForBlockHeaders from './searchForBlockHeaders.js';\nimport SearchForTransactions from './searchForTransactions.js';\nimport SearchForAssets from './searchForAssets.js';\nimport SearchForApplications from './searchForApplications.js';\nimport SearchForApplicationBoxes from './searchForApplicationBoxes.js';\nimport { BaseHTTPClient } from '../../baseHTTPClient.js';\nimport {\n  CustomTokenHeader,\n  IndexerTokenHeader,\n} from '../../urlTokenBaseHTTPClient.js';\nimport { Address } from '../../../encoding/address.js';\n\n/**\n * The Indexer provides a REST API interface of API calls to support searching the Algorand Blockchain.\n *\n * The Indexer REST APIs retrieve the blockchain data from a PostgreSQL compatible database that must be populated.\n *\n * This database is populated using the same indexer instance or a separate instance of the indexer which must connect to the algod process of a running Algorand node to read block data.\n *\n * This node must also be an Archival node to make searching the entire blockchain possible.\n *\n * #### Relevant Information\n * [Learn more about Indexer](https://developer.algorand.org/docs/get-details/indexer/)\n *\n * [Run Indexer in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/#algod-indexer-and-kmd-rest-endpoints)\n */\nexport class IndexerClient extends ServiceClient {\n  /**\n   * Create an IndexerClient from\n   * * either a token, baseServer, port, and optional headers\n   * * or a base client server for interoperability with external dApp wallets\n   *\n   * #### Example\n   * ```typescript\n   * const token  = \"\";\n   * const server = \"http://localhost\";\n   * const port   = 8980;\n   * const indexerClient = new algosdk.Indexer(token, server, port);\n   * ```\n   * @remarks\n   * The above configuration is for a sandbox private network.\n   * For applications on production, you are encouraged to run your own node with indexer, or use an Algorand REST API provider with a dedicated API key.\n   *\n   * @param tokenOrBaseClient - The API token for the Indexer API\n   * @param baseServer - REST endpoint\n   * @param port - Port number if specifically configured by the server\n   * @param headers - Optional headers\n   */\n  constructor(\n    tokenOrBaseClient:\n      | string\n      | IndexerTokenHeader\n      | CustomTokenHeader\n      | BaseHTTPClient,\n    baseServer = 'http://127.0.0.1',\n    port: string | number = 8080,\n    headers: Record<string, string> = {}\n  ) {\n    super('X-Indexer-API-Token', tokenOrBaseClient, baseServer, port, headers);\n  }\n\n  /**\n   * Returns the health object for the service.\n   * Returns 200 if healthy.\n   *\n   * #### Example\n   * ```typescript\n   * const health = await indexerClient.makeHealthCheck().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)\n   * @category GET\n   */\n  makeHealthCheck() {\n    return new MakeHealthCheck(this.c);\n  }\n\n  /**\n   * Returns the list of accounts who hold the given asset and their balance.\n   *\n   * #### Example\n   * ```typescript\n   * const assetId = 163650;\n   * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)\n   * @param index - The asset ID to look up.\n   * @category GET\n   */\n  lookupAssetBalances(index: number | bigint) {\n    return new LookupAssetBalances(this.c, index);\n  }\n\n  /**\n   * Returns transactions relating to the given asset.\n   *\n   * #### Example\n   * ```typescript\n   * const assetId = 163650;\n   * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\n   * @param index - The asset ID to look up.\n   * @category GET\n   */\n  lookupAssetTransactions(index: number | bigint) {\n    return new LookupAssetTransactions(this.c, index);\n  }\n\n  /**\n   * Returns transactions relating to the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\n   * @param account - The address of the account.\n   * @category GET\n   */\n  lookupAccountTransactions(account: string | Address) {\n    return new LookupAccountTransactions(this.c, account);\n  }\n\n  /**\n   * Returns the block for the passed round.\n   *\n   * #### Example\n   * ```typescript\n   * const targetBlock = 18309917;\n   * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\n   * @param round - The number of the round to look up.\n   * @category GET\n   */\n  lookupBlock(round: number | bigint) {\n    return new LookupBlock(this.c, round);\n  }\n\n  /**\n   * Returns information about the given transaction.\n   *\n   * #### Example\n   * ```typescript\n   * const txnId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n   * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)\n   * @param txID - The ID of the transaction to look up.\n   * @category GET\n   */\n  lookupTransactionByID(txID: string) {\n    return new LookupTransactionByID(this.c, txID);\n  }\n\n  /**\n   * Returns information about the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountInfo = await indexerClient.lookupAccountByID(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)\n   * @param account - The address of the account to look up.\n   * @category GET\n   */\n  lookupAccountByID(account: string | Address) {\n    return new LookupAccountByID(this.c, account);\n  }\n\n  /**\n   * Returns asset about the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountAssets = await indexerClient.lookupAccountAssets(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)\n   * @param account - The address of the account to look up.\n   * @category GET\n   */\n  lookupAccountAssets(account: string | Address) {\n    return new LookupAccountAssets(this.c, account);\n  }\n\n  /**\n   * Returns asset information created by the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)\n   * @param account - The address of the account to look up.\n   * @category GET\n   */\n  lookupAccountCreatedAssets(account: string | Address) {\n    return new LookupAccountCreatedAssets(this.c, account);\n  }\n\n  /**\n   * Returns application local state about the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)\n   * @param account - The address of the account to look up.\n   * @category GET\n   */\n  lookupAccountAppLocalStates(account: string | Address) {\n    return new LookupAccountAppLocalStates(this.c, account);\n  }\n\n  /**\n   * Returns application information created by the given account.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)\n   * @param account - The address of the account to look up.\n   * @category GET\n   */\n  lookupAccountCreatedApplications(account: string | Address) {\n    return new LookupAccountCreatedApplications(this.c, account);\n  }\n\n  /**\n   * Returns information about the passed asset.\n   *\n   * #### Example\n   * ```typescript\n   * const assetId = 163650;\n   * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)\n   * @param index - The ID of the asset ot look up.\n   * @category GET\n   */\n  lookupAssetByID(index: number | bigint) {\n    return new LookupAssetByID(this.c, index);\n  }\n\n  /**\n   * Returns information about the passed application.\n   *\n   * #### Example\n   * ```typescript\n   * const appId = 60553466;\n   * const appInfo = await indexerClient.lookupApplications(appId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)\n   * @param index - The ID of the application to look up.\n   * @category GET\n   */\n  lookupApplications(index: number | bigint) {\n    return new LookupApplications(this.c, index);\n  }\n\n  /**\n   * Returns log messages generated by the passed in application.\n   *\n   * #### Example\n   * ```typescript\n   * const appId = 60553466;\n   * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n   * @param appID - The ID of the application which generated the logs.\n   * @category GET\n   */\n  lookupApplicationLogs(appID: number | bigint) {\n    return new LookupApplicationLogs(this.c, appID);\n  }\n\n  /**\n   * Returns information about indexed accounts.\n   *\n   * #### Example\n   * ```typescript\n   * const accounts = await indexerClient.searchAccounts().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\n   * @category GET\n   */\n  searchAccounts() {\n    return new SearchAccounts(this.c);\n  }\n\n  /**\n   * Returns information about indexed block headers.\n   *\n   * #### Example\n   * ```typescript\n   * const bhs = await indexerClient.searchForBlockHeaders().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)\n   * @category GET\n   */\n  searchForBlockHeaders() {\n    return new SearchForBlockHeaders(this.c);\n  }\n\n  /**\n   * Returns information about indexed transactions.\n   *\n   * #### Example\n   * ```typescript\n   * const txns = await indexerClient.searchForTransactions().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\n   * @category GET\n   */\n  searchForTransactions() {\n    return new SearchForTransactions(this.c);\n  }\n\n  /**\n   * Returns information about indexed assets.\n   *\n   * #### Example\n   * ```typescript\n   * const assets = await indexerClient.searchForAssets().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\n   * @category GET\n   */\n  searchForAssets() {\n    return new SearchForAssets(this.c);\n  }\n\n  /**\n   * Returns information about indexed applications.\n   *\n   * #### Example\n   * ```typescript\n   * const apps = await indexerClient.searchForApplications().do();\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)\n   * @category GET\n   */\n  searchForApplications() {\n    return new SearchForApplications(this.c);\n  }\n\n  /**\n   * Returns information about indexed application boxes.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   * const appID = 1234;\n   *\n   * const responsePage1 = await indexerClient\n   *        .searchForApplicationBoxes(appID)\n   *        .limit(maxResults)\n   *        .do();\n   * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n   *\n   * const responsePage2 = await indexerClient\n   *        .searchForApplicationBoxes(appID)\n   *        .limit(maxResults)\n   *        .nextToken(responsePage1.nextToken)\n   *        .do();\n   * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)\n   * @param appID - The ID of the application with boxes.\n   * @category GET\n   */\n  searchForApplicationBoxes(appID: number | bigint) {\n    return new SearchForApplicationBoxes(this.c, appID);\n  }\n\n  /**\n   * Returns information about the application box given its name.\n   *\n   * #### Example\n   * ```typescript\n   * const boxName = Buffer.from(\"foo\");\n   * const boxResponse = await indexerClient\n   *        .LookupApplicationBoxByIDandName(1234, boxName)\n   *        .do();\n   * const boxValue = boxResponse.value;\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n   * @param appID - The ID of the application with boxes.\n   * @category GET\n   */\n  lookupApplicationBoxByIDandName(appID: number | bigint, boxName: Uint8Array) {\n    return new LookupApplicationBoxByIDandName(this.c, appID, boxName);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}