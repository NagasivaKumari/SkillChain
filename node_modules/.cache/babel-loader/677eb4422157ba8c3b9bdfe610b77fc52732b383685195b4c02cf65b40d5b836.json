{"ast":null,"code":"/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n/* eslint-disable no-use-before-define */\nimport { ensureBigInt, ensureSafeInteger } from '../../../../utils/utils.js';\nimport { NamedMapSchema, ArraySchema, Uint64Schema, StringSchema, BooleanSchema, ByteArraySchema, OptionalSchema } from '../../../../encoding/schema/index.js';\nimport { base64ToBytes } from '../../../../encoding/binarydata.js';\nimport { Address } from '../../../../encoding/address.js';\nimport { UntypedValue } from '../../untypedmodel.js';\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'address',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'amount',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'amount-without-pending-rewards',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'min-balance',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'pending-rewards',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'rewards',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'status',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'total-apps-opted-in',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total-assets-opted-in',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total-box-bytes',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total-boxes',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total-created-apps',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total-created-assets',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'apps-local-state',\n        valueSchema: new OptionalSchema(new ArraySchema(ApplicationLocalState.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'apps-total-extra-pages',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'apps-total-schema',\n        valueSchema: new OptionalSchema(ApplicationStateSchema.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'assets',\n        valueSchema: new OptionalSchema(new ArraySchema(AssetHolding.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'auth-addr',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'closed-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'created-apps',\n        valueSchema: new OptionalSchema(new ArraySchema(Application.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'created-assets',\n        valueSchema: new OptionalSchema(new ArraySchema(Asset.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'created-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'deleted',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'incentive-eligible',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'last-heartbeat',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'last-proposed',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'participation',\n        valueSchema: new OptionalSchema(AccountParticipation.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'reward-base',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'sig-type',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param minBalance - MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - total rewards of MicroAlgos the account has received, including pending rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - voting status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\n   * values of boxes which belong to the associated application.\n   * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\n   * application.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - application local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - the sum of all of the local schemas and global schemas in this account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - The address against which signing should be checked. If empty, the address of\n   * the current account is used. This field can be updated in any transaction by\n   * setting the RekeyTo field.\n   * @param closedAtRound - Round during which this account was most recently closed.\n   * @param createdApps - parameters of applications created by this account including app global data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param createdAtRound - Round during which this account first appeared in a transaction.\n   * @param deleted - Whether or not this account is currently closed.\n   * @param incentiveEligible - can the account receive block incentives if its balance is in range at proposal\n   * time.\n   * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their\n   * online status.\n   * @param lastProposed - The round in which this account last proposed the block.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - used as part of the rewards computation. Only applicable to accounts which are\n   * participating.\n   * @param sigType - the type of signature used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * * or null if unknown\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    minBalance,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalBoxBytes,\n    totalBoxes,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    closedAtRound,\n    createdApps,\n    createdAssets,\n    createdAtRound,\n    deleted,\n    incentiveEligible,\n    lastHeartbeat,\n    lastProposed,\n    participation,\n    rewardBase,\n    sigType\n  }) {\n    this.address = address;\n    this.amount = ensureBigInt(amount);\n    this.amountWithoutPendingRewards = ensureBigInt(amountWithoutPendingRewards);\n    this.minBalance = ensureSafeInteger(minBalance);\n    this.pendingRewards = ensureBigInt(pendingRewards);\n    this.rewards = ensureBigInt(rewards);\n    this.round = ensureBigInt(round);\n    this.status = status;\n    this.totalAppsOptedIn = ensureSafeInteger(totalAppsOptedIn);\n    this.totalAssetsOptedIn = ensureSafeInteger(totalAssetsOptedIn);\n    this.totalBoxBytes = ensureSafeInteger(totalBoxBytes);\n    this.totalBoxes = ensureSafeInteger(totalBoxes);\n    this.totalCreatedApps = ensureSafeInteger(totalCreatedApps);\n    this.totalCreatedAssets = ensureSafeInteger(totalCreatedAssets);\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = typeof appsTotalExtraPages === 'undefined' ? undefined : ensureSafeInteger(appsTotalExtraPages);\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = typeof authAddr === 'string' ? Address.fromString(authAddr) : authAddr;\n    this.closedAtRound = typeof closedAtRound === 'undefined' ? undefined : ensureBigInt(closedAtRound);\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.createdAtRound = typeof createdAtRound === 'undefined' ? undefined : ensureBigInt(createdAtRound);\n    this.deleted = deleted;\n    this.incentiveEligible = incentiveEligible;\n    this.lastHeartbeat = typeof lastHeartbeat === 'undefined' ? undefined : ensureSafeInteger(lastHeartbeat);\n    this.lastProposed = typeof lastProposed === 'undefined' ? undefined : ensureSafeInteger(lastProposed);\n    this.participation = participation;\n    this.rewardBase = typeof rewardBase === 'undefined' ? undefined : ensureBigInt(rewardBase);\n    this.sigType = sigType;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Account.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['address', this.address], ['amount', this.amount], ['amount-without-pending-rewards', this.amountWithoutPendingRewards], ['min-balance', this.minBalance], ['pending-rewards', this.pendingRewards], ['rewards', this.rewards], ['round', this.round], ['status', this.status], ['total-apps-opted-in', this.totalAppsOptedIn], ['total-assets-opted-in', this.totalAssetsOptedIn], ['total-box-bytes', this.totalBoxBytes], ['total-boxes', this.totalBoxes], ['total-created-apps', this.totalCreatedApps], ['total-created-assets', this.totalCreatedAssets], ['apps-local-state', typeof this.appsLocalState !== 'undefined' ? this.appsLocalState.map(v => v.toEncodingData()) : undefined], ['apps-total-extra-pages', this.appsTotalExtraPages], ['apps-total-schema', typeof this.appsTotalSchema !== 'undefined' ? this.appsTotalSchema.toEncodingData() : undefined], ['assets', typeof this.assets !== 'undefined' ? this.assets.map(v => v.toEncodingData()) : undefined], ['auth-addr', typeof this.authAddr !== 'undefined' ? this.authAddr.toString() : undefined], ['closed-at-round', this.closedAtRound], ['created-apps', typeof this.createdApps !== 'undefined' ? this.createdApps.map(v => v.toEncodingData()) : undefined], ['created-assets', typeof this.createdAssets !== 'undefined' ? this.createdAssets.map(v => v.toEncodingData()) : undefined], ['created-at-round', this.createdAtRound], ['deleted', this.deleted], ['incentive-eligible', this.incentiveEligible], ['last-heartbeat', this.lastHeartbeat], ['last-proposed', this.lastProposed], ['participation', typeof this.participation !== 'undefined' ? this.participation.toEncodingData() : undefined], ['reward-base', this.rewardBase], ['sig-type', this.sigType]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Account: ${data}`);\n    }\n    return new Account({\n      address: data.get('address'),\n      amount: data.get('amount'),\n      amountWithoutPendingRewards: data.get('amount-without-pending-rewards'),\n      minBalance: data.get('min-balance'),\n      pendingRewards: data.get('pending-rewards'),\n      rewards: data.get('rewards'),\n      round: data.get('round'),\n      status: data.get('status'),\n      totalAppsOptedIn: data.get('total-apps-opted-in'),\n      totalAssetsOptedIn: data.get('total-assets-opted-in'),\n      totalBoxBytes: data.get('total-box-bytes'),\n      totalBoxes: data.get('total-boxes'),\n      totalCreatedApps: data.get('total-created-apps'),\n      totalCreatedAssets: data.get('total-created-assets'),\n      appsLocalState: typeof data.get('apps-local-state') !== 'undefined' ? data.get('apps-local-state').map(v => ApplicationLocalState.fromEncodingData(v)) : undefined,\n      appsTotalExtraPages: data.get('apps-total-extra-pages'),\n      appsTotalSchema: typeof data.get('apps-total-schema') !== 'undefined' ? ApplicationStateSchema.fromEncodingData(data.get('apps-total-schema')) : undefined,\n      assets: typeof data.get('assets') !== 'undefined' ? data.get('assets').map(v => AssetHolding.fromEncodingData(v)) : undefined,\n      authAddr: data.get('auth-addr'),\n      closedAtRound: data.get('closed-at-round'),\n      createdApps: typeof data.get('created-apps') !== 'undefined' ? data.get('created-apps').map(v => Application.fromEncodingData(v)) : undefined,\n      createdAssets: typeof data.get('created-assets') !== 'undefined' ? data.get('created-assets').map(v => Asset.fromEncodingData(v)) : undefined,\n      createdAtRound: data.get('created-at-round'),\n      deleted: data.get('deleted'),\n      incentiveEligible: data.get('incentive-eligible'),\n      lastHeartbeat: data.get('last-heartbeat'),\n      lastProposed: data.get('last-proposed'),\n      participation: typeof data.get('participation') !== 'undefined' ? AccountParticipation.fromEncodingData(data.get('participation')) : undefined,\n      rewardBase: data.get('reward-base'),\n      sigType: data.get('sig-type')\n    });\n  }\n}\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'selection-participation-key',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'vote-first-valid',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'vote-key-dilution',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'vote-last-valid',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'vote-participation-key',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'state-proof-key',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - First round for which this participation is valid.\n   * @param voteKeyDilution - Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - Last round for which this participation is valid.\n   * @param voteParticipationKey - root participation public key (if any) currently registered for this round.\n   * @param stateProofKey - Root of the state proof key (if any)\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey\n  }) {\n    this.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? base64ToBytes(selectionParticipationKey) : selectionParticipationKey;\n    this.voteFirstValid = ensureBigInt(voteFirstValid);\n    this.voteKeyDilution = ensureBigInt(voteKeyDilution);\n    this.voteLastValid = ensureBigInt(voteLastValid);\n    this.voteParticipationKey = typeof voteParticipationKey === 'string' ? base64ToBytes(voteParticipationKey) : voteParticipationKey;\n    this.stateProofKey = typeof stateProofKey === 'string' ? base64ToBytes(stateProofKey) : stateProofKey;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountParticipation.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['selection-participation-key', this.selectionParticipationKey], ['vote-first-valid', this.voteFirstValid], ['vote-key-dilution', this.voteKeyDilution], ['vote-last-valid', this.voteLastValid], ['vote-participation-key', this.voteParticipationKey], ['state-proof-key', this.stateProofKey]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountParticipation: ${data}`);\n    }\n    return new AccountParticipation({\n      selectionParticipationKey: data.get('selection-participation-key'),\n      voteFirstValid: data.get('vote-first-valid'),\n      voteKeyDilution: data.get('vote-key-dilution'),\n      voteLastValid: data.get('vote-last-valid'),\n      voteParticipationKey: data.get('vote-participation-key'),\n      stateProofKey: data.get('state-proof-key')\n    });\n  }\n}\n/**\n *\n */\nexport class AccountResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'account',\n        valueSchema: Account.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AccountResponse` object.\n   * @param account - Account information at a given round.\n   * Definition:\n   * data/basics/userBalance.go : AccountData\n   * @param currentRound - Round at which the results were computed.\n   */\n  constructor({\n    account,\n    currentRound\n  }) {\n    this.account = account;\n    this.currentRound = ensureBigInt(currentRound);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['account', this.account.toEncodingData()], ['current-round', this.currentRound]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountResponse: ${data}`);\n    }\n    return new AccountResponse({\n      account: Account.fromEncodingData(data.get('account') ?? new Map()),\n      currentRound: data.get('current-round')\n    });\n  }\n}\n/**\n * Application state delta.\n */\nexport class AccountStateDelta {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'address',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'delta',\n        valueSchema: new ArraySchema(EvalDeltaKeyValue.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor({\n    address,\n    delta\n  }) {\n    this.address = address;\n    this.delta = delta;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountStateDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['address', this.address], ['delta', this.delta.map(v => v.toEncodingData())]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountStateDelta: ${data}`);\n    }\n    return new AccountStateDelta({\n      address: data.get('address'),\n      delta: (data.get('delta') ?? []).map(v => EvalDeltaKeyValue.fromEncodingData(v))\n    });\n  }\n}\n/**\n *\n */\nexport class AccountsResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'accounts',\n        valueSchema: new ArraySchema(Account.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AccountsResponse` object.\n   * @param accounts -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    accounts,\n    currentRound,\n    nextToken\n  }) {\n    this.accounts = accounts;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AccountsResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['accounts', this.accounts.map(v => v.toEncodingData())], ['current-round', this.currentRound], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountsResponse: ${data}`);\n    }\n    return new AccountsResponse({\n      accounts: (data.get('accounts') ?? []).map(v => Account.fromEncodingData(v)),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token')\n    });\n  }\n}\n/**\n * Application index and its parameters\n */\nexport class Application {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'params',\n        valueSchema: ApplicationParams.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'created-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'deleted',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'deleted-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Application` object.\n   * @param id - application index.\n   * @param params - application parameters.\n   * @param createdAtRound - Round when this application was created.\n   * @param deleted - Whether or not this application is currently deleted.\n   * @param deletedAtRound - Round when this application was deleted.\n   */\n  constructor({\n    id,\n    params,\n    createdAtRound,\n    deleted,\n    deletedAtRound\n  }) {\n    this.id = ensureBigInt(id);\n    this.params = params;\n    this.createdAtRound = typeof createdAtRound === 'undefined' ? undefined : ensureBigInt(createdAtRound);\n    this.deleted = deleted;\n    this.deletedAtRound = typeof deletedAtRound === 'undefined' ? undefined : ensureBigInt(deletedAtRound);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Application.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['id', this.id], ['params', this.params.toEncodingData()], ['created-at-round', this.createdAtRound], ['deleted', this.deleted], ['deleted-at-round', this.deletedAtRound]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Application: ${data}`);\n    }\n    return new Application({\n      id: data.get('id'),\n      params: ApplicationParams.fromEncodingData(data.get('params') ?? new Map()),\n      createdAtRound: data.get('created-at-round'),\n      deleted: data.get('deleted'),\n      deletedAtRound: data.get('deleted-at-round')\n    });\n  }\n}\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'schema',\n        valueSchema: ApplicationStateSchema.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'closed-out-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'deleted',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'key-value',\n        valueSchema: new OptionalSchema(new ArraySchema(TealKeyValue.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'opted-in-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - schema.\n   * @param closedOutAtRound - Round when account closed out of the application.\n   * @param deleted - Whether or not the application local state is currently deleted from its\n   * account.\n   * @param keyValue - storage.\n   * @param optedInAtRound - Round when the account opted into the application.\n   */\n  constructor({\n    id,\n    schema,\n    closedOutAtRound,\n    deleted,\n    keyValue,\n    optedInAtRound\n  }) {\n    this.id = ensureBigInt(id);\n    this.schema = schema;\n    this.closedOutAtRound = typeof closedOutAtRound === 'undefined' ? undefined : ensureBigInt(closedOutAtRound);\n    this.deleted = deleted;\n    this.keyValue = keyValue;\n    this.optedInAtRound = typeof optedInAtRound === 'undefined' ? undefined : ensureBigInt(optedInAtRound);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationLocalState.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['id', this.id], ['schema', this.schema.toEncodingData()], ['closed-out-at-round', this.closedOutAtRound], ['deleted', this.deleted], ['key-value', typeof this.keyValue !== 'undefined' ? this.keyValue.map(v => v.toEncodingData()) : undefined], ['opted-in-at-round', this.optedInAtRound]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLocalState: ${data}`);\n    }\n    return new ApplicationLocalState({\n      id: data.get('id'),\n      schema: ApplicationStateSchema.fromEncodingData(data.get('schema') ?? new Map()),\n      closedOutAtRound: data.get('closed-out-at-round'),\n      deleted: data.get('deleted'),\n      keyValue: typeof data.get('key-value') !== 'undefined' ? data.get('key-value').map(v => TealKeyValue.fromEncodingData(v)) : undefined,\n      optedInAtRound: data.get('opted-in-at-round')\n    });\n  }\n}\n/**\n *\n */\nexport class ApplicationLocalStatesResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'apps-local-states',\n        valueSchema: new ArraySchema(ApplicationLocalState.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationLocalStatesResponse` object.\n   * @param appsLocalStates -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    appsLocalStates,\n    currentRound,\n    nextToken\n  }) {\n    this.appsLocalStates = appsLocalStates;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationLocalStatesResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['apps-local-states', this.appsLocalStates.map(v => v.toEncodingData())], ['current-round', this.currentRound], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLocalStatesResponse: ${data}`);\n    }\n    return new ApplicationLocalStatesResponse({\n      appsLocalStates: (data.get('apps-local-states') ?? []).map(v => ApplicationLocalState.fromEncodingData(v)),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token')\n    });\n  }\n}\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationLogData {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'logs',\n        valueSchema: new ArraySchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'txid',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationLogData` object.\n   * @param logs - Logs for the application being executed by the transaction.\n   * @param txid - Transaction ID\n   */\n  constructor({\n    logs,\n    txid\n  }) {\n    this.logs = logs;\n    this.txid = txid;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationLogData.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['logs', this.logs], ['txid', this.txid]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLogData: ${data}`);\n    }\n    return new ApplicationLogData({\n      logs: data.get('logs'),\n      txid: data.get('txid')\n    });\n  }\n}\n/**\n *\n */\nexport class ApplicationLogsResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'application-id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'log-data',\n        valueSchema: new OptionalSchema(new ArraySchema(ApplicationLogData.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationLogsResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param currentRound - Round at which the results were computed.\n   * @param logData -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applicationId,\n    currentRound,\n    logData,\n    nextToken\n  }) {\n    this.applicationId = ensureBigInt(applicationId);\n    this.currentRound = ensureBigInt(currentRound);\n    this.logData = logData;\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationLogsResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['application-id', this.applicationId], ['current-round', this.currentRound], ['log-data', typeof this.logData !== 'undefined' ? this.logData.map(v => v.toEncodingData()) : undefined], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLogsResponse: ${data}`);\n    }\n    return new ApplicationLogsResponse({\n      applicationId: data.get('application-id'),\n      currentRound: data.get('current-round'),\n      logData: typeof data.get('log-data') !== 'undefined' ? data.get('log-data').map(v => ApplicationLogData.fromEncodingData(v)) : undefined,\n      nextToken: data.get('next-token')\n    });\n  }\n}\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'approval-program',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'clear-state-program',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'creator',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'extra-program-pages',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'global-state',\n        valueSchema: new OptionalSchema(new ArraySchema(TealKeyValue.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'global-state-schema',\n        valueSchema: new OptionalSchema(ApplicationStateSchema.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'local-state-schema',\n        valueSchema: new OptionalSchema(ApplicationStateSchema.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - approval program.\n   * @param clearStateProgram - clear state program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - the number of extra program pages available to this app.\n   * @param globalState - global state\n   * @param globalStateSchema - global schema\n   * @param localStateSchema - local schema\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema\n  }) {\n    this.approvalProgram = typeof approvalProgram === 'string' ? base64ToBytes(approvalProgram) : approvalProgram;\n    this.clearStateProgram = typeof clearStateProgram === 'string' ? base64ToBytes(clearStateProgram) : clearStateProgram;\n    this.creator = typeof creator === 'string' ? Address.fromString(creator) : creator;\n    this.extraProgramPages = typeof extraProgramPages === 'undefined' ? undefined : ensureSafeInteger(extraProgramPages);\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationParams.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['approval-program', this.approvalProgram], ['clear-state-program', this.clearStateProgram], ['creator', typeof this.creator !== 'undefined' ? this.creator.toString() : undefined], ['extra-program-pages', this.extraProgramPages], ['global-state', typeof this.globalState !== 'undefined' ? this.globalState.map(v => v.toEncodingData()) : undefined], ['global-state-schema', typeof this.globalStateSchema !== 'undefined' ? this.globalStateSchema.toEncodingData() : undefined], ['local-state-schema', typeof this.localStateSchema !== 'undefined' ? this.localStateSchema.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationParams: ${data}`);\n    }\n    return new ApplicationParams({\n      approvalProgram: data.get('approval-program'),\n      clearStateProgram: data.get('clear-state-program'),\n      creator: data.get('creator'),\n      extraProgramPages: data.get('extra-program-pages'),\n      globalState: typeof data.get('global-state') !== 'undefined' ? data.get('global-state').map(v => TealKeyValue.fromEncodingData(v)) : undefined,\n      globalStateSchema: typeof data.get('global-state-schema') !== 'undefined' ? ApplicationStateSchema.fromEncodingData(data.get('global-state-schema')) : undefined,\n      localStateSchema: typeof data.get('local-state-schema') !== 'undefined' ? ApplicationStateSchema.fromEncodingData(data.get('local-state-schema')) : undefined\n    });\n  }\n}\n/**\n *\n */\nexport class ApplicationResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'application',\n        valueSchema: new OptionalSchema(Application.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param application - Application index and its parameters\n   */\n  constructor({\n    currentRound,\n    application\n  }) {\n    this.currentRound = ensureBigInt(currentRound);\n    this.application = application;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['current-round', this.currentRound], ['application', typeof this.application !== 'undefined' ? this.application.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationResponse: ${data}`);\n    }\n    return new ApplicationResponse({\n      currentRound: data.get('current-round'),\n      application: typeof data.get('application') !== 'undefined' ? Application.fromEncodingData(data.get('application')) : undefined\n    });\n  }\n}\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'num-byte-slice',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'num-uint',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numByteSlice - number of byte slices.\n   * @param numUint - number of uints.\n   */\n  constructor({\n    numByteSlice,\n    numUint\n  }) {\n    this.numByteSlice = ensureSafeInteger(numByteSlice);\n    this.numUint = ensureSafeInteger(numUint);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationStateSchema.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['num-byte-slice', this.numByteSlice], ['num-uint', this.numUint]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationStateSchema: ${data}`);\n    }\n    return new ApplicationStateSchema({\n      numByteSlice: data.get('num-byte-slice'),\n      numUint: data.get('num-uint')\n    });\n  }\n}\n/**\n *\n */\nexport class ApplicationsResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'applications',\n        valueSchema: new ArraySchema(Application.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ApplicationsResponse` object.\n   * @param applications -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applications,\n    currentRound,\n    nextToken\n  }) {\n    this.applications = applications;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ApplicationsResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['applications', this.applications.map(v => v.toEncodingData())], ['current-round', this.currentRound], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationsResponse: ${data}`);\n    }\n    return new ApplicationsResponse({\n      applications: (data.get('applications') ?? []).map(v => Application.fromEncodingData(v)),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token')\n    });\n  }\n}\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'index',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'params',\n        valueSchema: AssetParams.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'created-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'deleted',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'destroyed-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   * @param createdAtRound - Round during which this asset was created.\n   * @param deleted - Whether or not this asset is currently deleted.\n   * @param destroyedAtRound - Round during which this asset was destroyed.\n   */\n  constructor({\n    index,\n    params,\n    createdAtRound,\n    deleted,\n    destroyedAtRound\n  }) {\n    this.index = ensureBigInt(index);\n    this.params = params;\n    this.createdAtRound = typeof createdAtRound === 'undefined' ? undefined : ensureBigInt(createdAtRound);\n    this.deleted = deleted;\n    this.destroyedAtRound = typeof destroyedAtRound === 'undefined' ? undefined : ensureBigInt(destroyedAtRound);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Asset.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['index', this.index], ['params', this.params.toEncodingData()], ['created-at-round', this.createdAtRound], ['deleted', this.deleted], ['destroyed-at-round', this.destroyedAtRound]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Asset: ${data}`);\n    }\n    return new Asset({\n      index: data.get('index'),\n      params: AssetParams.fromEncodingData(data.get('params') ?? new Map()),\n      createdAtRound: data.get('created-at-round'),\n      deleted: data.get('deleted'),\n      destroyedAtRound: data.get('destroyed-at-round')\n    });\n  }\n}\n/**\n *\n */\nexport class AssetBalancesResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'balances',\n        valueSchema: new ArraySchema(MiniAssetHolding.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AssetBalancesResponse` object.\n   * @param balances -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    balances,\n    currentRound,\n    nextToken\n  }) {\n    this.balances = balances;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetBalancesResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['balances', this.balances.map(v => v.toEncodingData())], ['current-round', this.currentRound], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetBalancesResponse: ${data}`);\n    }\n    return new AssetBalancesResponse({\n      balances: (data.get('balances') ?? []).map(v => MiniAssetHolding.fromEncodingData(v)),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token')\n    });\n  }\n}\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'amount',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'asset-id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'is-frozen',\n        valueSchema: new BooleanSchema(),\n        omitEmpty: true\n      }, {\n        key: 'deleted',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'opted-in-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'opted-out-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - whether or not the holding is frozen.\n   * @param deleted - Whether or not the asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into this asset holding.\n   * @param optedOutAtRound - Round during which the account opted out of this asset holding.\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound\n  }) {\n    this.amount = ensureBigInt(amount);\n    this.assetId = ensureBigInt(assetId);\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound = typeof optedInAtRound === 'undefined' ? undefined : ensureBigInt(optedInAtRound);\n    this.optedOutAtRound = typeof optedOutAtRound === 'undefined' ? undefined : ensureBigInt(optedOutAtRound);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetHolding.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['amount', this.amount], ['asset-id', this.assetId], ['is-frozen', this.isFrozen], ['deleted', this.deleted], ['opted-in-at-round', this.optedInAtRound], ['opted-out-at-round', this.optedOutAtRound]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHolding: ${data}`);\n    }\n    return new AssetHolding({\n      amount: data.get('amount'),\n      assetId: data.get('asset-id'),\n      isFrozen: data.get('is-frozen'),\n      deleted: data.get('deleted'),\n      optedInAtRound: data.get('opted-in-at-round'),\n      optedOutAtRound: data.get('opted-out-at-round')\n    });\n  }\n}\n/**\n *\n */\nexport class AssetHoldingsResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'assets',\n        valueSchema: new ArraySchema(AssetHolding.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AssetHoldingsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken\n  }) {\n    this.assets = assets;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetHoldingsResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['assets', this.assets.map(v => v.toEncodingData())], ['current-round', this.currentRound], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHoldingsResponse: ${data}`);\n    }\n    return new AssetHoldingsResponse({\n      assets: (data.get('assets') ?? []).map(v => AssetHolding.fromEncodingData(v)),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token')\n    });\n  }\n}\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'creator',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'decimals',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'total',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'clawback',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'default-frozen',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'freeze',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'manager',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'metadata-hash',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'name',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'name-b64',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'reserve',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'unit-name',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'unit-name-b64',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'url',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'url-b64',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - The number of digits to use after the decimal point when displaying this asset.\n   * If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths.\n   * If 2, the base unit of the asset is in hundredths, and so on. This value must be\n   * between 0 and 19 (inclusive).\n   * @param total - The total number of units of this asset.\n   * @param clawback - Address of account used to clawback holdings of this asset. If empty, clawback\n   * is not permitted.\n   * @param defaultFrozen - Whether holdings of this asset are frozen by default.\n   * @param freeze - Address of account used to freeze holdings of this asset. If empty, freezing is\n   * not permitted.\n   * @param manager - Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - A commitment to some unspecified asset metadata. The format of this metadata is\n   * up to the application.\n   * @param name - Name of this asset, as supplied by the creator. Included only when the asset\n   * name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - Name of a unit of this asset, as supplied by the creator. Included only when the\n   * name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - URL where more information about the asset can be retrieved. Included only when\n   * the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64\n  }) {\n    this.creator = creator;\n    this.decimals = ensureSafeInteger(decimals);\n    this.total = ensureBigInt(total);\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash = typeof metadataHash === 'string' ? base64ToBytes(metadataHash) : metadataHash;\n    this.name = name;\n    this.nameB64 = typeof nameB64 === 'string' ? base64ToBytes(nameB64) : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 = typeof unitNameB64 === 'string' ? base64ToBytes(unitNameB64) : unitNameB64;\n    this.url = url;\n    this.urlB64 = typeof urlB64 === 'string' ? base64ToBytes(urlB64) : urlB64;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetParams.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['creator', this.creator], ['decimals', this.decimals], ['total', this.total], ['clawback', this.clawback], ['default-frozen', this.defaultFrozen], ['freeze', this.freeze], ['manager', this.manager], ['metadata-hash', this.metadataHash], ['name', this.name], ['name-b64', this.nameB64], ['reserve', this.reserve], ['unit-name', this.unitName], ['unit-name-b64', this.unitNameB64], ['url', this.url], ['url-b64', this.urlB64]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetParams: ${data}`);\n    }\n    return new AssetParams({\n      creator: data.get('creator'),\n      decimals: data.get('decimals'),\n      total: data.get('total'),\n      clawback: data.get('clawback'),\n      defaultFrozen: data.get('default-frozen'),\n      freeze: data.get('freeze'),\n      manager: data.get('manager'),\n      metadataHash: data.get('metadata-hash'),\n      name: data.get('name'),\n      nameB64: data.get('name-b64'),\n      reserve: data.get('reserve'),\n      unitName: data.get('unit-name'),\n      unitNameB64: data.get('unit-name-b64'),\n      url: data.get('url'),\n      urlB64: data.get('url-b64')\n    });\n  }\n}\n/**\n *\n */\nexport class AssetResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'asset',\n        valueSchema: Asset.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AssetResponse` object.\n   * @param asset - Specifies both the unique identifier and the parameters for an asset\n   * @param currentRound - Round at which the results were computed.\n   */\n  constructor({\n    asset,\n    currentRound\n  }) {\n    this.asset = asset;\n    this.currentRound = ensureBigInt(currentRound);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['asset', this.asset.toEncodingData()], ['current-round', this.currentRound]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetResponse: ${data}`);\n    }\n    return new AssetResponse({\n      asset: Asset.fromEncodingData(data.get('asset') ?? new Map()),\n      currentRound: data.get('current-round')\n    });\n  }\n}\n/**\n *\n */\nexport class AssetsResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'assets',\n        valueSchema: new ArraySchema(Asset.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `AssetsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken\n  }) {\n    this.assets = assets;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return AssetsResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['assets', this.assets.map(v => v.toEncodingData())], ['current-round', this.currentRound], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetsResponse: ${data}`);\n    }\n    return new AssetsResponse({\n      assets: (data.get('assets') ?? []).map(v => Asset.fromEncodingData(v)),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token')\n    });\n  }\n}\n/**\n * Block information.\n * Definition:\n * data/bookkeeping/block.go : Block\n */\nexport class Block {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'genesis-hash',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'genesis-id',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'previous-block-hash',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'seed',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'timestamp',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'transactions-root',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'transactions-root-sha256',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'bonus',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'fees-collected',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'participation-updates',\n        valueSchema: new OptionalSchema(ParticipationUpdates.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'proposer',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'proposer-payout',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'rewards',\n        valueSchema: new OptionalSchema(BlockRewards.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'state-proof-tracking',\n        valueSchema: new OptionalSchema(new ArraySchema(StateProofTracking.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'transactions',\n        valueSchema: new OptionalSchema(new ArraySchema(Transaction.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'txn-counter',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-state',\n        valueSchema: new OptionalSchema(BlockUpgradeState.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-vote',\n        valueSchema: new OptionalSchema(BlockUpgradeVote.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Block` object.\n   * @param genesisHash - (gh) hash to which this block belongs.\n   * @param genesisId - (gen) ID to which this block belongs.\n   * @param previousBlockHash - (prev) Previous block hash.\n   * @param round - (rnd) Current round on which this block was appended to the chain.\n   * @param seed - (seed) Sortition seed.\n   * @param timestamp - (ts) Block creation timestamp in seconds since eposh\n   * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\n   * transactions themselves. Two blocks with the same transactions but in a\n   * different order and with different signatures will have the same TxnRoot.\n   * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n   * the default SHA512_256. This commitment can be used on environments where only\n   * the SHA256 function exists.\n   * @param bonus - the potential bonus payout for this block.\n   * @param feesCollected - the sum of all fees paid by transactions in this block.\n   * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\n   * @param proposer - the proposer of this block.\n   * @param proposerPayout - the actual amount transferred to the proposer from the fee sink.\n   * @param rewards - Fields relating to rewards,\n   * @param stateProofTracking - Tracks the status of state proofs.\n   * @param transactions - (txns) list of transactions corresponding to a given round.\n   * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\n   * the time at which support for this feature was introduced.\n   * Specifically, TxnCounter is the number of the next transaction that will be\n   * committed after this block. It is 0 when no transactions have ever been\n   * committed (since TxnCounter started being supported).\n   * @param upgradeState - Fields relating to a protocol upgrade.\n   * @param upgradeVote - Fields relating to voting for a protocol upgrade.\n   */\n  constructor({\n    genesisHash,\n    genesisId,\n    previousBlockHash,\n    round,\n    seed,\n    timestamp,\n    transactionsRoot,\n    transactionsRootSha256,\n    bonus,\n    feesCollected,\n    participationUpdates,\n    proposer,\n    proposerPayout,\n    rewards,\n    stateProofTracking,\n    transactions,\n    txnCounter,\n    upgradeState,\n    upgradeVote\n  }) {\n    this.genesisHash = typeof genesisHash === 'string' ? base64ToBytes(genesisHash) : genesisHash;\n    this.genesisId = genesisId;\n    this.previousBlockHash = typeof previousBlockHash === 'string' ? base64ToBytes(previousBlockHash) : previousBlockHash;\n    this.round = ensureBigInt(round);\n    this.seed = typeof seed === 'string' ? base64ToBytes(seed) : seed;\n    this.timestamp = ensureSafeInteger(timestamp);\n    this.transactionsRoot = typeof transactionsRoot === 'string' ? base64ToBytes(transactionsRoot) : transactionsRoot;\n    this.transactionsRootSha256 = typeof transactionsRootSha256 === 'string' ? base64ToBytes(transactionsRootSha256) : transactionsRootSha256;\n    this.bonus = typeof bonus === 'undefined' ? undefined : ensureSafeInteger(bonus);\n    this.feesCollected = typeof feesCollected === 'undefined' ? undefined : ensureSafeInteger(feesCollected);\n    this.participationUpdates = participationUpdates;\n    this.proposer = typeof proposer === 'string' ? Address.fromString(proposer) : proposer;\n    this.proposerPayout = typeof proposerPayout === 'undefined' ? undefined : ensureSafeInteger(proposerPayout);\n    this.rewards = rewards;\n    this.stateProofTracking = stateProofTracking;\n    this.transactions = transactions;\n    this.txnCounter = typeof txnCounter === 'undefined' ? undefined : ensureSafeInteger(txnCounter);\n    this.upgradeState = upgradeState;\n    this.upgradeVote = upgradeVote;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Block.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['genesis-hash', this.genesisHash], ['genesis-id', this.genesisId], ['previous-block-hash', this.previousBlockHash], ['round', this.round], ['seed', this.seed], ['timestamp', this.timestamp], ['transactions-root', this.transactionsRoot], ['transactions-root-sha256', this.transactionsRootSha256], ['bonus', this.bonus], ['fees-collected', this.feesCollected], ['participation-updates', typeof this.participationUpdates !== 'undefined' ? this.participationUpdates.toEncodingData() : undefined], ['proposer', typeof this.proposer !== 'undefined' ? this.proposer.toString() : undefined], ['proposer-payout', this.proposerPayout], ['rewards', typeof this.rewards !== 'undefined' ? this.rewards.toEncodingData() : undefined], ['state-proof-tracking', typeof this.stateProofTracking !== 'undefined' ? this.stateProofTracking.map(v => v.toEncodingData()) : undefined], ['transactions', typeof this.transactions !== 'undefined' ? this.transactions.map(v => v.toEncodingData()) : undefined], ['txn-counter', this.txnCounter], ['upgrade-state', typeof this.upgradeState !== 'undefined' ? this.upgradeState.toEncodingData() : undefined], ['upgrade-vote', typeof this.upgradeVote !== 'undefined' ? this.upgradeVote.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Block: ${data}`);\n    }\n    return new Block({\n      genesisHash: data.get('genesis-hash'),\n      genesisId: data.get('genesis-id'),\n      previousBlockHash: data.get('previous-block-hash'),\n      round: data.get('round'),\n      seed: data.get('seed'),\n      timestamp: data.get('timestamp'),\n      transactionsRoot: data.get('transactions-root'),\n      transactionsRootSha256: data.get('transactions-root-sha256'),\n      bonus: data.get('bonus'),\n      feesCollected: data.get('fees-collected'),\n      participationUpdates: typeof data.get('participation-updates') !== 'undefined' ? ParticipationUpdates.fromEncodingData(data.get('participation-updates')) : undefined,\n      proposer: data.get('proposer'),\n      proposerPayout: data.get('proposer-payout'),\n      rewards: typeof data.get('rewards') !== 'undefined' ? BlockRewards.fromEncodingData(data.get('rewards')) : undefined,\n      stateProofTracking: typeof data.get('state-proof-tracking') !== 'undefined' ? data.get('state-proof-tracking').map(v => StateProofTracking.fromEncodingData(v)) : undefined,\n      transactions: typeof data.get('transactions') !== 'undefined' ? data.get('transactions').map(v => Transaction.fromEncodingData(v)) : undefined,\n      txnCounter: data.get('txn-counter'),\n      upgradeState: typeof data.get('upgrade-state') !== 'undefined' ? BlockUpgradeState.fromEncodingData(data.get('upgrade-state')) : undefined,\n      upgradeVote: typeof data.get('upgrade-vote') !== 'undefined' ? BlockUpgradeVote.fromEncodingData(data.get('upgrade-vote')) : undefined\n    });\n  }\n}\n/**\n *\n */\nexport class BlockHeadersResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'blocks',\n        valueSchema: new ArraySchema(Block.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BlockHeadersResponse` object.\n   * @param blocks -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    blocks,\n    currentRound,\n    nextToken\n  }) {\n    this.blocks = blocks;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BlockHeadersResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['blocks', this.blocks.map(v => v.toEncodingData())], ['current-round', this.currentRound], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockHeadersResponse: ${data}`);\n    }\n    return new BlockHeadersResponse({\n      blocks: (data.get('blocks') ?? []).map(v => Block.fromEncodingData(v)),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token')\n    });\n  }\n}\n/**\n * Fields relating to rewards,\n */\nexport class BlockRewards {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'fee-sink',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'rewards-calculation-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'rewards-level',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'rewards-pool',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'rewards-rate',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'rewards-residue',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BlockRewards` object.\n   * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\n   * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n   * MicroAlgos for every reward unit in the next round.\n   * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n   * of MicroAlgos since genesis.\n   * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\n   * redistributes them as rewards.\n   * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\n   * the next round.\n   * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n   */\n  constructor({\n    feeSink,\n    rewardsCalculationRound,\n    rewardsLevel,\n    rewardsPool,\n    rewardsRate,\n    rewardsResidue\n  }) {\n    this.feeSink = feeSink;\n    this.rewardsCalculationRound = ensureBigInt(rewardsCalculationRound);\n    this.rewardsLevel = ensureBigInt(rewardsLevel);\n    this.rewardsPool = rewardsPool;\n    this.rewardsRate = ensureBigInt(rewardsRate);\n    this.rewardsResidue = ensureBigInt(rewardsResidue);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BlockRewards.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['fee-sink', this.feeSink], ['rewards-calculation-round', this.rewardsCalculationRound], ['rewards-level', this.rewardsLevel], ['rewards-pool', this.rewardsPool], ['rewards-rate', this.rewardsRate], ['rewards-residue', this.rewardsResidue]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockRewards: ${data}`);\n    }\n    return new BlockRewards({\n      feeSink: data.get('fee-sink'),\n      rewardsCalculationRound: data.get('rewards-calculation-round'),\n      rewardsLevel: data.get('rewards-level'),\n      rewardsPool: data.get('rewards-pool'),\n      rewardsRate: data.get('rewards-rate'),\n      rewardsResidue: data.get('rewards-residue')\n    });\n  }\n}\n/**\n * Fields relating to a protocol upgrade.\n */\nexport class BlockUpgradeState {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'current-protocol',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'next-protocol',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'next-protocol-approvals',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'next-protocol-switch-on',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'next-protocol-vote-before',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BlockUpgradeState` object.\n   * @param currentProtocol - (proto) The current protocol version.\n   * @param nextProtocol - (nextproto) The next proposed protocol version.\n   * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\n   * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\n   * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n   * after this round).\n   */\n  constructor({\n    currentProtocol,\n    nextProtocol,\n    nextProtocolApprovals,\n    nextProtocolSwitchOn,\n    nextProtocolVoteBefore\n  }) {\n    this.currentProtocol = currentProtocol;\n    this.nextProtocol = nextProtocol;\n    this.nextProtocolApprovals = typeof nextProtocolApprovals === 'undefined' ? undefined : ensureSafeInteger(nextProtocolApprovals);\n    this.nextProtocolSwitchOn = typeof nextProtocolSwitchOn === 'undefined' ? undefined : ensureBigInt(nextProtocolSwitchOn);\n    this.nextProtocolVoteBefore = typeof nextProtocolVoteBefore === 'undefined' ? undefined : ensureBigInt(nextProtocolVoteBefore);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BlockUpgradeState.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['current-protocol', this.currentProtocol], ['next-protocol', this.nextProtocol], ['next-protocol-approvals', this.nextProtocolApprovals], ['next-protocol-switch-on', this.nextProtocolSwitchOn], ['next-protocol-vote-before', this.nextProtocolVoteBefore]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockUpgradeState: ${data}`);\n    }\n    return new BlockUpgradeState({\n      currentProtocol: data.get('current-protocol'),\n      nextProtocol: data.get('next-protocol'),\n      nextProtocolApprovals: data.get('next-protocol-approvals'),\n      nextProtocolSwitchOn: data.get('next-protocol-switch-on'),\n      nextProtocolVoteBefore: data.get('next-protocol-vote-before')\n    });\n  }\n}\n/**\n * Fields relating to voting for a protocol upgrade.\n */\nexport class BlockUpgradeVote {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'upgrade-approve',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-delay',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'upgrade-propose',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BlockUpgradeVote` object.\n   * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\n   * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\n   * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\n   */\n  constructor({\n    upgradeApprove,\n    upgradeDelay,\n    upgradePropose\n  }) {\n    this.upgradeApprove = upgradeApprove;\n    this.upgradeDelay = typeof upgradeDelay === 'undefined' ? undefined : ensureBigInt(upgradeDelay);\n    this.upgradePropose = upgradePropose;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BlockUpgradeVote.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['upgrade-approve', this.upgradeApprove], ['upgrade-delay', this.upgradeDelay], ['upgrade-propose', this.upgradePropose]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockUpgradeVote: ${data}`);\n    }\n    return new BlockUpgradeVote({\n      upgradeApprove: data.get('upgrade-approve'),\n      upgradeDelay: data.get('upgrade-delay'),\n      upgradePropose: data.get('upgrade-propose')\n    });\n  }\n}\n/**\n * Box name and its content.\n */\nexport class Box {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'name',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'value',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param round - The round for which this information is relevant\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor({\n    name,\n    round,\n    value\n  }) {\n    this.name = typeof name === 'string' ? base64ToBytes(name) : name;\n    this.round = ensureBigInt(round);\n    this.value = typeof value === 'string' ? base64ToBytes(value) : value;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Box.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['name', this.name], ['round', this.round], ['value', this.value]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Box: ${data}`);\n    }\n    return new Box({\n      name: data.get('name'),\n      round: data.get('round'),\n      value: data.get('value')\n    });\n  }\n}\n/**\n * Box descriptor describes an app box without a value.\n */\nexport class BoxDescriptor {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'name',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor({\n    name\n  }) {\n    this.name = typeof name === 'string' ? base64ToBytes(name) : name;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BoxDescriptor.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['name', this.name]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BoxDescriptor: ${data}`);\n    }\n    return new BoxDescriptor({\n      name: data.get('name')\n    });\n  }\n}\n/**\n * Box names of an application\n */\nexport class BoxesResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'application-id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'boxes',\n        valueSchema: new ArraySchema(BoxDescriptor.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param boxes -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applicationId,\n    boxes,\n    nextToken\n  }) {\n    this.applicationId = ensureBigInt(applicationId);\n    this.boxes = boxes;\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return BoxesResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['application-id', this.applicationId], ['boxes', this.boxes.map(v => v.toEncodingData())], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BoxesResponse: ${data}`);\n    }\n    return new BoxesResponse({\n      applicationId: data.get('application-id'),\n      boxes: (data.get('boxes') ?? []).map(v => BoxDescriptor.fromEncodingData(v)),\n      nextToken: data.get('next-token')\n    });\n  }\n}\n/**\n * Response for errors\n */\nexport class ErrorResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'message',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'data',\n        valueSchema: new OptionalSchema(UntypedValue.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor({\n    message,\n    data\n  }) {\n    this.message = message;\n    this.data = data;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ErrorResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['message', this.message], ['data', typeof this.data !== 'undefined' ? this.data.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ErrorResponse: ${data}`);\n    }\n    return new ErrorResponse({\n      message: data.get('message'),\n      data: typeof data.get('data') !== 'undefined' ? UntypedValue.fromEncodingData(data.get('data')) : undefined\n    });\n  }\n}\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'action',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'bytes',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'uint',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    action,\n    bytes,\n    uint\n  }) {\n    this.action = ensureSafeInteger(action);\n    this.bytes = bytes;\n    this.uint = typeof uint === 'undefined' ? undefined : ensureBigInt(uint);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return EvalDelta.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['action', this.action], ['bytes', this.bytes], ['uint', this.uint]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded EvalDelta: ${data}`);\n    }\n    return new EvalDelta({\n      action: data.get('action'),\n      bytes: data.get('bytes'),\n      uint: data.get('uint')\n    });\n  }\n}\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'key',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'value',\n        valueSchema: EvalDelta.encodingSchema,\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor({\n    key,\n    value\n  }) {\n    this.key = key;\n    this.value = value;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return EvalDeltaKeyValue.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['key', this.key], ['value', this.value.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded EvalDeltaKeyValue: ${data}`);\n    }\n    return new EvalDeltaKeyValue({\n      key: data.get('key'),\n      value: EvalDelta.fromEncodingData(data.get('value') ?? new Map())\n    });\n  }\n}\nexport class HashFactory {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'hash-type',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `HashFactory` object.\n   * @param hashType - (t)\n   */\n  constructor({\n    hashType\n  }) {\n    this.hashType = typeof hashType === 'undefined' ? undefined : ensureSafeInteger(hashType);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return HashFactory.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['hash-type', this.hashType]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded HashFactory: ${data}`);\n    }\n    return new HashFactory({\n      hashType: data.get('hash-type')\n    });\n  }\n}\n/**\n * (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\n * it is online.\n */\nexport class HbProofFields {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'hb-pk',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'hb-pk1sig',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'hb-pk2',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'hb-pk2sig',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'hb-sig',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `HbProofFields` object.\n   * @param hbPk - (p) Public key of the heartbeat message.\n   * @param hbPk1sig - (p1s) Signature of OneTimeSignatureSubkeyOffsetID(PK, Batch, Offset) under the\n   * key PK2.\n   * @param hbPk2 - (p2) Key for new-style two-level ephemeral signature.\n   * @param hbPk2sig - (p2s) Signature of OneTimeSignatureSubkeyBatchID(PK2, Batch) under the master\n   * key (OneTimeSignatureVerifier).\n   * @param hbSig - (s) Signature of the heartbeat message.\n   */\n  constructor({\n    hbPk,\n    hbPk1sig,\n    hbPk2,\n    hbPk2sig,\n    hbSig\n  }) {\n    this.hbPk = typeof hbPk === 'string' ? base64ToBytes(hbPk) : hbPk;\n    this.hbPk1sig = typeof hbPk1sig === 'string' ? base64ToBytes(hbPk1sig) : hbPk1sig;\n    this.hbPk2 = typeof hbPk2 === 'string' ? base64ToBytes(hbPk2) : hbPk2;\n    this.hbPk2sig = typeof hbPk2sig === 'string' ? base64ToBytes(hbPk2sig) : hbPk2sig;\n    this.hbSig = typeof hbSig === 'string' ? base64ToBytes(hbSig) : hbSig;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return HbProofFields.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['hb-pk', this.hbPk], ['hb-pk1sig', this.hbPk1sig], ['hb-pk2', this.hbPk2], ['hb-pk2sig', this.hbPk2sig], ['hb-sig', this.hbSig]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded HbProofFields: ${data}`);\n    }\n    return new HbProofFields({\n      hbPk: data.get('hb-pk'),\n      hbPk1sig: data.get('hb-pk1sig'),\n      hbPk2: data.get('hb-pk2'),\n      hbPk2sig: data.get('hb-pk2sig'),\n      hbSig: data.get('hb-sig')\n    });\n  }\n}\n/**\n * A health check response.\n */\nexport class HealthCheck {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'db-available',\n        valueSchema: new BooleanSchema(),\n        omitEmpty: true\n      }, {\n        key: 'is-migrating',\n        valueSchema: new BooleanSchema(),\n        omitEmpty: true\n      }, {\n        key: 'message',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'version',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'data',\n        valueSchema: new OptionalSchema(UntypedValue.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'errors',\n        valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `HealthCheck` object.\n   * @param dbAvailable -\n   * @param isMigrating -\n   * @param message -\n   * @param round -\n   * @param version - Current version.\n   * @param data -\n   * @param errors -\n   */\n  constructor({\n    dbAvailable,\n    isMigrating,\n    message,\n    round,\n    version,\n    data,\n    errors\n  }) {\n    this.dbAvailable = dbAvailable;\n    this.isMigrating = isMigrating;\n    this.message = message;\n    this.round = ensureBigInt(round);\n    this.version = version;\n    this.data = data;\n    this.errors = errors;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return HealthCheck.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['db-available', this.dbAvailable], ['is-migrating', this.isMigrating], ['message', this.message], ['round', this.round], ['version', this.version], ['data', typeof this.data !== 'undefined' ? this.data.toEncodingData() : undefined], ['errors', this.errors]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded HealthCheck: ${data}`);\n    }\n    return new HealthCheck({\n      dbAvailable: data.get('db-available'),\n      isMigrating: data.get('is-migrating'),\n      message: data.get('message'),\n      round: data.get('round'),\n      version: data.get('version'),\n      data: typeof data.get('data') !== 'undefined' ? UntypedValue.fromEncodingData(data.get('data')) : undefined,\n      errors: data.get('errors')\n    });\n  }\n}\nexport class IndexerStateProofMessage {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'block-headers-commitment',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'first-attested-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'latest-attested-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'ln-proven-weight',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'voters-commitment',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `IndexerStateProofMessage` object.\n   * @param blockHeadersCommitment - (b)\n   * @param firstAttestedRound - (f)\n   * @param latestAttestedRound - (l)\n   * @param lnProvenWeight - (P)\n   * @param votersCommitment - (v)\n   */\n  constructor({\n    blockHeadersCommitment,\n    firstAttestedRound,\n    latestAttestedRound,\n    lnProvenWeight,\n    votersCommitment\n  }) {\n    this.blockHeadersCommitment = typeof blockHeadersCommitment === 'string' ? base64ToBytes(blockHeadersCommitment) : blockHeadersCommitment;\n    this.firstAttestedRound = typeof firstAttestedRound === 'undefined' ? undefined : ensureBigInt(firstAttestedRound);\n    this.latestAttestedRound = typeof latestAttestedRound === 'undefined' ? undefined : ensureBigInt(latestAttestedRound);\n    this.lnProvenWeight = typeof lnProvenWeight === 'undefined' ? undefined : ensureBigInt(lnProvenWeight);\n    this.votersCommitment = typeof votersCommitment === 'string' ? base64ToBytes(votersCommitment) : votersCommitment;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return IndexerStateProofMessage.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['block-headers-commitment', this.blockHeadersCommitment], ['first-attested-round', this.firstAttestedRound], ['latest-attested-round', this.latestAttestedRound], ['ln-proven-weight', this.lnProvenWeight], ['voters-commitment', this.votersCommitment]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded IndexerStateProofMessage: ${data}`);\n    }\n    return new IndexerStateProofMessage({\n      blockHeadersCommitment: data.get('block-headers-commitment'),\n      firstAttestedRound: data.get('first-attested-round'),\n      latestAttestedRound: data.get('latest-attested-round'),\n      lnProvenWeight: data.get('ln-proven-weight'),\n      votersCommitment: data.get('voters-commitment')\n    });\n  }\n}\nexport class MerkleArrayProof {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'hash-factory',\n        valueSchema: new OptionalSchema(HashFactory.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'path',\n        valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),\n        omitEmpty: true\n      }, {\n        key: 'tree-depth',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `MerkleArrayProof` object.\n   * @param hashFactory -\n   * @param path - (pth)\n   * @param treeDepth - (td)\n   */\n  constructor({\n    hashFactory,\n    path,\n    treeDepth\n  }) {\n    this.hashFactory = hashFactory;\n    this.path = path;\n    this.treeDepth = typeof treeDepth === 'undefined' ? undefined : ensureSafeInteger(treeDepth);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return MerkleArrayProof.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['hash-factory', typeof this.hashFactory !== 'undefined' ? this.hashFactory.toEncodingData() : undefined], ['path', this.path], ['tree-depth', this.treeDepth]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded MerkleArrayProof: ${data}`);\n    }\n    return new MerkleArrayProof({\n      hashFactory: typeof data.get('hash-factory') !== 'undefined' ? HashFactory.fromEncodingData(data.get('hash-factory')) : undefined,\n      path: data.get('path'),\n      treeDepth: data.get('tree-depth')\n    });\n  }\n}\n/**\n * A simplified version of AssetHolding\n */\nexport class MiniAssetHolding {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'address',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'amount',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'is-frozen',\n        valueSchema: new BooleanSchema(),\n        omitEmpty: true\n      }, {\n        key: 'deleted',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'opted-in-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'opted-out-at-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `MiniAssetHolding` object.\n   * @param address -\n   * @param amount -\n   * @param isFrozen -\n   * @param deleted - Whether or not this asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into the asset.\n   * @param optedOutAtRound - Round during which the account opted out of the asset.\n   */\n  constructor({\n    address,\n    amount,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound\n  }) {\n    this.address = address;\n    this.amount = ensureBigInt(amount);\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound = typeof optedInAtRound === 'undefined' ? undefined : ensureBigInt(optedInAtRound);\n    this.optedOutAtRound = typeof optedOutAtRound === 'undefined' ? undefined : ensureBigInt(optedOutAtRound);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return MiniAssetHolding.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['address', this.address], ['amount', this.amount], ['is-frozen', this.isFrozen], ['deleted', this.deleted], ['opted-in-at-round', this.optedInAtRound], ['opted-out-at-round', this.optedOutAtRound]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded MiniAssetHolding: ${data}`);\n    }\n    return new MiniAssetHolding({\n      address: data.get('address'),\n      amount: data.get('amount'),\n      isFrozen: data.get('is-frozen'),\n      deleted: data.get('deleted'),\n      optedInAtRound: data.get('opted-in-at-round'),\n      optedOutAtRound: data.get('opted-out-at-round')\n    });\n  }\n}\n/**\n * Participation account data that needs to be checked/acted on by the network.\n */\nexport class ParticipationUpdates {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'absent-participation-accounts',\n        valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n        omitEmpty: true\n      }, {\n        key: 'expired-participation-accounts',\n        valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `ParticipationUpdates` object.\n   * @param absentParticipationAccounts - (partupabs) a list of online accounts that need to be suspended.\n   * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\n   * since their participation key expired.\n   */\n  constructor({\n    absentParticipationAccounts,\n    expiredParticipationAccounts\n  }) {\n    this.absentParticipationAccounts = absentParticipationAccounts;\n    this.expiredParticipationAccounts = expiredParticipationAccounts;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return ParticipationUpdates.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['absent-participation-accounts', this.absentParticipationAccounts], ['expired-participation-accounts', this.expiredParticipationAccounts]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ParticipationUpdates: ${data}`);\n    }\n    return new ParticipationUpdates({\n      absentParticipationAccounts: data.get('absent-participation-accounts'),\n      expiredParticipationAccounts: data.get('expired-participation-accounts')\n    });\n  }\n}\n/**\n * (sp) represents a state proof.\n * Definition:\n * crypto/stateproof/structs.go : StateProof\n */\nexport class StateProofFields {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'part-proofs',\n        valueSchema: new OptionalSchema(MerkleArrayProof.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'positions-to-reveal',\n        valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n        omitEmpty: true\n      }, {\n        key: 'reveals',\n        valueSchema: new OptionalSchema(new ArraySchema(StateProofReveal.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'salt-version',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'sig-commit',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'sig-proofs',\n        valueSchema: new OptionalSchema(MerkleArrayProof.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'signed-weight',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `StateProofFields` object.\n   * @param partProofs - (P)\n   * @param positionsToReveal - (pr) Sequence of reveal positions.\n   * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n   * msgp\n   * @param saltVersion - (v) Salt version of the merkle signature.\n   * @param sigCommit - (c)\n   * @param sigProofs - (S)\n   * @param signedWeight - (w)\n   */\n  constructor({\n    partProofs,\n    positionsToReveal,\n    reveals,\n    saltVersion,\n    sigCommit,\n    sigProofs,\n    signedWeight\n  }) {\n    this.partProofs = partProofs;\n    this.positionsToReveal = typeof positionsToReveal === 'undefined' ? undefined : positionsToReveal.map(ensureBigInt);\n    this.reveals = reveals;\n    this.saltVersion = typeof saltVersion === 'undefined' ? undefined : ensureSafeInteger(saltVersion);\n    this.sigCommit = typeof sigCommit === 'string' ? base64ToBytes(sigCommit) : sigCommit;\n    this.sigProofs = sigProofs;\n    this.signedWeight = typeof signedWeight === 'undefined' ? undefined : ensureBigInt(signedWeight);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateProofFields.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['part-proofs', typeof this.partProofs !== 'undefined' ? this.partProofs.toEncodingData() : undefined], ['positions-to-reveal', this.positionsToReveal], ['reveals', typeof this.reveals !== 'undefined' ? this.reveals.map(v => v.toEncodingData()) : undefined], ['salt-version', this.saltVersion], ['sig-commit', this.sigCommit], ['sig-proofs', typeof this.sigProofs !== 'undefined' ? this.sigProofs.toEncodingData() : undefined], ['signed-weight', this.signedWeight]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofFields: ${data}`);\n    }\n    return new StateProofFields({\n      partProofs: typeof data.get('part-proofs') !== 'undefined' ? MerkleArrayProof.fromEncodingData(data.get('part-proofs')) : undefined,\n      positionsToReveal: data.get('positions-to-reveal'),\n      reveals: typeof data.get('reveals') !== 'undefined' ? data.get('reveals').map(v => StateProofReveal.fromEncodingData(v)) : undefined,\n      saltVersion: data.get('salt-version'),\n      sigCommit: data.get('sig-commit'),\n      sigProofs: typeof data.get('sig-proofs') !== 'undefined' ? MerkleArrayProof.fromEncodingData(data.get('sig-proofs')) : undefined,\n      signedWeight: data.get('signed-weight')\n    });\n  }\n}\nexport class StateProofParticipant {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'verifier',\n        valueSchema: new OptionalSchema(StateProofVerifier.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'weight',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `StateProofParticipant` object.\n   * @param verifier - (p)\n   * @param weight - (w)\n   */\n  constructor({\n    verifier,\n    weight\n  }) {\n    this.verifier = verifier;\n    this.weight = typeof weight === 'undefined' ? undefined : ensureBigInt(weight);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateProofParticipant.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['verifier', typeof this.verifier !== 'undefined' ? this.verifier.toEncodingData() : undefined], ['weight', this.weight]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofParticipant: ${data}`);\n    }\n    return new StateProofParticipant({\n      verifier: typeof data.get('verifier') !== 'undefined' ? StateProofVerifier.fromEncodingData(data.get('verifier')) : undefined,\n      weight: data.get('weight')\n    });\n  }\n}\nexport class StateProofReveal {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'participant',\n        valueSchema: new OptionalSchema(StateProofParticipant.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'position',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'sig-slot',\n        valueSchema: new OptionalSchema(StateProofSigSlot.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `StateProofReveal` object.\n   * @param participant - (p)\n   * @param position - The position in the signature and participants arrays corresponding to this\n   * entry.\n   * @param sigSlot - (s)\n   */\n  constructor({\n    participant,\n    position,\n    sigSlot\n  }) {\n    this.participant = participant;\n    this.position = typeof position === 'undefined' ? undefined : ensureBigInt(position);\n    this.sigSlot = sigSlot;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateProofReveal.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['participant', typeof this.participant !== 'undefined' ? this.participant.toEncodingData() : undefined], ['position', this.position], ['sig-slot', typeof this.sigSlot !== 'undefined' ? this.sigSlot.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofReveal: ${data}`);\n    }\n    return new StateProofReveal({\n      participant: typeof data.get('participant') !== 'undefined' ? StateProofParticipant.fromEncodingData(data.get('participant')) : undefined,\n      position: data.get('position'),\n      sigSlot: typeof data.get('sig-slot') !== 'undefined' ? StateProofSigSlot.fromEncodingData(data.get('sig-slot')) : undefined\n    });\n  }\n}\nexport class StateProofSigSlot {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'lower-sig-weight',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'signature',\n        valueSchema: new OptionalSchema(StateProofSignature.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `StateProofSigSlot` object.\n   * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\n   * @param signature -\n   */\n  constructor({\n    lowerSigWeight,\n    signature\n  }) {\n    this.lowerSigWeight = typeof lowerSigWeight === 'undefined' ? undefined : ensureBigInt(lowerSigWeight);\n    this.signature = signature;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateProofSigSlot.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['lower-sig-weight', this.lowerSigWeight], ['signature', typeof this.signature !== 'undefined' ? this.signature.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofSigSlot: ${data}`);\n    }\n    return new StateProofSigSlot({\n      lowerSigWeight: data.get('lower-sig-weight'),\n      signature: typeof data.get('signature') !== 'undefined' ? StateProofSignature.fromEncodingData(data.get('signature')) : undefined\n    });\n  }\n}\nexport class StateProofSignature {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'falcon-signature',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'merkle-array-index',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'proof',\n        valueSchema: new OptionalSchema(MerkleArrayProof.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'verifying-key',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `StateProofSignature` object.\n   * @param falconSignature -\n   * @param merkleArrayIndex -\n   * @param proof -\n   * @param verifyingKey - (vkey)\n   */\n  constructor({\n    falconSignature,\n    merkleArrayIndex,\n    proof,\n    verifyingKey\n  }) {\n    this.falconSignature = typeof falconSignature === 'string' ? base64ToBytes(falconSignature) : falconSignature;\n    this.merkleArrayIndex = typeof merkleArrayIndex === 'undefined' ? undefined : ensureSafeInteger(merkleArrayIndex);\n    this.proof = proof;\n    this.verifyingKey = typeof verifyingKey === 'string' ? base64ToBytes(verifyingKey) : verifyingKey;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateProofSignature.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['falcon-signature', this.falconSignature], ['merkle-array-index', this.merkleArrayIndex], ['proof', typeof this.proof !== 'undefined' ? this.proof.toEncodingData() : undefined], ['verifying-key', this.verifyingKey]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofSignature: ${data}`);\n    }\n    return new StateProofSignature({\n      falconSignature: data.get('falcon-signature'),\n      merkleArrayIndex: data.get('merkle-array-index'),\n      proof: typeof data.get('proof') !== 'undefined' ? MerkleArrayProof.fromEncodingData(data.get('proof')) : undefined,\n      verifyingKey: data.get('verifying-key')\n    });\n  }\n}\nexport class StateProofTracking {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'next-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'online-total-weight',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'type',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'voters-commitment',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `StateProofTracking` object.\n   * @param nextRound - (n) Next round for which we will accept a state proof transaction.\n   * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\n   * StateProof round.\n   * @param type - State Proof Type. Note the raw object uses map with this as key.\n   * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\n   * the proof.\n   */\n  constructor({\n    nextRound,\n    onlineTotalWeight,\n    type,\n    votersCommitment\n  }) {\n    this.nextRound = typeof nextRound === 'undefined' ? undefined : ensureBigInt(nextRound);\n    this.onlineTotalWeight = typeof onlineTotalWeight === 'undefined' ? undefined : ensureBigInt(onlineTotalWeight);\n    this.type = typeof type === 'undefined' ? undefined : ensureSafeInteger(type);\n    this.votersCommitment = typeof votersCommitment === 'string' ? base64ToBytes(votersCommitment) : votersCommitment;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateProofTracking.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['next-round', this.nextRound], ['online-total-weight', this.onlineTotalWeight], ['type', this.type], ['voters-commitment', this.votersCommitment]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofTracking: ${data}`);\n    }\n    return new StateProofTracking({\n      nextRound: data.get('next-round'),\n      onlineTotalWeight: data.get('online-total-weight'),\n      type: data.get('type'),\n      votersCommitment: data.get('voters-commitment')\n    });\n  }\n}\nexport class StateProofVerifier {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'commitment',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'key-lifetime',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `StateProofVerifier` object.\n   * @param commitment - (cmt) Represents the root of the vector commitment tree.\n   * @param keyLifetime - (lf) Key lifetime.\n   */\n  constructor({\n    commitment,\n    keyLifetime\n  }) {\n    this.commitment = typeof commitment === 'string' ? base64ToBytes(commitment) : commitment;\n    this.keyLifetime = typeof keyLifetime === 'undefined' ? undefined : ensureBigInt(keyLifetime);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateProofVerifier.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['commitment', this.commitment], ['key-lifetime', this.keyLifetime]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofVerifier: ${data}`);\n    }\n    return new StateProofVerifier({\n      commitment: data.get('commitment'),\n      keyLifetime: data.get('key-lifetime')\n    });\n  }\n}\n/**\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n * determine how much storage may be used in a local-state or global-state for an\n * application. The more space used, the larger minimum balance must be maintained\n * in the account holding the data.\n */\nexport class StateSchema {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'num-byte-slice',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'num-uint',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `StateSchema` object.\n   * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\n   * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\n   */\n  constructor({\n    numByteSlice,\n    numUint\n  }) {\n    this.numByteSlice = ensureSafeInteger(numByteSlice);\n    this.numUint = ensureSafeInteger(numUint);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return StateSchema.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['num-byte-slice', this.numByteSlice], ['num-uint', this.numUint]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateSchema: ${data}`);\n    }\n    return new StateSchema({\n      numByteSlice: data.get('num-byte-slice'),\n      numUint: data.get('num-uint')\n    });\n  }\n}\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'key',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'value',\n        valueSchema: TealValue.encodingSchema,\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor({\n    key,\n    value\n  }) {\n    this.key = typeof key === 'string' ? base64ToBytes(key) : key;\n    this.value = value;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TealKeyValue.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['key', this.key], ['value', this.value.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TealKeyValue: ${data}`);\n    }\n    return new TealKeyValue({\n      key: data.get('key'),\n      value: TealValue.fromEncodingData(data.get('value') ?? new Map())\n    });\n  }\n}\n/**\n * Represents a TEAL value.\n */\nexport class TealValue {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'bytes',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'type',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'uint',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TealValue` object.\n   * @param bytes - bytes value.\n   * @param type - type of the value. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param uint - uint value.\n   */\n  constructor({\n    bytes,\n    type,\n    uint\n  }) {\n    this.bytes = typeof bytes === 'string' ? base64ToBytes(bytes) : bytes;\n    this.type = ensureSafeInteger(type);\n    this.uint = ensureBigInt(uint);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TealValue.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['bytes', this.bytes], ['type', this.type], ['uint', this.uint]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TealValue: ${data}`);\n    }\n    return new TealValue({\n      bytes: data.get('bytes'),\n      type: data.get('type'),\n      uint: data.get('uint')\n    });\n  }\n}\n/**\n * Contains all fields common to all transactions and serves as an envelope to all\n * transactions type. Represents both regular and inner transactions.\n * Definition:\n * data/transactions/signedtxn.go : SignedTxn\n * data/transactions/transaction.go : Transaction\n */\nexport class Transaction {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'fee',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'first-valid',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'last-valid',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'sender',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'application-transaction',\n        valueSchema: new OptionalSchema(TransactionApplication.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'asset-config-transaction',\n        valueSchema: new OptionalSchema(TransactionAssetConfig.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'asset-freeze-transaction',\n        valueSchema: new OptionalSchema(TransactionAssetFreeze.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'asset-transfer-transaction',\n        valueSchema: new OptionalSchema(TransactionAssetTransfer.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'auth-addr',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'close-rewards',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'closing-amount',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'confirmed-round',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'created-application-index',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'created-asset-index',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'genesis-hash',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'genesis-id',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'global-state-delta',\n        valueSchema: new OptionalSchema(new ArraySchema(EvalDeltaKeyValue.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'group',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'heartbeat-transaction',\n        valueSchema: new OptionalSchema(TransactionHeartbeat.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'id',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'inner-txns',\n        valueSchema: new OptionalSchema(new ArraySchema(Transaction.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'intra-round-offset',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'keyreg-transaction',\n        valueSchema: new OptionalSchema(TransactionKeyreg.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'lease',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'local-state-delta',\n        valueSchema: new OptionalSchema(new ArraySchema(AccountStateDelta.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'logs',\n        valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),\n        omitEmpty: true\n      }, {\n        key: 'note',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'payment-transaction',\n        valueSchema: new OptionalSchema(TransactionPayment.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'receiver-rewards',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'rekey-to',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'round-time',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'sender-rewards',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'signature',\n        valueSchema: new OptionalSchema(TransactionSignature.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'state-proof-transaction',\n        valueSchema: new OptionalSchema(TransactionStateProof.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'tx-type',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `Transaction` object.\n   * @param fee - (fee) Transaction fee.\n   * @param firstValid - (fv) First valid round for this transaction.\n   * @param lastValid - (lv) Last valid round for this transaction.\n   * @param sender - (snd) Sender's address.\n   * @param applicationTransaction - Fields for application transactions.\n   * Definition:\n   * data/transactions/application.go : ApplicationCallTxnFields\n   * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\n   * A zero value for asset-id indicates asset creation.\n   * A zero value for the params indicates asset destruction.\n   * Definition:\n   * data/transactions/asset.go : AssetConfigTxnFields\n   * @param assetFreezeTransaction - Fields for an asset freeze transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetFreezeTxnFields\n   * @param assetTransferTransaction - Fields for an asset transfer transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetTransferTxnFields\n   * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\n   * to the accounts auth addr.\n   * @param closeRewards - (rc) rewards applied to close-remainder-to account.\n   * @param closingAmount - (ca) closing amount for transaction.\n   * @param confirmedRound - Round when the transaction was confirmed.\n   * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\n   * transaction.\n   * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\n   * @param genesisHash - (gh) Hash of genesis block.\n   * @param genesisId - (gen) genesis block ID.\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n   * that this transaction is part of a transaction group and the value is the\n   * sha512/256 hash of the transactions in that group.\n   * @param heartbeatTransaction - Fields for a heartbeat transaction.\n   * Definition:\n   * data/transactions/heartbeat.go : HeartbeatTxnFields\n   * @param id - Transaction ID\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\n   * @param keyregTransaction - Fields for a keyreg transaction.\n   * Definition:\n   * data/transactions/keyreg.go : KeyregTxnFields\n   * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n   * until the LastValid round passes. While this transaction possesses the lease, no\n   * other transaction specifying this lease can be confirmed.\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - (lg) Logs for the application being executed by this transaction.\n   * @param note - (note) Free form data.\n   * @param paymentTransaction - Fields for a payment transaction.\n   * Definition:\n   * data/transactions/payment.go : PaymentTxnFields\n   * @param receiverRewards - (rr) rewards applied to receiver account.\n   * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\n   * updated with this value and future signatures must be signed with the key\n   * represented by this address.\n   * @param roundTime - Time when the block this transaction is in was confirmed.\n   * @param senderRewards - (rs) rewards applied to sender account.\n   * @param signature - Validation signature associated with some data. Only one of the signatures\n   * should be provided.\n   * @param stateProofTransaction - Fields for a state proof transaction.\n   * Definition:\n   * data/transactions/stateproof.go : StateProofTxnFields\n   * @param txType - (type) Indicates what type of transaction this is. Different types have\n   * different fields.\n   * Valid types, and where their fields are stored:\n   * * (pay) payment-transaction\n   * * (keyreg) keyreg-transaction\n   * * (acfg) asset-config-transaction\n   * * (axfer) asset-transfer-transaction\n   * * (afrz) asset-freeze-transaction\n   * * (appl) application-transaction\n   * * (stpf) state-proof-transaction\n   * * (hb) heartbeat-transaction\n   */\n  constructor({\n    fee,\n    firstValid,\n    lastValid,\n    sender,\n    applicationTransaction,\n    assetConfigTransaction,\n    assetFreezeTransaction,\n    assetTransferTransaction,\n    authAddr,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    createdApplicationIndex,\n    createdAssetIndex,\n    genesisHash,\n    genesisId,\n    globalStateDelta,\n    group,\n    heartbeatTransaction,\n    id,\n    innerTxns,\n    intraRoundOffset,\n    keyregTransaction,\n    lease,\n    localStateDelta,\n    logs,\n    note,\n    paymentTransaction,\n    receiverRewards,\n    rekeyTo,\n    roundTime,\n    senderRewards,\n    signature,\n    stateProofTransaction,\n    txType\n  }) {\n    this.fee = ensureBigInt(fee);\n    this.firstValid = ensureBigInt(firstValid);\n    this.lastValid = ensureBigInt(lastValid);\n    this.sender = sender;\n    this.applicationTransaction = applicationTransaction;\n    this.assetConfigTransaction = assetConfigTransaction;\n    this.assetFreezeTransaction = assetFreezeTransaction;\n    this.assetTransferTransaction = assetTransferTransaction;\n    this.authAddr = typeof authAddr === 'string' ? Address.fromString(authAddr) : authAddr;\n    this.closeRewards = typeof closeRewards === 'undefined' ? undefined : ensureBigInt(closeRewards);\n    this.closingAmount = typeof closingAmount === 'undefined' ? undefined : ensureBigInt(closingAmount);\n    this.confirmedRound = typeof confirmedRound === 'undefined' ? undefined : ensureBigInt(confirmedRound);\n    this.createdApplicationIndex = typeof createdApplicationIndex === 'undefined' ? undefined : ensureBigInt(createdApplicationIndex);\n    this.createdAssetIndex = typeof createdAssetIndex === 'undefined' ? undefined : ensureBigInt(createdAssetIndex);\n    this.genesisHash = typeof genesisHash === 'string' ? base64ToBytes(genesisHash) : genesisHash;\n    this.genesisId = genesisId;\n    this.globalStateDelta = globalStateDelta;\n    this.group = typeof group === 'string' ? base64ToBytes(group) : group;\n    this.heartbeatTransaction = heartbeatTransaction;\n    this.id = id;\n    this.innerTxns = innerTxns;\n    this.intraRoundOffset = typeof intraRoundOffset === 'undefined' ? undefined : ensureSafeInteger(intraRoundOffset);\n    this.keyregTransaction = keyregTransaction;\n    this.lease = typeof lease === 'string' ? base64ToBytes(lease) : lease;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.note = typeof note === 'string' ? base64ToBytes(note) : note;\n    this.paymentTransaction = paymentTransaction;\n    this.receiverRewards = typeof receiverRewards === 'undefined' ? undefined : ensureBigInt(receiverRewards);\n    this.rekeyTo = typeof rekeyTo === 'string' ? Address.fromString(rekeyTo) : rekeyTo;\n    this.roundTime = typeof roundTime === 'undefined' ? undefined : ensureSafeInteger(roundTime);\n    this.senderRewards = typeof senderRewards === 'undefined' ? undefined : ensureBigInt(senderRewards);\n    this.signature = signature;\n    this.stateProofTransaction = stateProofTransaction;\n    this.txType = txType;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return Transaction.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['fee', this.fee], ['first-valid', this.firstValid], ['last-valid', this.lastValid], ['sender', this.sender], ['application-transaction', typeof this.applicationTransaction !== 'undefined' ? this.applicationTransaction.toEncodingData() : undefined], ['asset-config-transaction', typeof this.assetConfigTransaction !== 'undefined' ? this.assetConfigTransaction.toEncodingData() : undefined], ['asset-freeze-transaction', typeof this.assetFreezeTransaction !== 'undefined' ? this.assetFreezeTransaction.toEncodingData() : undefined], ['asset-transfer-transaction', typeof this.assetTransferTransaction !== 'undefined' ? this.assetTransferTransaction.toEncodingData() : undefined], ['auth-addr', typeof this.authAddr !== 'undefined' ? this.authAddr.toString() : undefined], ['close-rewards', this.closeRewards], ['closing-amount', this.closingAmount], ['confirmed-round', this.confirmedRound], ['created-application-index', this.createdApplicationIndex], ['created-asset-index', this.createdAssetIndex], ['genesis-hash', this.genesisHash], ['genesis-id', this.genesisId], ['global-state-delta', typeof this.globalStateDelta !== 'undefined' ? this.globalStateDelta.map(v => v.toEncodingData()) : undefined], ['group', this.group], ['heartbeat-transaction', typeof this.heartbeatTransaction !== 'undefined' ? this.heartbeatTransaction.toEncodingData() : undefined], ['id', this.id], ['inner-txns', typeof this.innerTxns !== 'undefined' ? this.innerTxns.map(v => v.toEncodingData()) : undefined], ['intra-round-offset', this.intraRoundOffset], ['keyreg-transaction', typeof this.keyregTransaction !== 'undefined' ? this.keyregTransaction.toEncodingData() : undefined], ['lease', this.lease], ['local-state-delta', typeof this.localStateDelta !== 'undefined' ? this.localStateDelta.map(v => v.toEncodingData()) : undefined], ['logs', this.logs], ['note', this.note], ['payment-transaction', typeof this.paymentTransaction !== 'undefined' ? this.paymentTransaction.toEncodingData() : undefined], ['receiver-rewards', this.receiverRewards], ['rekey-to', typeof this.rekeyTo !== 'undefined' ? this.rekeyTo.toString() : undefined], ['round-time', this.roundTime], ['sender-rewards', this.senderRewards], ['signature', typeof this.signature !== 'undefined' ? this.signature.toEncodingData() : undefined], ['state-proof-transaction', typeof this.stateProofTransaction !== 'undefined' ? this.stateProofTransaction.toEncodingData() : undefined], ['tx-type', this.txType]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Transaction: ${data}`);\n    }\n    return new Transaction({\n      fee: data.get('fee'),\n      firstValid: data.get('first-valid'),\n      lastValid: data.get('last-valid'),\n      sender: data.get('sender'),\n      applicationTransaction: typeof data.get('application-transaction') !== 'undefined' ? TransactionApplication.fromEncodingData(data.get('application-transaction')) : undefined,\n      assetConfigTransaction: typeof data.get('asset-config-transaction') !== 'undefined' ? TransactionAssetConfig.fromEncodingData(data.get('asset-config-transaction')) : undefined,\n      assetFreezeTransaction: typeof data.get('asset-freeze-transaction') !== 'undefined' ? TransactionAssetFreeze.fromEncodingData(data.get('asset-freeze-transaction')) : undefined,\n      assetTransferTransaction: typeof data.get('asset-transfer-transaction') !== 'undefined' ? TransactionAssetTransfer.fromEncodingData(data.get('asset-transfer-transaction')) : undefined,\n      authAddr: data.get('auth-addr'),\n      closeRewards: data.get('close-rewards'),\n      closingAmount: data.get('closing-amount'),\n      confirmedRound: data.get('confirmed-round'),\n      createdApplicationIndex: data.get('created-application-index'),\n      createdAssetIndex: data.get('created-asset-index'),\n      genesisHash: data.get('genesis-hash'),\n      genesisId: data.get('genesis-id'),\n      globalStateDelta: typeof data.get('global-state-delta') !== 'undefined' ? data.get('global-state-delta').map(v => EvalDeltaKeyValue.fromEncodingData(v)) : undefined,\n      group: data.get('group'),\n      heartbeatTransaction: typeof data.get('heartbeat-transaction') !== 'undefined' ? TransactionHeartbeat.fromEncodingData(data.get('heartbeat-transaction')) : undefined,\n      id: data.get('id'),\n      innerTxns: typeof data.get('inner-txns') !== 'undefined' ? data.get('inner-txns').map(v => Transaction.fromEncodingData(v)) : undefined,\n      intraRoundOffset: data.get('intra-round-offset'),\n      keyregTransaction: typeof data.get('keyreg-transaction') !== 'undefined' ? TransactionKeyreg.fromEncodingData(data.get('keyreg-transaction')) : undefined,\n      lease: data.get('lease'),\n      localStateDelta: typeof data.get('local-state-delta') !== 'undefined' ? data.get('local-state-delta').map(v => AccountStateDelta.fromEncodingData(v)) : undefined,\n      logs: data.get('logs'),\n      note: data.get('note'),\n      paymentTransaction: typeof data.get('payment-transaction') !== 'undefined' ? TransactionPayment.fromEncodingData(data.get('payment-transaction')) : undefined,\n      receiverRewards: data.get('receiver-rewards'),\n      rekeyTo: data.get('rekey-to'),\n      roundTime: data.get('round-time'),\n      senderRewards: data.get('sender-rewards'),\n      signature: typeof data.get('signature') !== 'undefined' ? TransactionSignature.fromEncodingData(data.get('signature')) : undefined,\n      stateProofTransaction: typeof data.get('state-proof-transaction') !== 'undefined' ? TransactionStateProof.fromEncodingData(data.get('state-proof-transaction')) : undefined,\n      txType: data.get('tx-type')\n    });\n  }\n}\n/**\n * Fields for application transactions.\n * Definition:\n * data/transactions/application.go : ApplicationCallTxnFields\n */\nexport class TransactionApplication {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'application-id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'accounts',\n        valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n        omitEmpty: true\n      }, {\n        key: 'application-args',\n        valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),\n        omitEmpty: true\n      }, {\n        key: 'approval-program',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'clear-state-program',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'extra-program-pages',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'foreign-apps',\n        valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n        omitEmpty: true\n      }, {\n        key: 'foreign-assets',\n        valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n        omitEmpty: true\n      }, {\n        key: 'global-state-schema',\n        valueSchema: new OptionalSchema(StateSchema.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'local-state-schema',\n        valueSchema: new OptionalSchema(StateSchema.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'on-completion',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionApplication` object.\n   * @param applicationId - (apid) ID of the application being configured or empty if creating.\n   * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\n   * application's approval-program and clear-state-program.\n   * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\n   * approval-program and clear-state-program.\n   * @param approvalProgram - (apap) Logic executed for every application transaction, except when\n   * on-completion is set to \"clear\". It can read and write global state for the\n   * application, as well as account-specific local state. Approval programs may\n   * reject the transaction.\n   * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\n   * \"clear\". It can read and write global state for the application, as well as\n   * account-specific local state. Clear state programs cannot reject the\n   * transaction.\n   * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\n   * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\n   * states may be accessed by this application's approval-program and\n   * clear-state-program. The access is read-only.\n   * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\n   * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\n   * Valid types:\n   * * noop\n   * * optin\n   * * closeout\n   * * clear\n   * * update\n   * * update\n   * * delete\n   */\n  constructor({\n    applicationId,\n    accounts,\n    applicationArgs,\n    approvalProgram,\n    clearStateProgram,\n    extraProgramPages,\n    foreignApps,\n    foreignAssets,\n    globalStateSchema,\n    localStateSchema,\n    onCompletion\n  }) {\n    this.applicationId = ensureBigInt(applicationId);\n    this.accounts = typeof accounts !== 'undefined' ? accounts.map(addr => typeof addr === 'string' ? Address.fromString(addr) : addr) : undefined;\n    this.applicationArgs = applicationArgs;\n    this.approvalProgram = typeof approvalProgram === 'string' ? base64ToBytes(approvalProgram) : approvalProgram;\n    this.clearStateProgram = typeof clearStateProgram === 'string' ? base64ToBytes(clearStateProgram) : clearStateProgram;\n    this.extraProgramPages = typeof extraProgramPages === 'undefined' ? undefined : ensureSafeInteger(extraProgramPages);\n    this.foreignApps = typeof foreignApps === 'undefined' ? undefined : foreignApps.map(ensureBigInt);\n    this.foreignAssets = typeof foreignAssets === 'undefined' ? undefined : foreignAssets.map(ensureBigInt);\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.onCompletion = onCompletion;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionApplication.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['application-id', this.applicationId], ['accounts', typeof this.accounts !== 'undefined' ? this.accounts.map(v => v.toString()) : undefined], ['application-args', this.applicationArgs], ['approval-program', this.approvalProgram], ['clear-state-program', this.clearStateProgram], ['extra-program-pages', this.extraProgramPages], ['foreign-apps', this.foreignApps], ['foreign-assets', this.foreignAssets], ['global-state-schema', typeof this.globalStateSchema !== 'undefined' ? this.globalStateSchema.toEncodingData() : undefined], ['local-state-schema', typeof this.localStateSchema !== 'undefined' ? this.localStateSchema.toEncodingData() : undefined], ['on-completion', this.onCompletion]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionApplication: ${data}`);\n    }\n    return new TransactionApplication({\n      applicationId: data.get('application-id'),\n      accounts: data.get('accounts'),\n      applicationArgs: data.get('application-args'),\n      approvalProgram: data.get('approval-program'),\n      clearStateProgram: data.get('clear-state-program'),\n      extraProgramPages: data.get('extra-program-pages'),\n      foreignApps: data.get('foreign-apps'),\n      foreignAssets: data.get('foreign-assets'),\n      globalStateSchema: typeof data.get('global-state-schema') !== 'undefined' ? StateSchema.fromEncodingData(data.get('global-state-schema')) : undefined,\n      localStateSchema: typeof data.get('local-state-schema') !== 'undefined' ? StateSchema.fromEncodingData(data.get('local-state-schema')) : undefined,\n      onCompletion: data.get('on-completion')\n    });\n  }\n}\n/**\n * Fields for asset allocation, re-configuration, and destruction.\n * A zero value for asset-id indicates asset creation.\n * A zero value for the params indicates asset destruction.\n * Definition:\n * data/transactions/asset.go : AssetConfigTxnFields\n */\nexport class TransactionAssetConfig {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'asset-id',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'params',\n        valueSchema: new OptionalSchema(AssetParams.encodingSchema),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionAssetConfig` object.\n   * @param assetId - (xaid) ID of the asset being configured or empty if creating.\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor({\n    assetId,\n    params\n  }) {\n    this.assetId = typeof assetId === 'undefined' ? undefined : ensureBigInt(assetId);\n    this.params = params;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionAssetConfig.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['asset-id', this.assetId], ['params', typeof this.params !== 'undefined' ? this.params.toEncodingData() : undefined]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionAssetConfig: ${data}`);\n    }\n    return new TransactionAssetConfig({\n      assetId: data.get('asset-id'),\n      params: typeof data.get('params') !== 'undefined' ? AssetParams.fromEncodingData(data.get('params')) : undefined\n    });\n  }\n}\n/**\n * Fields for an asset freeze transaction.\n * Definition:\n * data/transactions/asset.go : AssetFreezeTxnFields\n */\nexport class TransactionAssetFreeze {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'address',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'asset-id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'new-freeze-status',\n        valueSchema: new BooleanSchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionAssetFreeze` object.\n   * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\n   * @param assetId - (faid) ID of the asset being frozen or thawed.\n   * @param newFreezeStatus - (afrz) The new freeze status.\n   */\n  constructor({\n    address,\n    assetId,\n    newFreezeStatus\n  }) {\n    this.address = address;\n    this.assetId = ensureBigInt(assetId);\n    this.newFreezeStatus = newFreezeStatus;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionAssetFreeze.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['address', this.address], ['asset-id', this.assetId], ['new-freeze-status', this.newFreezeStatus]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionAssetFreeze: ${data}`);\n    }\n    return new TransactionAssetFreeze({\n      address: data.get('address'),\n      assetId: data.get('asset-id'),\n      newFreezeStatus: data.get('new-freeze-status')\n    });\n  }\n}\n/**\n * Fields for an asset transfer transaction.\n * Definition:\n * data/transactions/asset.go : AssetTransferTxnFields\n */\nexport class TransactionAssetTransfer {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'amount',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'asset-id',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'receiver',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'close-amount',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'close-to',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      }, {\n        key: 'sender',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionAssetTransfer` object.\n   * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n   * that asset in the account's Assets map.\n   * @param assetId - (xaid) ID of the asset being transferred.\n   * @param receiver - (arcv) Recipient address of the transfer.\n   * @param closeAmount - Number of assets transferred to the close-to account as part of the transaction.\n   * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\n   * map, and specifies where the remaining asset holdings should be transferred.\n   * It's always valid to transfer remaining asset holdings to the creator account.\n   * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\n   * zero value, the real transaction sender must be the Clawback address from the\n   * AssetParams.\n   */\n  constructor({\n    amount,\n    assetId,\n    receiver,\n    closeAmount,\n    closeTo,\n    sender\n  }) {\n    this.amount = ensureBigInt(amount);\n    this.assetId = ensureBigInt(assetId);\n    this.receiver = receiver;\n    this.closeAmount = typeof closeAmount === 'undefined' ? undefined : ensureBigInt(closeAmount);\n    this.closeTo = closeTo;\n    this.sender = sender;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionAssetTransfer.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['amount', this.amount], ['asset-id', this.assetId], ['receiver', this.receiver], ['close-amount', this.closeAmount], ['close-to', this.closeTo], ['sender', this.sender]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionAssetTransfer: ${data}`);\n    }\n    return new TransactionAssetTransfer({\n      amount: data.get('amount'),\n      assetId: data.get('asset-id'),\n      receiver: data.get('receiver'),\n      closeAmount: data.get('close-amount'),\n      closeTo: data.get('close-to'),\n      sender: data.get('sender')\n    });\n  }\n}\n/**\n * Fields for a heartbeat transaction.\n * Definition:\n * data/transactions/heartbeat.go : HeartbeatTxnFields\n */\nexport class TransactionHeartbeat {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'hb-address',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'hb-key-dilution',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'hb-proof',\n        valueSchema: HbProofFields.encodingSchema,\n        omitEmpty: true\n      }, {\n        key: 'hb-seed',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'hb-vote-id',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionHeartbeat` object.\n   * @param hbAddress - (hbad) HbAddress is the account this txn is proving onlineness for.\n   * @param hbKeyDilution - (hbkd) HbKeyDilution must match HbAddress account's current KeyDilution.\n   * @param hbProof - (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\n   * it is online.\n   * @param hbSeed - (hbsd) HbSeed must be the block seed for the this transaction's firstValid\n   * block.\n   * @param hbVoteId - (hbvid) HbVoteID must match the HbAddress account's current VoteID.\n   */\n  constructor({\n    hbAddress,\n    hbKeyDilution,\n    hbProof,\n    hbSeed,\n    hbVoteId\n  }) {\n    this.hbAddress = hbAddress;\n    this.hbKeyDilution = ensureBigInt(hbKeyDilution);\n    this.hbProof = hbProof;\n    this.hbSeed = typeof hbSeed === 'string' ? base64ToBytes(hbSeed) : hbSeed;\n    this.hbVoteId = typeof hbVoteId === 'string' ? base64ToBytes(hbVoteId) : hbVoteId;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionHeartbeat.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['hb-address', this.hbAddress], ['hb-key-dilution', this.hbKeyDilution], ['hb-proof', this.hbProof.toEncodingData()], ['hb-seed', this.hbSeed], ['hb-vote-id', this.hbVoteId]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionHeartbeat: ${data}`);\n    }\n    return new TransactionHeartbeat({\n      hbAddress: data.get('hb-address'),\n      hbKeyDilution: data.get('hb-key-dilution'),\n      hbProof: HbProofFields.fromEncodingData(data.get('hb-proof') ?? new Map()),\n      hbSeed: data.get('hb-seed'),\n      hbVoteId: data.get('hb-vote-id')\n    });\n  }\n}\n/**\n * Fields for a keyreg transaction.\n * Definition:\n * data/transactions/keyreg.go : KeyregTxnFields\n */\nexport class TransactionKeyreg {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'non-participation',\n        valueSchema: new OptionalSchema(new BooleanSchema()),\n        omitEmpty: true\n      }, {\n        key: 'selection-participation-key',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'state-proof-key',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'vote-first-valid',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'vote-key-dilution',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'vote-last-valid',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'vote-participation-key',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionKeyreg` object.\n   * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\n   * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\n   * committee selection.\n   * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\n   * @param voteFirstValid - (votefst) First round this participation key is valid.\n   * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (votelst) Last round this participation key is valid.\n   * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\n   */\n  constructor({\n    nonParticipation,\n    selectionParticipationKey,\n    stateProofKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey\n  }) {\n    this.nonParticipation = nonParticipation;\n    this.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? base64ToBytes(selectionParticipationKey) : selectionParticipationKey;\n    this.stateProofKey = typeof stateProofKey === 'string' ? base64ToBytes(stateProofKey) : stateProofKey;\n    this.voteFirstValid = typeof voteFirstValid === 'undefined' ? undefined : ensureBigInt(voteFirstValid);\n    this.voteKeyDilution = typeof voteKeyDilution === 'undefined' ? undefined : ensureBigInt(voteKeyDilution);\n    this.voteLastValid = typeof voteLastValid === 'undefined' ? undefined : ensureBigInt(voteLastValid);\n    this.voteParticipationKey = typeof voteParticipationKey === 'string' ? base64ToBytes(voteParticipationKey) : voteParticipationKey;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionKeyreg.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['non-participation', this.nonParticipation], ['selection-participation-key', this.selectionParticipationKey], ['state-proof-key', this.stateProofKey], ['vote-first-valid', this.voteFirstValid], ['vote-key-dilution', this.voteKeyDilution], ['vote-last-valid', this.voteLastValid], ['vote-participation-key', this.voteParticipationKey]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionKeyreg: ${data}`);\n    }\n    return new TransactionKeyreg({\n      nonParticipation: data.get('non-participation'),\n      selectionParticipationKey: data.get('selection-participation-key'),\n      stateProofKey: data.get('state-proof-key'),\n      voteFirstValid: data.get('vote-first-valid'),\n      voteKeyDilution: data.get('vote-key-dilution'),\n      voteLastValid: data.get('vote-last-valid'),\n      voteParticipationKey: data.get('vote-participation-key')\n    });\n  }\n}\n/**\n * Fields for a payment transaction.\n * Definition:\n * data/transactions/payment.go : PaymentTxnFields\n */\nexport class TransactionPayment {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'amount',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'receiver',\n        valueSchema: new StringSchema(),\n        omitEmpty: true\n      }, {\n        key: 'close-amount',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'close-remainder-to',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionPayment` object.\n   * @param amount - (amt) number of MicroAlgos intended to be transferred.\n   * @param receiver - (rcv) receiver's address.\n   * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\n   * closing the sender account.\n   * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\n   * remaining funds be transferred to this address.\n   */\n  constructor({\n    amount,\n    receiver,\n    closeAmount,\n    closeRemainderTo\n  }) {\n    this.amount = ensureBigInt(amount);\n    this.receiver = receiver;\n    this.closeAmount = typeof closeAmount === 'undefined' ? undefined : ensureBigInt(closeAmount);\n    this.closeRemainderTo = closeRemainderTo;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionPayment.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['amount', this.amount], ['receiver', this.receiver], ['close-amount', this.closeAmount], ['close-remainder-to', this.closeRemainderTo]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionPayment: ${data}`);\n    }\n    return new TransactionPayment({\n      amount: data.get('amount'),\n      receiver: data.get('receiver'),\n      closeAmount: data.get('close-amount'),\n      closeRemainderTo: data.get('close-remainder-to')\n    });\n  }\n}\n/**\n *\n */\nexport class TransactionResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'transaction',\n        valueSchema: Transaction.encodingSchema,\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\n   * transactions type. Represents both regular and inner transactions.\n   * Definition:\n   * data/transactions/signedtxn.go : SignedTxn\n   * data/transactions/transaction.go : Transaction\n   */\n  constructor({\n    currentRound,\n    transaction\n  }) {\n    this.currentRound = ensureBigInt(currentRound);\n    this.transaction = transaction;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['current-round', this.currentRound], ['transaction', this.transaction.toEncodingData()]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionResponse: ${data}`);\n    }\n    return new TransactionResponse({\n      currentRound: data.get('current-round'),\n      transaction: Transaction.fromEncodingData(data.get('transaction') ?? new Map())\n    });\n  }\n}\n/**\n * Validation signature associated with some data. Only one of the signatures\n * should be provided.\n */\nexport class TransactionSignature {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'logicsig',\n        valueSchema: new OptionalSchema(TransactionSignatureLogicsig.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'multisig',\n        valueSchema: new OptionalSchema(TransactionSignatureMultisig.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'sig',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionSignature` object.\n   * @param logicsig - (lsig) Programatic transaction signature.\n   * Definition:\n   * data/transactions/logicsig.go\n   * @param multisig - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param sig - (sig) Standard ed25519 signature.\n   */\n  constructor({\n    logicsig,\n    multisig,\n    sig\n  }) {\n    this.logicsig = logicsig;\n    this.multisig = multisig;\n    this.sig = typeof sig === 'string' ? base64ToBytes(sig) : sig;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionSignature.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['logicsig', typeof this.logicsig !== 'undefined' ? this.logicsig.toEncodingData() : undefined], ['multisig', typeof this.multisig !== 'undefined' ? this.multisig.toEncodingData() : undefined], ['sig', this.sig]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionSignature: ${data}`);\n    }\n    return new TransactionSignature({\n      logicsig: typeof data.get('logicsig') !== 'undefined' ? TransactionSignatureLogicsig.fromEncodingData(data.get('logicsig')) : undefined,\n      multisig: typeof data.get('multisig') !== 'undefined' ? TransactionSignatureMultisig.fromEncodingData(data.get('multisig')) : undefined,\n      sig: data.get('sig')\n    });\n  }\n}\n/**\n * (lsig) Programatic transaction signature.\n * Definition:\n * data/transactions/logicsig.go\n */\nexport class TransactionSignatureLogicsig {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'logic',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true\n      }, {\n        key: 'args',\n        valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),\n        omitEmpty: true\n      }, {\n        key: 'multisig-signature',\n        valueSchema: new OptionalSchema(TransactionSignatureMultisig.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'signature',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionSignatureLogicsig` object.\n   * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\n   * address of ana ccount. Base64 encoded TEAL program.\n   * @param args - (arg) Logic arguments, base64 encoded.\n   * @param multisigSignature - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param signature - (sig) ed25519 signature.\n   */\n  constructor({\n    logic,\n    args,\n    multisigSignature,\n    signature\n  }) {\n    this.logic = typeof logic === 'string' ? base64ToBytes(logic) : logic;\n    this.args = args;\n    this.multisigSignature = multisigSignature;\n    this.signature = typeof signature === 'string' ? base64ToBytes(signature) : signature;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionSignatureLogicsig.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['logic', this.logic], ['args', this.args], ['multisig-signature', typeof this.multisigSignature !== 'undefined' ? this.multisigSignature.toEncodingData() : undefined], ['signature', this.signature]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionSignatureLogicsig: ${data}`);\n    }\n    return new TransactionSignatureLogicsig({\n      logic: data.get('logic'),\n      args: data.get('args'),\n      multisigSignature: typeof data.get('multisig-signature') !== 'undefined' ? TransactionSignatureMultisig.fromEncodingData(data.get('multisig-signature')) : undefined,\n      signature: data.get('signature')\n    });\n  }\n}\n/**\n * (msig) structure holding multiple subsignatures.\n * Definition:\n * crypto/multisig.go : MultisigSig\n */\nexport class TransactionSignatureMultisig {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'subsignature',\n        valueSchema: new OptionalSchema(new ArraySchema(TransactionSignatureMultisigSubsignature.encodingSchema)),\n        omitEmpty: true\n      }, {\n        key: 'threshold',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      }, {\n        key: 'version',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionSignatureMultisig` object.\n   * @param subsignature - (subsig) holds pairs of public key and signatures.\n   * @param threshold - (thr)\n   * @param version - (v)\n   */\n  constructor({\n    subsignature,\n    threshold,\n    version\n  }) {\n    this.subsignature = subsignature;\n    this.threshold = typeof threshold === 'undefined' ? undefined : ensureSafeInteger(threshold);\n    this.version = typeof version === 'undefined' ? undefined : ensureSafeInteger(version);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionSignatureMultisig.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['subsignature', typeof this.subsignature !== 'undefined' ? this.subsignature.map(v => v.toEncodingData()) : undefined], ['threshold', this.threshold], ['version', this.version]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionSignatureMultisig: ${data}`);\n    }\n    return new TransactionSignatureMultisig({\n      subsignature: typeof data.get('subsignature') !== 'undefined' ? data.get('subsignature').map(v => TransactionSignatureMultisigSubsignature.fromEncodingData(v)) : undefined,\n      threshold: data.get('threshold'),\n      version: data.get('version')\n    });\n  }\n}\nexport class TransactionSignatureMultisigSubsignature {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'public-key',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      }, {\n        key: 'signature',\n        valueSchema: new OptionalSchema(new ByteArraySchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionSignatureMultisigSubsignature` object.\n   * @param publicKey - (pk)\n   * @param signature - (s)\n   */\n  constructor({\n    publicKey,\n    signature\n  }) {\n    this.publicKey = typeof publicKey === 'string' ? base64ToBytes(publicKey) : publicKey;\n    this.signature = typeof signature === 'string' ? base64ToBytes(signature) : signature;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionSignatureMultisigSubsignature.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['public-key', this.publicKey], ['signature', this.signature]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionSignatureMultisigSubsignature: ${data}`);\n    }\n    return new TransactionSignatureMultisigSubsignature({\n      publicKey: data.get('public-key'),\n      signature: data.get('signature')\n    });\n  }\n}\n/**\n * Fields for a state proof transaction.\n * Definition:\n * data/transactions/stateproof.go : StateProofTxnFields\n */\nexport class TransactionStateProof {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'message',\n        valueSchema: new OptionalSchema(IndexerStateProofMessage.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'state-proof',\n        valueSchema: new OptionalSchema(StateProofFields.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'state-proof-type',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionStateProof` object.\n   * @param message - (spmsg)\n   * @param stateProof - (sp) represents a state proof.\n   * Definition:\n   * crypto/stateproof/structs.go : StateProof\n   * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\n   * protocol/stateproof.go\n   */\n  constructor({\n    message,\n    stateProof,\n    stateProofType\n  }) {\n    this.message = message;\n    this.stateProof = stateProof;\n    this.stateProofType = typeof stateProofType === 'undefined' ? undefined : ensureSafeInteger(stateProofType);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionStateProof.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['message', typeof this.message !== 'undefined' ? this.message.toEncodingData() : undefined], ['state-proof', typeof this.stateProof !== 'undefined' ? this.stateProof.toEncodingData() : undefined], ['state-proof-type', this.stateProofType]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionStateProof: ${data}`);\n    }\n    return new TransactionStateProof({\n      message: typeof data.get('message') !== 'undefined' ? IndexerStateProofMessage.fromEncodingData(data.get('message')) : undefined,\n      stateProof: typeof data.get('state-proof') !== 'undefined' ? StateProofFields.fromEncodingData(data.get('state-proof')) : undefined,\n      stateProofType: data.get('state-proof-type')\n    });\n  }\n}\n/**\n *\n */\nexport class TransactionsResponse {\n  static get encodingSchema() {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      this.encodingSchemaValue.pushEntries({\n        key: 'current-round',\n        valueSchema: new Uint64Schema(),\n        omitEmpty: true\n      }, {\n        key: 'transactions',\n        valueSchema: new ArraySchema(Transaction.encodingSchema),\n        omitEmpty: true\n      }, {\n        key: 'next-token',\n        valueSchema: new OptionalSchema(new StringSchema()),\n        omitEmpty: true\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n  /**\n   * Creates a new `TransactionsResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transactions -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    currentRound,\n    transactions,\n    nextToken\n  }) {\n    this.currentRound = ensureBigInt(currentRound);\n    this.transactions = transactions;\n    this.nextToken = nextToken;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema() {\n    return TransactionsResponse.encodingSchema;\n  }\n  toEncodingData() {\n    return new Map([['current-round', this.currentRound], ['transactions', this.transactions.map(v => v.toEncodingData())], ['next-token', this.nextToken]]);\n  }\n  static fromEncodingData(data) {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionsResponse: ${data}`);\n    }\n    return new TransactionsResponse({\n      currentRound: data.get('current-round'),\n      transactions: (data.get('transactions') ?? []).map(v => Transaction.fromEncodingData(v)),\n      nextToken: data.get('next-token')\n    });\n  }\n}","map":{"version":3,"names":["ensureBigInt","ensureSafeInteger","NamedMapSchema","ArraySchema","Uint64Schema","StringSchema","BooleanSchema","ByteArraySchema","OptionalSchema","base64ToBytes","Address","UntypedValue","Account","encodingSchema","encodingSchemaValue","pushEntries","key","valueSchema","omitEmpty","ApplicationLocalState","ApplicationStateSchema","AssetHolding","Application","Asset","AccountParticipation","constructor","address","amount","amountWithoutPendingRewards","minBalance","pendingRewards","rewards","round","status","totalAppsOptedIn","totalAssetsOptedIn","totalBoxBytes","totalBoxes","totalCreatedApps","totalCreatedAssets","appsLocalState","appsTotalExtraPages","appsTotalSchema","assets","authAddr","closedAtRound","createdApps","createdAssets","createdAtRound","deleted","incentiveEligible","lastHeartbeat","lastProposed","participation","rewardBase","sigType","undefined","fromString","getEncodingSchema","toEncodingData","Map","map","v","toString","fromEncodingData","data","Error","get","selectionParticipationKey","voteFirstValid","voteKeyDilution","voteLastValid","voteParticipationKey","stateProofKey","AccountResponse","account","currentRound","AccountStateDelta","EvalDeltaKeyValue","delta","AccountsResponse","accounts","nextToken","ApplicationParams","id","params","deletedAtRound","TealKeyValue","schema","closedOutAtRound","keyValue","optedInAtRound","ApplicationLocalStatesResponse","appsLocalStates","ApplicationLogData","logs","txid","ApplicationLogsResponse","applicationId","logData","approvalProgram","clearStateProgram","creator","extraProgramPages","globalState","globalStateSchema","localStateSchema","ApplicationResponse","application","numByteSlice","numUint","ApplicationsResponse","applications","AssetParams","index","destroyedAtRound","AssetBalancesResponse","MiniAssetHolding","balances","assetId","isFrozen","optedOutAtRound","AssetHoldingsResponse","decimals","total","clawback","defaultFrozen","freeze","manager","metadataHash","name","nameB64","reserve","unitName","unitNameB64","url","urlB64","AssetResponse","asset","AssetsResponse","Block","ParticipationUpdates","BlockRewards","StateProofTracking","Transaction","BlockUpgradeState","BlockUpgradeVote","genesisHash","genesisId","previousBlockHash","seed","timestamp","transactionsRoot","transactionsRootSha256","bonus","feesCollected","participationUpdates","proposer","proposerPayout","stateProofTracking","transactions","txnCounter","upgradeState","upgradeVote","BlockHeadersResponse","blocks","feeSink","rewardsCalculationRound","rewardsLevel","rewardsPool","rewardsRate","rewardsResidue","currentProtocol","nextProtocol","nextProtocolApprovals","nextProtocolSwitchOn","nextProtocolVoteBefore","upgradeApprove","upgradeDelay","upgradePropose","Box","value","BoxDescriptor","BoxesResponse","boxes","ErrorResponse","message","EvalDelta","action","bytes","uint","HashFactory","hashType","HbProofFields","hbPk","hbPk1sig","hbPk2","hbPk2sig","hbSig","HealthCheck","dbAvailable","isMigrating","version","errors","IndexerStateProofMessage","blockHeadersCommitment","firstAttestedRound","latestAttestedRound","lnProvenWeight","votersCommitment","MerkleArrayProof","hashFactory","path","treeDepth","absentParticipationAccounts","expiredParticipationAccounts","StateProofFields","StateProofReveal","partProofs","positionsToReveal","reveals","saltVersion","sigCommit","sigProofs","signedWeight","StateProofParticipant","StateProofVerifier","verifier","weight","StateProofSigSlot","participant","position","sigSlot","StateProofSignature","lowerSigWeight","signature","falconSignature","merkleArrayIndex","proof","verifyingKey","nextRound","onlineTotalWeight","type","commitment","keyLifetime","StateSchema","TealValue","TransactionApplication","TransactionAssetConfig","TransactionAssetFreeze","TransactionAssetTransfer","TransactionHeartbeat","TransactionKeyreg","TransactionPayment","TransactionSignature","TransactionStateProof","fee","firstValid","lastValid","sender","applicationTransaction","assetConfigTransaction","assetFreezeTransaction","assetTransferTransaction","closeRewards","closingAmount","confirmedRound","createdApplicationIndex","createdAssetIndex","globalStateDelta","group","heartbeatTransaction","innerTxns","intraRoundOffset","keyregTransaction","lease","localStateDelta","note","paymentTransaction","receiverRewards","rekeyTo","roundTime","senderRewards","stateProofTransaction","txType","applicationArgs","foreignApps","foreignAssets","onCompletion","addr","newFreezeStatus","receiver","closeAmount","closeTo","hbAddress","hbKeyDilution","hbProof","hbSeed","hbVoteId","nonParticipation","closeRemainderTo","TransactionResponse","transaction","TransactionSignatureLogicsig","TransactionSignatureMultisig","logicsig","multisig","sig","logic","args","multisigSignature","TransactionSignatureMultisigSubsignature","subsignature","threshold","publicKey","stateProof","stateProofType","TransactionsResponse"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\indexer\\models\\types.ts"],"sourcesContent":["/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n\n/* eslint-disable no-use-before-define */\nimport { ensureBigInt, ensureSafeInteger } from '../../../../utils/utils.js';\nimport { Encodable, Schema } from '../../../../encoding/encoding.js';\nimport {\n  NamedMapSchema,\n  ArraySchema,\n  Uint64Schema,\n  StringSchema,\n  BooleanSchema,\n  ByteArraySchema,\n  OptionalSchema,\n} from '../../../../encoding/schema/index.js';\nimport { base64ToBytes } from '../../../../encoding/binarydata.js';\nimport { Address } from '../../../../encoding/address.js';\nimport { UntypedValue } from '../../untypedmodel.js';\n\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'address', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'amount-without-pending-rewards',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'min-balance',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'pending-rewards',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        { key: 'rewards', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'status', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'total-apps-opted-in',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-assets-opted-in',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-box-bytes',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-boxes',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-created-apps',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'total-created-assets',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'apps-local-state',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(ApplicationLocalState.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'apps-total-extra-pages',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'apps-total-schema',\n          valueSchema: new OptionalSchema(\n            ApplicationStateSchema.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'assets',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(AssetHolding.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'auth-addr',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'closed-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'created-apps',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(Application.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'created-assets',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(Asset.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'created-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'deleted',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'incentive-eligible',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'last-heartbeat',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'last-proposed',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'participation',\n          valueSchema: new OptionalSchema(AccountParticipation.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'reward-base',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'sig-type',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * the account public key\n   */\n  public address: string;\n\n  /**\n   * total number of MicroAlgos in the account\n   */\n  public amount: bigint;\n\n  /**\n   * specifies the amount of MicroAlgos in the account, without the pending rewards.\n   */\n  public amountWithoutPendingRewards: bigint;\n\n  /**\n   * MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   */\n  public minBalance: number;\n\n  /**\n   * amount of MicroAlgos of pending rewards in this account.\n   */\n  public pendingRewards: bigint;\n\n  /**\n   * total rewards of MicroAlgos the account has received, including pending rewards.\n   */\n  public rewards: bigint;\n\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: bigint;\n\n  /**\n   * voting status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   */\n  public status: string;\n\n  /**\n   * The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   */\n  public totalAppsOptedIn: number;\n\n  /**\n   * The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   */\n  public totalAssetsOptedIn: number;\n\n  /**\n   * For app-accounts only. The total number of bytes allocated for the keys and\n   * values of boxes which belong to the associated application.\n   */\n  public totalBoxBytes: number;\n\n  /**\n   * For app-accounts only. The total number of boxes which belong to the associated\n   * application.\n   */\n  public totalBoxes: number;\n\n  /**\n   * The count of all apps (AppParams objects) created by this account.\n   */\n  public totalCreatedApps: number;\n\n  /**\n   * The count of all assets (AssetParams objects) created by this account.\n   */\n  public totalCreatedAssets: number;\n\n  /**\n   * application local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   */\n  public appsLocalState?: ApplicationLocalState[];\n\n  /**\n   * the sum of all extra application program pages for this account.\n   */\n  public appsTotalExtraPages?: number;\n\n  /**\n   * the sum of all of the local schemas and global schemas in this account.\n   * Note: the raw account uses `StateSchema` for this type.\n   */\n  public appsTotalSchema?: ApplicationStateSchema;\n\n  /**\n   * assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   */\n  public assets?: AssetHolding[];\n\n  /**\n   * The address against which signing should be checked. If empty, the address of\n   * the current account is used. This field can be updated in any transaction by\n   * setting the RekeyTo field.\n   */\n  public authAddr?: Address;\n\n  /**\n   * Round during which this account was most recently closed.\n   */\n  public closedAtRound?: bigint;\n\n  /**\n   * parameters of applications created by this account including app global data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   */\n  public createdApps?: Application[];\n\n  /**\n   * parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   */\n  public createdAssets?: Asset[];\n\n  /**\n   * Round during which this account first appeared in a transaction.\n   */\n  public createdAtRound?: bigint;\n\n  /**\n   * Whether or not this account is currently closed.\n   */\n  public deleted?: boolean;\n\n  /**\n   * can the account receive block incentives if its balance is in range at proposal\n   * time.\n   */\n  public incentiveEligible?: boolean;\n\n  /**\n   * The round in which this account last went online, or explicitly renewed their\n   * online status.\n   */\n  public lastHeartbeat?: number;\n\n  /**\n   * The round in which this account last proposed the block.\n   */\n  public lastProposed?: number;\n\n  /**\n   * AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   */\n  public participation?: AccountParticipation;\n\n  /**\n   * used as part of the rewards computation. Only applicable to accounts which are\n   * participating.\n   */\n  public rewardBase?: bigint;\n\n  /**\n   * the type of signature used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * * or null if unknown\n   */\n  public sigType?: string;\n\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param minBalance - MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - total rewards of MicroAlgos the account has received, including pending rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - voting status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\n   * values of boxes which belong to the associated application.\n   * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\n   * application.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - application local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - the sum of all of the local schemas and global schemas in this account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - The address against which signing should be checked. If empty, the address of\n   * the current account is used. This field can be updated in any transaction by\n   * setting the RekeyTo field.\n   * @param closedAtRound - Round during which this account was most recently closed.\n   * @param createdApps - parameters of applications created by this account including app global data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param createdAtRound - Round during which this account first appeared in a transaction.\n   * @param deleted - Whether or not this account is currently closed.\n   * @param incentiveEligible - can the account receive block incentives if its balance is in range at proposal\n   * time.\n   * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their\n   * online status.\n   * @param lastProposed - The round in which this account last proposed the block.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - used as part of the rewards computation. Only applicable to accounts which are\n   * participating.\n   * @param sigType - the type of signature used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * * or null if unknown\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    minBalance,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalBoxBytes,\n    totalBoxes,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    closedAtRound,\n    createdApps,\n    createdAssets,\n    createdAtRound,\n    deleted,\n    incentiveEligible,\n    lastHeartbeat,\n    lastProposed,\n    participation,\n    rewardBase,\n    sigType,\n  }: {\n    address: string;\n    amount: number | bigint;\n    amountWithoutPendingRewards: number | bigint;\n    minBalance: number | bigint;\n    pendingRewards: number | bigint;\n    rewards: number | bigint;\n    round: number | bigint;\n    status: string;\n    totalAppsOptedIn: number | bigint;\n    totalAssetsOptedIn: number | bigint;\n    totalBoxBytes: number | bigint;\n    totalBoxes: number | bigint;\n    totalCreatedApps: number | bigint;\n    totalCreatedAssets: number | bigint;\n    appsLocalState?: ApplicationLocalState[];\n    appsTotalExtraPages?: number | bigint;\n    appsTotalSchema?: ApplicationStateSchema;\n    assets?: AssetHolding[];\n    authAddr?: Address | string;\n    closedAtRound?: number | bigint;\n    createdApps?: Application[];\n    createdAssets?: Asset[];\n    createdAtRound?: number | bigint;\n    deleted?: boolean;\n    incentiveEligible?: boolean;\n    lastHeartbeat?: number | bigint;\n    lastProposed?: number | bigint;\n    participation?: AccountParticipation;\n    rewardBase?: number | bigint;\n    sigType?: string;\n  }) {\n    this.address = address;\n    this.amount = ensureBigInt(amount);\n    this.amountWithoutPendingRewards = ensureBigInt(\n      amountWithoutPendingRewards\n    );\n    this.minBalance = ensureSafeInteger(minBalance);\n    this.pendingRewards = ensureBigInt(pendingRewards);\n    this.rewards = ensureBigInt(rewards);\n    this.round = ensureBigInt(round);\n    this.status = status;\n    this.totalAppsOptedIn = ensureSafeInteger(totalAppsOptedIn);\n    this.totalAssetsOptedIn = ensureSafeInteger(totalAssetsOptedIn);\n    this.totalBoxBytes = ensureSafeInteger(totalBoxBytes);\n    this.totalBoxes = ensureSafeInteger(totalBoxes);\n    this.totalCreatedApps = ensureSafeInteger(totalCreatedApps);\n    this.totalCreatedAssets = ensureSafeInteger(totalCreatedAssets);\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages =\n      typeof appsTotalExtraPages === 'undefined'\n        ? undefined\n        : ensureSafeInteger(appsTotalExtraPages);\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr =\n      typeof authAddr === 'string' ? Address.fromString(authAddr) : authAddr;\n    this.closedAtRound =\n      typeof closedAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(closedAtRound);\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.createdAtRound =\n      typeof createdAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(createdAtRound);\n    this.deleted = deleted;\n    this.incentiveEligible = incentiveEligible;\n    this.lastHeartbeat =\n      typeof lastHeartbeat === 'undefined'\n        ? undefined\n        : ensureSafeInteger(lastHeartbeat);\n    this.lastProposed =\n      typeof lastProposed === 'undefined'\n        ? undefined\n        : ensureSafeInteger(lastProposed);\n    this.participation = participation;\n    this.rewardBase =\n      typeof rewardBase === 'undefined' ? undefined : ensureBigInt(rewardBase);\n    this.sigType = sigType;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Account.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['address', this.address],\n      ['amount', this.amount],\n      ['amount-without-pending-rewards', this.amountWithoutPendingRewards],\n      ['min-balance', this.minBalance],\n      ['pending-rewards', this.pendingRewards],\n      ['rewards', this.rewards],\n      ['round', this.round],\n      ['status', this.status],\n      ['total-apps-opted-in', this.totalAppsOptedIn],\n      ['total-assets-opted-in', this.totalAssetsOptedIn],\n      ['total-box-bytes', this.totalBoxBytes],\n      ['total-boxes', this.totalBoxes],\n      ['total-created-apps', this.totalCreatedApps],\n      ['total-created-assets', this.totalCreatedAssets],\n      [\n        'apps-local-state',\n        typeof this.appsLocalState !== 'undefined'\n          ? this.appsLocalState.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['apps-total-extra-pages', this.appsTotalExtraPages],\n      [\n        'apps-total-schema',\n        typeof this.appsTotalSchema !== 'undefined'\n          ? this.appsTotalSchema.toEncodingData()\n          : undefined,\n      ],\n      [\n        'assets',\n        typeof this.assets !== 'undefined'\n          ? this.assets.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      [\n        'auth-addr',\n        typeof this.authAddr !== 'undefined'\n          ? this.authAddr.toString()\n          : undefined,\n      ],\n      ['closed-at-round', this.closedAtRound],\n      [\n        'created-apps',\n        typeof this.createdApps !== 'undefined'\n          ? this.createdApps.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      [\n        'created-assets',\n        typeof this.createdAssets !== 'undefined'\n          ? this.createdAssets.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['created-at-round', this.createdAtRound],\n      ['deleted', this.deleted],\n      ['incentive-eligible', this.incentiveEligible],\n      ['last-heartbeat', this.lastHeartbeat],\n      ['last-proposed', this.lastProposed],\n      [\n        'participation',\n        typeof this.participation !== 'undefined'\n          ? this.participation.toEncodingData()\n          : undefined,\n      ],\n      ['reward-base', this.rewardBase],\n      ['sig-type', this.sigType],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Account {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Account: ${data}`);\n    }\n    return new Account({\n      address: data.get('address'),\n      amount: data.get('amount'),\n      amountWithoutPendingRewards: data.get('amount-without-pending-rewards'),\n      minBalance: data.get('min-balance'),\n      pendingRewards: data.get('pending-rewards'),\n      rewards: data.get('rewards'),\n      round: data.get('round'),\n      status: data.get('status'),\n      totalAppsOptedIn: data.get('total-apps-opted-in'),\n      totalAssetsOptedIn: data.get('total-assets-opted-in'),\n      totalBoxBytes: data.get('total-box-bytes'),\n      totalBoxes: data.get('total-boxes'),\n      totalCreatedApps: data.get('total-created-apps'),\n      totalCreatedAssets: data.get('total-created-assets'),\n      appsLocalState:\n        typeof data.get('apps-local-state') !== 'undefined'\n          ? data\n              .get('apps-local-state')\n              .map((v: unknown) => ApplicationLocalState.fromEncodingData(v))\n          : undefined,\n      appsTotalExtraPages: data.get('apps-total-extra-pages'),\n      appsTotalSchema:\n        typeof data.get('apps-total-schema') !== 'undefined'\n          ? ApplicationStateSchema.fromEncodingData(\n              data.get('apps-total-schema')\n            )\n          : undefined,\n      assets:\n        typeof data.get('assets') !== 'undefined'\n          ? data\n              .get('assets')\n              .map((v: unknown) => AssetHolding.fromEncodingData(v))\n          : undefined,\n      authAddr: data.get('auth-addr'),\n      closedAtRound: data.get('closed-at-round'),\n      createdApps:\n        typeof data.get('created-apps') !== 'undefined'\n          ? data\n              .get('created-apps')\n              .map((v: unknown) => Application.fromEncodingData(v))\n          : undefined,\n      createdAssets:\n        typeof data.get('created-assets') !== 'undefined'\n          ? data\n              .get('created-assets')\n              .map((v: unknown) => Asset.fromEncodingData(v))\n          : undefined,\n      createdAtRound: data.get('created-at-round'),\n      deleted: data.get('deleted'),\n      incentiveEligible: data.get('incentive-eligible'),\n      lastHeartbeat: data.get('last-heartbeat'),\n      lastProposed: data.get('last-proposed'),\n      participation:\n        typeof data.get('participation') !== 'undefined'\n          ? AccountParticipation.fromEncodingData(data.get('participation'))\n          : undefined,\n      rewardBase: data.get('reward-base'),\n      sigType: data.get('sig-type'),\n    });\n  }\n}\n\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'selection-participation-key',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-first-valid',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-key-dilution',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-last-valid',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-participation-key',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'state-proof-key',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Selection public key (if any) currently registered for this round.\n   */\n  public selectionParticipationKey: Uint8Array;\n\n  /**\n   * First round for which this participation is valid.\n   */\n  public voteFirstValid: bigint;\n\n  /**\n   * Number of subkeys in each batch of participation keys.\n   */\n  public voteKeyDilution: bigint;\n\n  /**\n   * Last round for which this participation is valid.\n   */\n  public voteLastValid: bigint;\n\n  /**\n   * root participation public key (if any) currently registered for this round.\n   */\n  public voteParticipationKey: Uint8Array;\n\n  /**\n   * Root of the state proof key (if any)\n   */\n  public stateProofKey?: Uint8Array;\n\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - First round for which this participation is valid.\n   * @param voteKeyDilution - Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - Last round for which this participation is valid.\n   * @param voteParticipationKey - root participation public key (if any) currently registered for this round.\n   * @param stateProofKey - Root of the state proof key (if any)\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey,\n  }: {\n    selectionParticipationKey: string | Uint8Array;\n    voteFirstValid: number | bigint;\n    voteKeyDilution: number | bigint;\n    voteLastValid: number | bigint;\n    voteParticipationKey: string | Uint8Array;\n    stateProofKey?: string | Uint8Array;\n  }) {\n    this.selectionParticipationKey =\n      typeof selectionParticipationKey === 'string'\n        ? base64ToBytes(selectionParticipationKey)\n        : selectionParticipationKey;\n    this.voteFirstValid = ensureBigInt(voteFirstValid);\n    this.voteKeyDilution = ensureBigInt(voteKeyDilution);\n    this.voteLastValid = ensureBigInt(voteLastValid);\n    this.voteParticipationKey =\n      typeof voteParticipationKey === 'string'\n        ? base64ToBytes(voteParticipationKey)\n        : voteParticipationKey;\n    this.stateProofKey =\n      typeof stateProofKey === 'string'\n        ? base64ToBytes(stateProofKey)\n        : stateProofKey;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AccountParticipation.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['selection-participation-key', this.selectionParticipationKey],\n      ['vote-first-valid', this.voteFirstValid],\n      ['vote-key-dilution', this.voteKeyDilution],\n      ['vote-last-valid', this.voteLastValid],\n      ['vote-participation-key', this.voteParticipationKey],\n      ['state-proof-key', this.stateProofKey],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AccountParticipation {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountParticipation: ${data}`);\n    }\n    return new AccountParticipation({\n      selectionParticipationKey: data.get('selection-participation-key'),\n      voteFirstValid: data.get('vote-first-valid'),\n      voteKeyDilution: data.get('vote-key-dilution'),\n      voteLastValid: data.get('vote-last-valid'),\n      voteParticipationKey: data.get('vote-participation-key'),\n      stateProofKey: data.get('state-proof-key'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class AccountResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'account',\n          valueSchema: Account.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Account information at a given round.\n   * Definition:\n   * data/basics/userBalance.go : AccountData\n   */\n  public account: Account;\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Creates a new `AccountResponse` object.\n   * @param account - Account information at a given round.\n   * Definition:\n   * data/basics/userBalance.go : AccountData\n   * @param currentRound - Round at which the results were computed.\n   */\n  constructor({\n    account,\n    currentRound,\n  }: {\n    account: Account;\n    currentRound: number | bigint;\n  }) {\n    this.account = account;\n    this.currentRound = ensureBigInt(currentRound);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AccountResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['account', this.account.toEncodingData()],\n      ['current-round', this.currentRound],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AccountResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountResponse: ${data}`);\n    }\n    return new AccountResponse({\n      account: Account.fromEncodingData(data.get('account') ?? new Map()),\n      currentRound: data.get('current-round'),\n    });\n  }\n}\n\n/**\n * Application state delta.\n */\nexport class AccountStateDelta implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'address', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'delta',\n          valueSchema: new ArraySchema(EvalDeltaKeyValue.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public address: string;\n\n  /**\n   * Application state delta.\n   */\n  public delta: EvalDeltaKeyValue[];\n\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor({\n    address,\n    delta,\n  }: {\n    address: string;\n    delta: EvalDeltaKeyValue[];\n  }) {\n    this.address = address;\n    this.delta = delta;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AccountStateDelta.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['address', this.address],\n      ['delta', this.delta.map((v) => v.toEncodingData())],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AccountStateDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountStateDelta: ${data}`);\n    }\n    return new AccountStateDelta({\n      address: data.get('address'),\n      delta: (data.get('delta') ?? []).map((v: unknown) =>\n        EvalDeltaKeyValue.fromEncodingData(v)\n      ),\n    });\n  }\n}\n\n/**\n *\n */\nexport class AccountsResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'accounts',\n          valueSchema: new ArraySchema(Account.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public accounts: Account[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AccountsResponse` object.\n   * @param accounts -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    accounts,\n    currentRound,\n    nextToken,\n  }: {\n    accounts: Account[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    this.accounts = accounts;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AccountsResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['accounts', this.accounts.map((v) => v.toEncodingData())],\n      ['current-round', this.currentRound],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AccountsResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AccountsResponse: ${data}`);\n    }\n    return new AccountsResponse({\n      accounts: (data.get('accounts') ?? []).map((v: unknown) =>\n        Account.fromEncodingData(v)\n      ),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n\n/**\n * Application index and its parameters\n */\nexport class Application implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'id', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'params',\n          valueSchema: ApplicationParams.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'created-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'deleted',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'deleted-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * application index.\n   */\n  public id: bigint;\n\n  /**\n   * application parameters.\n   */\n  public params: ApplicationParams;\n\n  /**\n   * Round when this application was created.\n   */\n  public createdAtRound?: bigint;\n\n  /**\n   * Whether or not this application is currently deleted.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round when this application was deleted.\n   */\n  public deletedAtRound?: bigint;\n\n  /**\n   * Creates a new `Application` object.\n   * @param id - application index.\n   * @param params - application parameters.\n   * @param createdAtRound - Round when this application was created.\n   * @param deleted - Whether or not this application is currently deleted.\n   * @param deletedAtRound - Round when this application was deleted.\n   */\n  constructor({\n    id,\n    params,\n    createdAtRound,\n    deleted,\n    deletedAtRound,\n  }: {\n    id: number | bigint;\n    params: ApplicationParams;\n    createdAtRound?: number | bigint;\n    deleted?: boolean;\n    deletedAtRound?: number | bigint;\n  }) {\n    this.id = ensureBigInt(id);\n    this.params = params;\n    this.createdAtRound =\n      typeof createdAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(createdAtRound);\n    this.deleted = deleted;\n    this.deletedAtRound =\n      typeof deletedAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(deletedAtRound);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Application.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['id', this.id],\n      ['params', this.params.toEncodingData()],\n      ['created-at-round', this.createdAtRound],\n      ['deleted', this.deleted],\n      ['deleted-at-round', this.deletedAtRound],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Application {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Application: ${data}`);\n    }\n    return new Application({\n      id: data.get('id'),\n      params: ApplicationParams.fromEncodingData(\n        data.get('params') ?? new Map()\n      ),\n      createdAtRound: data.get('created-at-round'),\n      deleted: data.get('deleted'),\n      deletedAtRound: data.get('deleted-at-round'),\n    });\n  }\n}\n\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'id', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'schema',\n          valueSchema: ApplicationStateSchema.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'closed-out-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'deleted',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'key-value',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(TealKeyValue.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'opted-in-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The application which this local state is for.\n   */\n  public id: bigint;\n\n  /**\n   * schema.\n   */\n  public schema: ApplicationStateSchema;\n\n  /**\n   * Round when account closed out of the application.\n   */\n  public closedOutAtRound?: bigint;\n\n  /**\n   * Whether or not the application local state is currently deleted from its\n   * account.\n   */\n  public deleted?: boolean;\n\n  /**\n   * storage.\n   */\n  public keyValue?: TealKeyValue[];\n\n  /**\n   * Round when the account opted into the application.\n   */\n  public optedInAtRound?: bigint;\n\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - schema.\n   * @param closedOutAtRound - Round when account closed out of the application.\n   * @param deleted - Whether or not the application local state is currently deleted from its\n   * account.\n   * @param keyValue - storage.\n   * @param optedInAtRound - Round when the account opted into the application.\n   */\n  constructor({\n    id,\n    schema,\n    closedOutAtRound,\n    deleted,\n    keyValue,\n    optedInAtRound,\n  }: {\n    id: number | bigint;\n    schema: ApplicationStateSchema;\n    closedOutAtRound?: number | bigint;\n    deleted?: boolean;\n    keyValue?: TealKeyValue[];\n    optedInAtRound?: number | bigint;\n  }) {\n    this.id = ensureBigInt(id);\n    this.schema = schema;\n    this.closedOutAtRound =\n      typeof closedOutAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(closedOutAtRound);\n    this.deleted = deleted;\n    this.keyValue = keyValue;\n    this.optedInAtRound =\n      typeof optedInAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(optedInAtRound);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationLocalState.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['id', this.id],\n      ['schema', this.schema.toEncodingData()],\n      ['closed-out-at-round', this.closedOutAtRound],\n      ['deleted', this.deleted],\n      [\n        'key-value',\n        typeof this.keyValue !== 'undefined'\n          ? this.keyValue.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['opted-in-at-round', this.optedInAtRound],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationLocalState {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLocalState: ${data}`);\n    }\n    return new ApplicationLocalState({\n      id: data.get('id'),\n      schema: ApplicationStateSchema.fromEncodingData(\n        data.get('schema') ?? new Map()\n      ),\n      closedOutAtRound: data.get('closed-out-at-round'),\n      deleted: data.get('deleted'),\n      keyValue:\n        typeof data.get('key-value') !== 'undefined'\n          ? data\n              .get('key-value')\n              .map((v: unknown) => TealKeyValue.fromEncodingData(v))\n          : undefined,\n      optedInAtRound: data.get('opted-in-at-round'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class ApplicationLocalStatesResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'apps-local-states',\n          valueSchema: new ArraySchema(ApplicationLocalState.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public appsLocalStates: ApplicationLocalState[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `ApplicationLocalStatesResponse` object.\n   * @param appsLocalStates -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    appsLocalStates,\n    currentRound,\n    nextToken,\n  }: {\n    appsLocalStates: ApplicationLocalState[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    this.appsLocalStates = appsLocalStates;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationLocalStatesResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'apps-local-states',\n        this.appsLocalStates.map((v) => v.toEncodingData()),\n      ],\n      ['current-round', this.currentRound],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationLocalStatesResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(\n        `Invalid decoded ApplicationLocalStatesResponse: ${data}`\n      );\n    }\n    return new ApplicationLocalStatesResponse({\n      appsLocalStates: (data.get('apps-local-states') ?? []).map((v: unknown) =>\n        ApplicationLocalState.fromEncodingData(v)\n      ),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationLogData implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'logs',\n          valueSchema: new ArraySchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        { key: 'txid', valueSchema: new StringSchema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Logs for the application being executed by the transaction.\n   */\n  public logs: Uint8Array[];\n\n  /**\n   * Transaction ID\n   */\n  public txid: string;\n\n  /**\n   * Creates a new `ApplicationLogData` object.\n   * @param logs - Logs for the application being executed by the transaction.\n   * @param txid - Transaction ID\n   */\n  constructor({ logs, txid }: { logs: Uint8Array[]; txid: string }) {\n    this.logs = logs;\n    this.txid = txid;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationLogData.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['logs', this.logs],\n      ['txid', this.txid],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationLogData {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLogData: ${data}`);\n    }\n    return new ApplicationLogData({\n      logs: data.get('logs'),\n      txid: data.get('txid'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class ApplicationLogsResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'application-id',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'log-data',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(ApplicationLogData.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (appidx) application index.\n   */\n  public applicationId: bigint;\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  public logData?: ApplicationLogData[];\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `ApplicationLogsResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param currentRound - Round at which the results were computed.\n   * @param logData -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applicationId,\n    currentRound,\n    logData,\n    nextToken,\n  }: {\n    applicationId: number | bigint;\n    currentRound: number | bigint;\n    logData?: ApplicationLogData[];\n    nextToken?: string;\n  }) {\n    this.applicationId = ensureBigInt(applicationId);\n    this.currentRound = ensureBigInt(currentRound);\n    this.logData = logData;\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationLogsResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['application-id', this.applicationId],\n      ['current-round', this.currentRound],\n      [\n        'log-data',\n        typeof this.logData !== 'undefined'\n          ? this.logData.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationLogsResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationLogsResponse: ${data}`);\n    }\n    return new ApplicationLogsResponse({\n      applicationId: data.get('application-id'),\n      currentRound: data.get('current-round'),\n      logData:\n        typeof data.get('log-data') !== 'undefined'\n          ? data\n              .get('log-data')\n              .map((v: unknown) => ApplicationLogData.fromEncodingData(v))\n          : undefined,\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'approval-program',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'clear-state-program',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'creator',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'extra-program-pages',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'global-state',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(TealKeyValue.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'global-state-schema',\n          valueSchema: new OptionalSchema(\n            ApplicationStateSchema.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'local-state-schema',\n          valueSchema: new OptionalSchema(\n            ApplicationStateSchema.encodingSchema\n          ),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * approval program.\n   */\n  public approvalProgram: Uint8Array;\n\n  /**\n   * clear state program.\n   */\n  public clearStateProgram: Uint8Array;\n\n  /**\n   * The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   */\n  public creator?: Address;\n\n  /**\n   * the number of extra program pages available to this app.\n   */\n  public extraProgramPages?: number;\n\n  /**\n   * global state\n   */\n  public globalState?: TealKeyValue[];\n\n  /**\n   * global schema\n   */\n  public globalStateSchema?: ApplicationStateSchema;\n\n  /**\n   * local schema\n   */\n  public localStateSchema?: ApplicationStateSchema;\n\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - approval program.\n   * @param clearStateProgram - clear state program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - the number of extra program pages available to this app.\n   * @param globalState - global state\n   * @param globalStateSchema - global schema\n   * @param localStateSchema - local schema\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema,\n  }: {\n    approvalProgram: string | Uint8Array;\n    clearStateProgram: string | Uint8Array;\n    creator?: Address | string;\n    extraProgramPages?: number | bigint;\n    globalState?: TealKeyValue[];\n    globalStateSchema?: ApplicationStateSchema;\n    localStateSchema?: ApplicationStateSchema;\n  }) {\n    this.approvalProgram =\n      typeof approvalProgram === 'string'\n        ? base64ToBytes(approvalProgram)\n        : approvalProgram;\n    this.clearStateProgram =\n      typeof clearStateProgram === 'string'\n        ? base64ToBytes(clearStateProgram)\n        : clearStateProgram;\n    this.creator =\n      typeof creator === 'string' ? Address.fromString(creator) : creator;\n    this.extraProgramPages =\n      typeof extraProgramPages === 'undefined'\n        ? undefined\n        : ensureSafeInteger(extraProgramPages);\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationParams.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['approval-program', this.approvalProgram],\n      ['clear-state-program', this.clearStateProgram],\n      [\n        'creator',\n        typeof this.creator !== 'undefined'\n          ? this.creator.toString()\n          : undefined,\n      ],\n      ['extra-program-pages', this.extraProgramPages],\n      [\n        'global-state',\n        typeof this.globalState !== 'undefined'\n          ? this.globalState.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      [\n        'global-state-schema',\n        typeof this.globalStateSchema !== 'undefined'\n          ? this.globalStateSchema.toEncodingData()\n          : undefined,\n      ],\n      [\n        'local-state-schema',\n        typeof this.localStateSchema !== 'undefined'\n          ? this.localStateSchema.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationParams {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationParams: ${data}`);\n    }\n    return new ApplicationParams({\n      approvalProgram: data.get('approval-program'),\n      clearStateProgram: data.get('clear-state-program'),\n      creator: data.get('creator'),\n      extraProgramPages: data.get('extra-program-pages'),\n      globalState:\n        typeof data.get('global-state') !== 'undefined'\n          ? data\n              .get('global-state')\n              .map((v: unknown) => TealKeyValue.fromEncodingData(v))\n          : undefined,\n      globalStateSchema:\n        typeof data.get('global-state-schema') !== 'undefined'\n          ? ApplicationStateSchema.fromEncodingData(\n              data.get('global-state-schema')\n            )\n          : undefined,\n      localStateSchema:\n        typeof data.get('local-state-schema') !== 'undefined'\n          ? ApplicationStateSchema.fromEncodingData(\n              data.get('local-state-schema')\n            )\n          : undefined,\n    });\n  }\n}\n\n/**\n *\n */\nexport class ApplicationResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'application',\n          valueSchema: new OptionalSchema(Application.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Application index and its parameters\n   */\n  public application?: Application;\n\n  /**\n   * Creates a new `ApplicationResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param application - Application index and its parameters\n   */\n  constructor({\n    currentRound,\n    application,\n  }: {\n    currentRound: number | bigint;\n    application?: Application;\n  }) {\n    this.currentRound = ensureBigInt(currentRound);\n    this.application = application;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['current-round', this.currentRound],\n      [\n        'application',\n        typeof this.application !== 'undefined'\n          ? this.application.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationResponse: ${data}`);\n    }\n    return new ApplicationResponse({\n      currentRound: data.get('current-round'),\n      application:\n        typeof data.get('application') !== 'undefined'\n          ? Application.fromEncodingData(data.get('application'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'num-byte-slice',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        { key: 'num-uint', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * number of byte slices.\n   */\n  public numByteSlice: number;\n\n  /**\n   * number of uints.\n   */\n  public numUint: number;\n\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numByteSlice - number of byte slices.\n   * @param numUint - number of uints.\n   */\n  constructor({\n    numByteSlice,\n    numUint,\n  }: {\n    numByteSlice: number | bigint;\n    numUint: number | bigint;\n  }) {\n    this.numByteSlice = ensureSafeInteger(numByteSlice);\n    this.numUint = ensureSafeInteger(numUint);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationStateSchema.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['num-byte-slice', this.numByteSlice],\n      ['num-uint', this.numUint],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationStateSchema {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationStateSchema: ${data}`);\n    }\n    return new ApplicationStateSchema({\n      numByteSlice: data.get('num-byte-slice'),\n      numUint: data.get('num-uint'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class ApplicationsResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'applications',\n          valueSchema: new ArraySchema(Application.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public applications: Application[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `ApplicationsResponse` object.\n   * @param applications -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applications,\n    currentRound,\n    nextToken,\n  }: {\n    applications: Application[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    this.applications = applications;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ApplicationsResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['applications', this.applications.map((v) => v.toEncodingData())],\n      ['current-round', this.currentRound],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ApplicationsResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ApplicationsResponse: ${data}`);\n    }\n    return new ApplicationsResponse({\n      applications: (data.get('applications') ?? []).map((v: unknown) =>\n        Application.fromEncodingData(v)\n      ),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'index', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'params',\n          valueSchema: AssetParams.encodingSchema,\n          omitEmpty: true,\n        },\n        {\n          key: 'created-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'deleted',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'destroyed-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * unique asset identifier\n   */\n  public index: bigint;\n\n  /**\n   * AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  public params: AssetParams;\n\n  /**\n   * Round during which this asset was created.\n   */\n  public createdAtRound?: bigint;\n\n  /**\n   * Whether or not this asset is currently deleted.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round during which this asset was destroyed.\n   */\n  public destroyedAtRound?: bigint;\n\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   * @param createdAtRound - Round during which this asset was created.\n   * @param deleted - Whether or not this asset is currently deleted.\n   * @param destroyedAtRound - Round during which this asset was destroyed.\n   */\n  constructor({\n    index,\n    params,\n    createdAtRound,\n    deleted,\n    destroyedAtRound,\n  }: {\n    index: number | bigint;\n    params: AssetParams;\n    createdAtRound?: number | bigint;\n    deleted?: boolean;\n    destroyedAtRound?: number | bigint;\n  }) {\n    this.index = ensureBigInt(index);\n    this.params = params;\n    this.createdAtRound =\n      typeof createdAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(createdAtRound);\n    this.deleted = deleted;\n    this.destroyedAtRound =\n      typeof destroyedAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(destroyedAtRound);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Asset.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['index', this.index],\n      ['params', this.params.toEncodingData()],\n      ['created-at-round', this.createdAtRound],\n      ['deleted', this.deleted],\n      ['destroyed-at-round', this.destroyedAtRound],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Asset {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Asset: ${data}`);\n    }\n    return new Asset({\n      index: data.get('index'),\n      params: AssetParams.fromEncodingData(data.get('params') ?? new Map()),\n      createdAtRound: data.get('created-at-round'),\n      deleted: data.get('deleted'),\n      destroyedAtRound: data.get('destroyed-at-round'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class AssetBalancesResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'balances',\n          valueSchema: new ArraySchema(MiniAssetHolding.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public balances: MiniAssetHolding[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AssetBalancesResponse` object.\n   * @param balances -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    balances,\n    currentRound,\n    nextToken,\n  }: {\n    balances: MiniAssetHolding[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    this.balances = balances;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AssetBalancesResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['balances', this.balances.map((v) => v.toEncodingData())],\n      ['current-round', this.currentRound],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AssetBalancesResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetBalancesResponse: ${data}`);\n    }\n    return new AssetBalancesResponse({\n      balances: (data.get('balances') ?? []).map((v: unknown) =>\n        MiniAssetHolding.fromEncodingData(v)\n      ),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'asset-id', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'is-frozen', valueSchema: new BooleanSchema(), omitEmpty: true },\n        {\n          key: 'deleted',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'opted-in-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'opted-out-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * number of units held.\n   */\n  public amount: bigint;\n\n  /**\n   * Asset ID of the holding.\n   */\n  public assetId: bigint;\n\n  /**\n   * whether or not the holding is frozen.\n   */\n  public isFrozen: boolean;\n\n  /**\n   * Whether or not the asset holding is currently deleted from its account.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round during which the account opted into this asset holding.\n   */\n  public optedInAtRound?: bigint;\n\n  /**\n   * Round during which the account opted out of this asset holding.\n   */\n  public optedOutAtRound?: bigint;\n\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - whether or not the holding is frozen.\n   * @param deleted - Whether or not the asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into this asset holding.\n   * @param optedOutAtRound - Round during which the account opted out of this asset holding.\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound,\n  }: {\n    amount: number | bigint;\n    assetId: number | bigint;\n    isFrozen: boolean;\n    deleted?: boolean;\n    optedInAtRound?: number | bigint;\n    optedOutAtRound?: number | bigint;\n  }) {\n    this.amount = ensureBigInt(amount);\n    this.assetId = ensureBigInt(assetId);\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound =\n      typeof optedInAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(optedInAtRound);\n    this.optedOutAtRound =\n      typeof optedOutAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(optedOutAtRound);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AssetHolding.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['amount', this.amount],\n      ['asset-id', this.assetId],\n      ['is-frozen', this.isFrozen],\n      ['deleted', this.deleted],\n      ['opted-in-at-round', this.optedInAtRound],\n      ['opted-out-at-round', this.optedOutAtRound],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AssetHolding {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHolding: ${data}`);\n    }\n    return new AssetHolding({\n      amount: data.get('amount'),\n      assetId: data.get('asset-id'),\n      isFrozen: data.get('is-frozen'),\n      deleted: data.get('deleted'),\n      optedInAtRound: data.get('opted-in-at-round'),\n      optedOutAtRound: data.get('opted-out-at-round'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class AssetHoldingsResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'assets',\n          valueSchema: new ArraySchema(AssetHolding.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public assets: AssetHolding[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AssetHoldingsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken,\n  }: {\n    assets: AssetHolding[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    this.assets = assets;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AssetHoldingsResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['assets', this.assets.map((v) => v.toEncodingData())],\n      ['current-round', this.currentRound],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AssetHoldingsResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetHoldingsResponse: ${data}`);\n    }\n    return new AssetHoldingsResponse({\n      assets: (data.get('assets') ?? []).map((v: unknown) =>\n        AssetHolding.fromEncodingData(v)\n      ),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'creator', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'decimals', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'total', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'clawback',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'default-frozen',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'freeze',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'manager',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'metadata-hash',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'name',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'name-b64',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'reserve',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'unit-name',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'unit-name-b64',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'url',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'url-b64',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   */\n  public creator: string;\n\n  /**\n   * The number of digits to use after the decimal point when displaying this asset.\n   * If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths.\n   * If 2, the base unit of the asset is in hundredths, and so on. This value must be\n   * between 0 and 19 (inclusive).\n   */\n  public decimals: number;\n\n  /**\n   * The total number of units of this asset.\n   */\n  public total: bigint;\n\n  /**\n   * Address of account used to clawback holdings of this asset. If empty, clawback\n   * is not permitted.\n   */\n  public clawback?: string;\n\n  /**\n   * Whether holdings of this asset are frozen by default.\n   */\n  public defaultFrozen?: boolean;\n\n  /**\n   * Address of account used to freeze holdings of this asset. If empty, freezing is\n   * not permitted.\n   */\n  public freeze?: string;\n\n  /**\n   * Address of account used to manage the keys of this asset and to destroy it.\n   */\n  public manager?: string;\n\n  /**\n   * A commitment to some unspecified asset metadata. The format of this metadata is\n   * up to the application.\n   */\n  public metadataHash?: Uint8Array;\n\n  /**\n   * Name of this asset, as supplied by the creator. Included only when the asset\n   * name is composed of printable utf-8 characters.\n   */\n  public name?: string;\n\n  /**\n   * Base64 encoded name of this asset, as supplied by the creator.\n   */\n  public nameB64?: Uint8Array;\n\n  /**\n   * Address of account holding reserve (non-minted) units of this asset.\n   */\n  public reserve?: string;\n\n  /**\n   * Name of a unit of this asset, as supplied by the creator. Included only when the\n   * name of a unit of this asset is composed of printable utf-8 characters.\n   */\n  public unitName?: string;\n\n  /**\n   * Base64 encoded name of a unit of this asset, as supplied by the creator.\n   */\n  public unitNameB64?: Uint8Array;\n\n  /**\n   * URL where more information about the asset can be retrieved. Included only when\n   * the URL is composed of printable utf-8 characters.\n   */\n  public url?: string;\n\n  /**\n   * Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  public urlB64?: Uint8Array;\n\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - The number of digits to use after the decimal point when displaying this asset.\n   * If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths.\n   * If 2, the base unit of the asset is in hundredths, and so on. This value must be\n   * between 0 and 19 (inclusive).\n   * @param total - The total number of units of this asset.\n   * @param clawback - Address of account used to clawback holdings of this asset. If empty, clawback\n   * is not permitted.\n   * @param defaultFrozen - Whether holdings of this asset are frozen by default.\n   * @param freeze - Address of account used to freeze holdings of this asset. If empty, freezing is\n   * not permitted.\n   * @param manager - Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - A commitment to some unspecified asset metadata. The format of this metadata is\n   * up to the application.\n   * @param name - Name of this asset, as supplied by the creator. Included only when the asset\n   * name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - Name of a unit of this asset, as supplied by the creator. Included only when the\n   * name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - URL where more information about the asset can be retrieved. Included only when\n   * the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64,\n  }: {\n    creator: string;\n    decimals: number | bigint;\n    total: number | bigint;\n    clawback?: string;\n    defaultFrozen?: boolean;\n    freeze?: string;\n    manager?: string;\n    metadataHash?: string | Uint8Array;\n    name?: string;\n    nameB64?: string | Uint8Array;\n    reserve?: string;\n    unitName?: string;\n    unitNameB64?: string | Uint8Array;\n    url?: string;\n    urlB64?: string | Uint8Array;\n  }) {\n    this.creator = creator;\n    this.decimals = ensureSafeInteger(decimals);\n    this.total = ensureBigInt(total);\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash =\n      typeof metadataHash === 'string'\n        ? base64ToBytes(metadataHash)\n        : metadataHash;\n    this.name = name;\n    this.nameB64 =\n      typeof nameB64 === 'string' ? base64ToBytes(nameB64) : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 =\n      typeof unitNameB64 === 'string'\n        ? base64ToBytes(unitNameB64)\n        : unitNameB64;\n    this.url = url;\n    this.urlB64 = typeof urlB64 === 'string' ? base64ToBytes(urlB64) : urlB64;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AssetParams.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['creator', this.creator],\n      ['decimals', this.decimals],\n      ['total', this.total],\n      ['clawback', this.clawback],\n      ['default-frozen', this.defaultFrozen],\n      ['freeze', this.freeze],\n      ['manager', this.manager],\n      ['metadata-hash', this.metadataHash],\n      ['name', this.name],\n      ['name-b64', this.nameB64],\n      ['reserve', this.reserve],\n      ['unit-name', this.unitName],\n      ['unit-name-b64', this.unitNameB64],\n      ['url', this.url],\n      ['url-b64', this.urlB64],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AssetParams {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetParams: ${data}`);\n    }\n    return new AssetParams({\n      creator: data.get('creator'),\n      decimals: data.get('decimals'),\n      total: data.get('total'),\n      clawback: data.get('clawback'),\n      defaultFrozen: data.get('default-frozen'),\n      freeze: data.get('freeze'),\n      manager: data.get('manager'),\n      metadataHash: data.get('metadata-hash'),\n      name: data.get('name'),\n      nameB64: data.get('name-b64'),\n      reserve: data.get('reserve'),\n      unitName: data.get('unit-name'),\n      unitNameB64: data.get('unit-name-b64'),\n      url: data.get('url'),\n      urlB64: data.get('url-b64'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class AssetResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'asset', valueSchema: Asset.encodingSchema, omitEmpty: true },\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Specifies both the unique identifier and the parameters for an asset\n   */\n  public asset: Asset;\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Creates a new `AssetResponse` object.\n   * @param asset - Specifies both the unique identifier and the parameters for an asset\n   * @param currentRound - Round at which the results were computed.\n   */\n  constructor({\n    asset,\n    currentRound,\n  }: {\n    asset: Asset;\n    currentRound: number | bigint;\n  }) {\n    this.asset = asset;\n    this.currentRound = ensureBigInt(currentRound);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AssetResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['asset', this.asset.toEncodingData()],\n      ['current-round', this.currentRound],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AssetResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetResponse: ${data}`);\n    }\n    return new AssetResponse({\n      asset: Asset.fromEncodingData(data.get('asset') ?? new Map()),\n      currentRound: data.get('current-round'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class AssetsResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'assets',\n          valueSchema: new ArraySchema(Asset.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public assets: Asset[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `AssetsResponse` object.\n   * @param assets -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken,\n  }: {\n    assets: Asset[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    this.assets = assets;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return AssetsResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['assets', this.assets.map((v) => v.toEncodingData())],\n      ['current-round', this.currentRound],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): AssetsResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded AssetsResponse: ${data}`);\n    }\n    return new AssetsResponse({\n      assets: (data.get('assets') ?? []).map((v: unknown) =>\n        Asset.fromEncodingData(v)\n      ),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n\n/**\n * Block information.\n * Definition:\n * data/bookkeeping/block.go : Block\n */\nexport class Block implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'genesis-hash',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        { key: 'genesis-id', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'previous-block-hash',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'seed', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        { key: 'timestamp', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'transactions-root',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'transactions-root-sha256',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'bonus',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'fees-collected',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'participation-updates',\n          valueSchema: new OptionalSchema(ParticipationUpdates.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'proposer',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'proposer-payout',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'rewards',\n          valueSchema: new OptionalSchema(BlockRewards.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'state-proof-tracking',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(StateProofTracking.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'transactions',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(Transaction.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'txn-counter',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-state',\n          valueSchema: new OptionalSchema(BlockUpgradeState.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-vote',\n          valueSchema: new OptionalSchema(BlockUpgradeVote.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (gh) hash to which this block belongs.\n   */\n  public genesisHash: Uint8Array;\n\n  /**\n   * (gen) ID to which this block belongs.\n   */\n  public genesisId: string;\n\n  /**\n   * (prev) Previous block hash.\n   */\n  public previousBlockHash: Uint8Array;\n\n  /**\n   * (rnd) Current round on which this block was appended to the chain.\n   */\n  public round: bigint;\n\n  /**\n   * (seed) Sortition seed.\n   */\n  public seed: Uint8Array;\n\n  /**\n   * (ts) Block creation timestamp in seconds since eposh\n   */\n  public timestamp: number;\n\n  /**\n   * (txn) TransactionsRoot authenticates the set of transactions appearing in the\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\n   * transactions themselves. Two blocks with the same transactions but in a\n   * different order and with different signatures will have the same TxnRoot.\n   */\n  public transactionsRoot: Uint8Array;\n\n  /**\n   * (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n   * the default SHA512_256. This commitment can be used on environments where only\n   * the SHA256 function exists.\n   */\n  public transactionsRootSha256: Uint8Array;\n\n  /**\n   * the potential bonus payout for this block.\n   */\n  public bonus?: number;\n\n  /**\n   * the sum of all fees paid by transactions in this block.\n   */\n  public feesCollected?: number;\n\n  /**\n   * Participation account data that needs to be checked/acted on by the network.\n   */\n  public participationUpdates?: ParticipationUpdates;\n\n  /**\n   * the proposer of this block.\n   */\n  public proposer?: Address;\n\n  /**\n   * the actual amount transferred to the proposer from the fee sink.\n   */\n  public proposerPayout?: number;\n\n  /**\n   * Fields relating to rewards,\n   */\n  public rewards?: BlockRewards;\n\n  /**\n   * Tracks the status of state proofs.\n   */\n  public stateProofTracking?: StateProofTracking[];\n\n  /**\n   * (txns) list of transactions corresponding to a given round.\n   */\n  public transactions?: Transaction[];\n\n  /**\n   * (tc) TxnCounter counts the number of transactions committed in the ledger, from\n   * the time at which support for this feature was introduced.\n   * Specifically, TxnCounter is the number of the next transaction that will be\n   * committed after this block. It is 0 when no transactions have ever been\n   * committed (since TxnCounter started being supported).\n   */\n  public txnCounter?: number;\n\n  /**\n   * Fields relating to a protocol upgrade.\n   */\n  public upgradeState?: BlockUpgradeState;\n\n  /**\n   * Fields relating to voting for a protocol upgrade.\n   */\n  public upgradeVote?: BlockUpgradeVote;\n\n  /**\n   * Creates a new `Block` object.\n   * @param genesisHash - (gh) hash to which this block belongs.\n   * @param genesisId - (gen) ID to which this block belongs.\n   * @param previousBlockHash - (prev) Previous block hash.\n   * @param round - (rnd) Current round on which this block was appended to the chain.\n   * @param seed - (seed) Sortition seed.\n   * @param timestamp - (ts) Block creation timestamp in seconds since eposh\n   * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\n   * transactions themselves. Two blocks with the same transactions but in a\n   * different order and with different signatures will have the same TxnRoot.\n   * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n   * the default SHA512_256. This commitment can be used on environments where only\n   * the SHA256 function exists.\n   * @param bonus - the potential bonus payout for this block.\n   * @param feesCollected - the sum of all fees paid by transactions in this block.\n   * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\n   * @param proposer - the proposer of this block.\n   * @param proposerPayout - the actual amount transferred to the proposer from the fee sink.\n   * @param rewards - Fields relating to rewards,\n   * @param stateProofTracking - Tracks the status of state proofs.\n   * @param transactions - (txns) list of transactions corresponding to a given round.\n   * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\n   * the time at which support for this feature was introduced.\n   * Specifically, TxnCounter is the number of the next transaction that will be\n   * committed after this block. It is 0 when no transactions have ever been\n   * committed (since TxnCounter started being supported).\n   * @param upgradeState - Fields relating to a protocol upgrade.\n   * @param upgradeVote - Fields relating to voting for a protocol upgrade.\n   */\n  constructor({\n    genesisHash,\n    genesisId,\n    previousBlockHash,\n    round,\n    seed,\n    timestamp,\n    transactionsRoot,\n    transactionsRootSha256,\n    bonus,\n    feesCollected,\n    participationUpdates,\n    proposer,\n    proposerPayout,\n    rewards,\n    stateProofTracking,\n    transactions,\n    txnCounter,\n    upgradeState,\n    upgradeVote,\n  }: {\n    genesisHash: string | Uint8Array;\n    genesisId: string;\n    previousBlockHash: string | Uint8Array;\n    round: number | bigint;\n    seed: string | Uint8Array;\n    timestamp: number | bigint;\n    transactionsRoot: string | Uint8Array;\n    transactionsRootSha256: string | Uint8Array;\n    bonus?: number | bigint;\n    feesCollected?: number | bigint;\n    participationUpdates?: ParticipationUpdates;\n    proposer?: Address | string;\n    proposerPayout?: number | bigint;\n    rewards?: BlockRewards;\n    stateProofTracking?: StateProofTracking[];\n    transactions?: Transaction[];\n    txnCounter?: number | bigint;\n    upgradeState?: BlockUpgradeState;\n    upgradeVote?: BlockUpgradeVote;\n  }) {\n    this.genesisHash =\n      typeof genesisHash === 'string'\n        ? base64ToBytes(genesisHash)\n        : genesisHash;\n    this.genesisId = genesisId;\n    this.previousBlockHash =\n      typeof previousBlockHash === 'string'\n        ? base64ToBytes(previousBlockHash)\n        : previousBlockHash;\n    this.round = ensureBigInt(round);\n    this.seed = typeof seed === 'string' ? base64ToBytes(seed) : seed;\n    this.timestamp = ensureSafeInteger(timestamp);\n    this.transactionsRoot =\n      typeof transactionsRoot === 'string'\n        ? base64ToBytes(transactionsRoot)\n        : transactionsRoot;\n    this.transactionsRootSha256 =\n      typeof transactionsRootSha256 === 'string'\n        ? base64ToBytes(transactionsRootSha256)\n        : transactionsRootSha256;\n    this.bonus =\n      typeof bonus === 'undefined' ? undefined : ensureSafeInteger(bonus);\n    this.feesCollected =\n      typeof feesCollected === 'undefined'\n        ? undefined\n        : ensureSafeInteger(feesCollected);\n    this.participationUpdates = participationUpdates;\n    this.proposer =\n      typeof proposer === 'string' ? Address.fromString(proposer) : proposer;\n    this.proposerPayout =\n      typeof proposerPayout === 'undefined'\n        ? undefined\n        : ensureSafeInteger(proposerPayout);\n    this.rewards = rewards;\n    this.stateProofTracking = stateProofTracking;\n    this.transactions = transactions;\n    this.txnCounter =\n      typeof txnCounter === 'undefined'\n        ? undefined\n        : ensureSafeInteger(txnCounter);\n    this.upgradeState = upgradeState;\n    this.upgradeVote = upgradeVote;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Block.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['genesis-hash', this.genesisHash],\n      ['genesis-id', this.genesisId],\n      ['previous-block-hash', this.previousBlockHash],\n      ['round', this.round],\n      ['seed', this.seed],\n      ['timestamp', this.timestamp],\n      ['transactions-root', this.transactionsRoot],\n      ['transactions-root-sha256', this.transactionsRootSha256],\n      ['bonus', this.bonus],\n      ['fees-collected', this.feesCollected],\n      [\n        'participation-updates',\n        typeof this.participationUpdates !== 'undefined'\n          ? this.participationUpdates.toEncodingData()\n          : undefined,\n      ],\n      [\n        'proposer',\n        typeof this.proposer !== 'undefined'\n          ? this.proposer.toString()\n          : undefined,\n      ],\n      ['proposer-payout', this.proposerPayout],\n      [\n        'rewards',\n        typeof this.rewards !== 'undefined'\n          ? this.rewards.toEncodingData()\n          : undefined,\n      ],\n      [\n        'state-proof-tracking',\n        typeof this.stateProofTracking !== 'undefined'\n          ? this.stateProofTracking.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      [\n        'transactions',\n        typeof this.transactions !== 'undefined'\n          ? this.transactions.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['txn-counter', this.txnCounter],\n      [\n        'upgrade-state',\n        typeof this.upgradeState !== 'undefined'\n          ? this.upgradeState.toEncodingData()\n          : undefined,\n      ],\n      [\n        'upgrade-vote',\n        typeof this.upgradeVote !== 'undefined'\n          ? this.upgradeVote.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Block {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Block: ${data}`);\n    }\n    return new Block({\n      genesisHash: data.get('genesis-hash'),\n      genesisId: data.get('genesis-id'),\n      previousBlockHash: data.get('previous-block-hash'),\n      round: data.get('round'),\n      seed: data.get('seed'),\n      timestamp: data.get('timestamp'),\n      transactionsRoot: data.get('transactions-root'),\n      transactionsRootSha256: data.get('transactions-root-sha256'),\n      bonus: data.get('bonus'),\n      feesCollected: data.get('fees-collected'),\n      participationUpdates:\n        typeof data.get('participation-updates') !== 'undefined'\n          ? ParticipationUpdates.fromEncodingData(\n              data.get('participation-updates')\n            )\n          : undefined,\n      proposer: data.get('proposer'),\n      proposerPayout: data.get('proposer-payout'),\n      rewards:\n        typeof data.get('rewards') !== 'undefined'\n          ? BlockRewards.fromEncodingData(data.get('rewards'))\n          : undefined,\n      stateProofTracking:\n        typeof data.get('state-proof-tracking') !== 'undefined'\n          ? data\n              .get('state-proof-tracking')\n              .map((v: unknown) => StateProofTracking.fromEncodingData(v))\n          : undefined,\n      transactions:\n        typeof data.get('transactions') !== 'undefined'\n          ? data\n              .get('transactions')\n              .map((v: unknown) => Transaction.fromEncodingData(v))\n          : undefined,\n      txnCounter: data.get('txn-counter'),\n      upgradeState:\n        typeof data.get('upgrade-state') !== 'undefined'\n          ? BlockUpgradeState.fromEncodingData(data.get('upgrade-state'))\n          : undefined,\n      upgradeVote:\n        typeof data.get('upgrade-vote') !== 'undefined'\n          ? BlockUpgradeVote.fromEncodingData(data.get('upgrade-vote'))\n          : undefined,\n    });\n  }\n}\n\n/**\n *\n */\nexport class BlockHeadersResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'blocks',\n          valueSchema: new ArraySchema(Block.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public blocks: Block[];\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `BlockHeadersResponse` object.\n   * @param blocks -\n   * @param currentRound - Round at which the results were computed.\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    blocks,\n    currentRound,\n    nextToken,\n  }: {\n    blocks: Block[];\n    currentRound: number | bigint;\n    nextToken?: string;\n  }) {\n    this.blocks = blocks;\n    this.currentRound = ensureBigInt(currentRound);\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BlockHeadersResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['blocks', this.blocks.map((v) => v.toEncodingData())],\n      ['current-round', this.currentRound],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): BlockHeadersResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockHeadersResponse: ${data}`);\n    }\n    return new BlockHeadersResponse({\n      blocks: (data.get('blocks') ?? []).map((v: unknown) =>\n        Block.fromEncodingData(v)\n      ),\n      currentRound: data.get('current-round'),\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n\n/**\n * Fields relating to rewards,\n */\nexport class BlockRewards implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'fee-sink', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'rewards-calculation-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'rewards-level',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'rewards-pool',\n          valueSchema: new StringSchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'rewards-rate',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'rewards-residue',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (fees) accepts transaction fees, it can only spend to the incentive pool.\n   */\n  public feeSink: string;\n\n  /**\n   * (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n   * MicroAlgos for every reward unit in the next round.\n   */\n  public rewardsCalculationRound: bigint;\n\n  /**\n   * (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n   * of MicroAlgos since genesis.\n   */\n  public rewardsLevel: bigint;\n\n  /**\n   * (rwd) accepts periodic injections from the fee-sink and continually\n   * redistributes them as rewards.\n   */\n  public rewardsPool: string;\n\n  /**\n   * (rate) Number of new MicroAlgos added to the participation stake from rewards at\n   * the next round.\n   */\n  public rewardsRate: bigint;\n\n  /**\n   * (frac) Number of leftover MicroAlgos after the distribution of\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n   */\n  public rewardsResidue: bigint;\n\n  /**\n   * Creates a new `BlockRewards` object.\n   * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\n   * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n   * MicroAlgos for every reward unit in the next round.\n   * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n   * of MicroAlgos since genesis.\n   * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\n   * redistributes them as rewards.\n   * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\n   * the next round.\n   * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n   */\n  constructor({\n    feeSink,\n    rewardsCalculationRound,\n    rewardsLevel,\n    rewardsPool,\n    rewardsRate,\n    rewardsResidue,\n  }: {\n    feeSink: string;\n    rewardsCalculationRound: number | bigint;\n    rewardsLevel: number | bigint;\n    rewardsPool: string;\n    rewardsRate: number | bigint;\n    rewardsResidue: number | bigint;\n  }) {\n    this.feeSink = feeSink;\n    this.rewardsCalculationRound = ensureBigInt(rewardsCalculationRound);\n    this.rewardsLevel = ensureBigInt(rewardsLevel);\n    this.rewardsPool = rewardsPool;\n    this.rewardsRate = ensureBigInt(rewardsRate);\n    this.rewardsResidue = ensureBigInt(rewardsResidue);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BlockRewards.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['fee-sink', this.feeSink],\n      ['rewards-calculation-round', this.rewardsCalculationRound],\n      ['rewards-level', this.rewardsLevel],\n      ['rewards-pool', this.rewardsPool],\n      ['rewards-rate', this.rewardsRate],\n      ['rewards-residue', this.rewardsResidue],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): BlockRewards {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockRewards: ${data}`);\n    }\n    return new BlockRewards({\n      feeSink: data.get('fee-sink'),\n      rewardsCalculationRound: data.get('rewards-calculation-round'),\n      rewardsLevel: data.get('rewards-level'),\n      rewardsPool: data.get('rewards-pool'),\n      rewardsRate: data.get('rewards-rate'),\n      rewardsResidue: data.get('rewards-residue'),\n    });\n  }\n}\n\n/**\n * Fields relating to a protocol upgrade.\n */\nexport class BlockUpgradeState implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'current-protocol',\n          valueSchema: new StringSchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-protocol',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-protocol-approvals',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-protocol-switch-on',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-protocol-vote-before',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (proto) The current protocol version.\n   */\n  public currentProtocol: string;\n\n  /**\n   * (nextproto) The next proposed protocol version.\n   */\n  public nextProtocol?: string;\n\n  /**\n   * (nextyes) Number of blocks which approved the protocol upgrade.\n   */\n  public nextProtocolApprovals?: number;\n\n  /**\n   * (nextswitch) Round on which the protocol upgrade will take effect.\n   */\n  public nextProtocolSwitchOn?: bigint;\n\n  /**\n   * (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n   * after this round).\n   */\n  public nextProtocolVoteBefore?: bigint;\n\n  /**\n   * Creates a new `BlockUpgradeState` object.\n   * @param currentProtocol - (proto) The current protocol version.\n   * @param nextProtocol - (nextproto) The next proposed protocol version.\n   * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\n   * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\n   * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n   * after this round).\n   */\n  constructor({\n    currentProtocol,\n    nextProtocol,\n    nextProtocolApprovals,\n    nextProtocolSwitchOn,\n    nextProtocolVoteBefore,\n  }: {\n    currentProtocol: string;\n    nextProtocol?: string;\n    nextProtocolApprovals?: number | bigint;\n    nextProtocolSwitchOn?: number | bigint;\n    nextProtocolVoteBefore?: number | bigint;\n  }) {\n    this.currentProtocol = currentProtocol;\n    this.nextProtocol = nextProtocol;\n    this.nextProtocolApprovals =\n      typeof nextProtocolApprovals === 'undefined'\n        ? undefined\n        : ensureSafeInteger(nextProtocolApprovals);\n    this.nextProtocolSwitchOn =\n      typeof nextProtocolSwitchOn === 'undefined'\n        ? undefined\n        : ensureBigInt(nextProtocolSwitchOn);\n    this.nextProtocolVoteBefore =\n      typeof nextProtocolVoteBefore === 'undefined'\n        ? undefined\n        : ensureBigInt(nextProtocolVoteBefore);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BlockUpgradeState.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['current-protocol', this.currentProtocol],\n      ['next-protocol', this.nextProtocol],\n      ['next-protocol-approvals', this.nextProtocolApprovals],\n      ['next-protocol-switch-on', this.nextProtocolSwitchOn],\n      ['next-protocol-vote-before', this.nextProtocolVoteBefore],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): BlockUpgradeState {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockUpgradeState: ${data}`);\n    }\n    return new BlockUpgradeState({\n      currentProtocol: data.get('current-protocol'),\n      nextProtocol: data.get('next-protocol'),\n      nextProtocolApprovals: data.get('next-protocol-approvals'),\n      nextProtocolSwitchOn: data.get('next-protocol-switch-on'),\n      nextProtocolVoteBefore: data.get('next-protocol-vote-before'),\n    });\n  }\n}\n\n/**\n * Fields relating to voting for a protocol upgrade.\n */\nexport class BlockUpgradeVote implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'upgrade-approve',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-delay',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'upgrade-propose',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (upgradeyes) Indicates a yes vote for the current proposal.\n   */\n  public upgradeApprove?: boolean;\n\n  /**\n   * (upgradedelay) Indicates the time between acceptance and execution.\n   */\n  public upgradeDelay?: bigint;\n\n  /**\n   * (upgradeprop) Indicates a proposed upgrade.\n   */\n  public upgradePropose?: string;\n\n  /**\n   * Creates a new `BlockUpgradeVote` object.\n   * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\n   * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\n   * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\n   */\n  constructor({\n    upgradeApprove,\n    upgradeDelay,\n    upgradePropose,\n  }: {\n    upgradeApprove?: boolean;\n    upgradeDelay?: number | bigint;\n    upgradePropose?: string;\n  }) {\n    this.upgradeApprove = upgradeApprove;\n    this.upgradeDelay =\n      typeof upgradeDelay === 'undefined'\n        ? undefined\n        : ensureBigInt(upgradeDelay);\n    this.upgradePropose = upgradePropose;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BlockUpgradeVote.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['upgrade-approve', this.upgradeApprove],\n      ['upgrade-delay', this.upgradeDelay],\n      ['upgrade-propose', this.upgradePropose],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): BlockUpgradeVote {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BlockUpgradeVote: ${data}`);\n    }\n    return new BlockUpgradeVote({\n      upgradeApprove: data.get('upgrade-approve'),\n      upgradeDelay: data.get('upgrade-delay'),\n      upgradePropose: data.get('upgrade-propose'),\n    });\n  }\n}\n\n/**\n * Box name and its content.\n */\nexport class Box implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'name', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'value', valueSchema: new ByteArraySchema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (name) box name, base64 encoded\n   */\n  public name: Uint8Array;\n\n  /**\n   * The round for which this information is relevant\n   */\n  public round: bigint;\n\n  /**\n   * (value) box value, base64 encoded.\n   */\n  public value: Uint8Array;\n\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param round - The round for which this information is relevant\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor({\n    name,\n    round,\n    value,\n  }: {\n    name: string | Uint8Array;\n    round: number | bigint;\n    value: string | Uint8Array;\n  }) {\n    this.name = typeof name === 'string' ? base64ToBytes(name) : name;\n    this.round = ensureBigInt(round);\n    this.value = typeof value === 'string' ? base64ToBytes(value) : value;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Box.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['name', this.name],\n      ['round', this.round],\n      ['value', this.value],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Box {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Box: ${data}`);\n    }\n    return new Box({\n      name: data.get('name'),\n      round: data.get('round'),\n      value: data.get('value'),\n    });\n  }\n}\n\n/**\n * Box descriptor describes an app box without a value.\n */\nexport class BoxDescriptor implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'name',\n        valueSchema: new ByteArraySchema(),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Base64 encoded box name\n   */\n  public name: Uint8Array;\n\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor({ name }: { name: string | Uint8Array }) {\n    this.name = typeof name === 'string' ? base64ToBytes(name) : name;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BoxDescriptor.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([['name', this.name]]);\n  }\n\n  static fromEncodingData(data: unknown): BoxDescriptor {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BoxDescriptor: ${data}`);\n    }\n    return new BoxDescriptor({\n      name: data.get('name'),\n    });\n  }\n}\n\n/**\n * Box names of an application\n */\nexport class BoxesResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'application-id',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'boxes',\n          valueSchema: new ArraySchema(BoxDescriptor.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (appidx) application index.\n   */\n  public applicationId: bigint;\n\n  public boxes: BoxDescriptor[];\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param applicationId - (appidx) application index.\n   * @param boxes -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    applicationId,\n    boxes,\n    nextToken,\n  }: {\n    applicationId: number | bigint;\n    boxes: BoxDescriptor[];\n    nextToken?: string;\n  }) {\n    this.applicationId = ensureBigInt(applicationId);\n    this.boxes = boxes;\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return BoxesResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['application-id', this.applicationId],\n      ['boxes', this.boxes.map((v) => v.toEncodingData())],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): BoxesResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded BoxesResponse: ${data}`);\n    }\n    return new BoxesResponse({\n      applicationId: data.get('application-id'),\n      boxes: (data.get('boxes') ?? []).map((v: unknown) =>\n        BoxDescriptor.fromEncodingData(v)\n      ),\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n\n/**\n * Response for errors\n */\nexport class ErrorResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'message', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'data',\n          valueSchema: new OptionalSchema(UntypedValue.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public message: string;\n\n  public data?: UntypedValue;\n\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor({ message, data }: { message: string; data?: UntypedValue }) {\n    this.message = message;\n    this.data = data;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ErrorResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['message', this.message],\n      [\n        'data',\n        typeof this.data !== 'undefined'\n          ? this.data.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ErrorResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ErrorResponse: ${data}`);\n    }\n    return new ErrorResponse({\n      message: data.get('message'),\n      data:\n        typeof data.get('data') !== 'undefined'\n          ? UntypedValue.fromEncodingData(data.get('data'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'action', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'bytes',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'uint',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (at) delta action.\n   */\n  public action: number;\n\n  /**\n   * (bs) bytes value.\n   */\n  public bytes?: string;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint?: bigint;\n\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    action,\n    bytes,\n    uint,\n  }: {\n    action: number | bigint;\n    bytes?: string;\n    uint?: number | bigint;\n  }) {\n    this.action = ensureSafeInteger(action);\n    this.bytes = bytes;\n    this.uint = typeof uint === 'undefined' ? undefined : ensureBigInt(uint);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return EvalDelta.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['action', this.action],\n      ['bytes', this.bytes],\n      ['uint', this.uint],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): EvalDelta {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded EvalDelta: ${data}`);\n    }\n    return new EvalDelta({\n      action: data.get('action'),\n      bytes: data.get('bytes'),\n      uint: data.get('uint'),\n    });\n  }\n}\n\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'key', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'value', valueSchema: EvalDelta.encodingSchema, omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public key: string;\n\n  /**\n   * Represents a TEAL value delta.\n   */\n  public value: EvalDelta;\n\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor({ key, value }: { key: string; value: EvalDelta }) {\n    this.key = key;\n    this.value = value;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return EvalDeltaKeyValue.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['key', this.key],\n      ['value', this.value.toEncodingData()],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): EvalDeltaKeyValue {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded EvalDeltaKeyValue: ${data}`);\n    }\n    return new EvalDeltaKeyValue({\n      key: data.get('key'),\n      value: EvalDelta.fromEncodingData(data.get('value') ?? new Map()),\n    });\n  }\n}\n\nexport class HashFactory implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries({\n        key: 'hash-type',\n        valueSchema: new OptionalSchema(new Uint64Schema()),\n        omitEmpty: true,\n      });\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (t)\n   */\n  public hashType?: number;\n\n  /**\n   * Creates a new `HashFactory` object.\n   * @param hashType - (t)\n   */\n  constructor({ hashType }: { hashType?: number | bigint }) {\n    this.hashType =\n      typeof hashType === 'undefined' ? undefined : ensureSafeInteger(hashType);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return HashFactory.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([['hash-type', this.hashType]]);\n  }\n\n  static fromEncodingData(data: unknown): HashFactory {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded HashFactory: ${data}`);\n    }\n    return new HashFactory({\n      hashType: data.get('hash-type'),\n    });\n  }\n}\n\n/**\n * (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\n * it is online.\n */\nexport class HbProofFields implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'hb-pk',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'hb-pk1sig',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'hb-pk2',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'hb-pk2sig',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'hb-sig',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (p) Public key of the heartbeat message.\n   */\n  public hbPk?: Uint8Array;\n\n  /**\n   * (p1s) Signature of OneTimeSignatureSubkeyOffsetID(PK, Batch, Offset) under the\n   * key PK2.\n   */\n  public hbPk1sig?: Uint8Array;\n\n  /**\n   * (p2) Key for new-style two-level ephemeral signature.\n   */\n  public hbPk2?: Uint8Array;\n\n  /**\n   * (p2s) Signature of OneTimeSignatureSubkeyBatchID(PK2, Batch) under the master\n   * key (OneTimeSignatureVerifier).\n   */\n  public hbPk2sig?: Uint8Array;\n\n  /**\n   * (s) Signature of the heartbeat message.\n   */\n  public hbSig?: Uint8Array;\n\n  /**\n   * Creates a new `HbProofFields` object.\n   * @param hbPk - (p) Public key of the heartbeat message.\n   * @param hbPk1sig - (p1s) Signature of OneTimeSignatureSubkeyOffsetID(PK, Batch, Offset) under the\n   * key PK2.\n   * @param hbPk2 - (p2) Key for new-style two-level ephemeral signature.\n   * @param hbPk2sig - (p2s) Signature of OneTimeSignatureSubkeyBatchID(PK2, Batch) under the master\n   * key (OneTimeSignatureVerifier).\n   * @param hbSig - (s) Signature of the heartbeat message.\n   */\n  constructor({\n    hbPk,\n    hbPk1sig,\n    hbPk2,\n    hbPk2sig,\n    hbSig,\n  }: {\n    hbPk?: string | Uint8Array;\n    hbPk1sig?: string | Uint8Array;\n    hbPk2?: string | Uint8Array;\n    hbPk2sig?: string | Uint8Array;\n    hbSig?: string | Uint8Array;\n  }) {\n    this.hbPk = typeof hbPk === 'string' ? base64ToBytes(hbPk) : hbPk;\n    this.hbPk1sig =\n      typeof hbPk1sig === 'string' ? base64ToBytes(hbPk1sig) : hbPk1sig;\n    this.hbPk2 = typeof hbPk2 === 'string' ? base64ToBytes(hbPk2) : hbPk2;\n    this.hbPk2sig =\n      typeof hbPk2sig === 'string' ? base64ToBytes(hbPk2sig) : hbPk2sig;\n    this.hbSig = typeof hbSig === 'string' ? base64ToBytes(hbSig) : hbSig;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return HbProofFields.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['hb-pk', this.hbPk],\n      ['hb-pk1sig', this.hbPk1sig],\n      ['hb-pk2', this.hbPk2],\n      ['hb-pk2sig', this.hbPk2sig],\n      ['hb-sig', this.hbSig],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): HbProofFields {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded HbProofFields: ${data}`);\n    }\n    return new HbProofFields({\n      hbPk: data.get('hb-pk'),\n      hbPk1sig: data.get('hb-pk1sig'),\n      hbPk2: data.get('hb-pk2'),\n      hbPk2sig: data.get('hb-pk2sig'),\n      hbSig: data.get('hb-sig'),\n    });\n  }\n}\n\n/**\n * A health check response.\n */\nexport class HealthCheck implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'db-available',\n          valueSchema: new BooleanSchema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'is-migrating',\n          valueSchema: new BooleanSchema(),\n          omitEmpty: true,\n        },\n        { key: 'message', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'version', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'data',\n          valueSchema: new OptionalSchema(UntypedValue.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'errors',\n          valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public dbAvailable: boolean;\n\n  public isMigrating: boolean;\n\n  public message: string;\n\n  public round: bigint;\n\n  /**\n   * Current version.\n   */\n  public version: string;\n\n  public data?: UntypedValue;\n\n  public errors?: string[];\n\n  /**\n   * Creates a new `HealthCheck` object.\n   * @param dbAvailable -\n   * @param isMigrating -\n   * @param message -\n   * @param round -\n   * @param version - Current version.\n   * @param data -\n   * @param errors -\n   */\n  constructor({\n    dbAvailable,\n    isMigrating,\n    message,\n    round,\n    version,\n    data,\n    errors,\n  }: {\n    dbAvailable: boolean;\n    isMigrating: boolean;\n    message: string;\n    round: number | bigint;\n    version: string;\n    data?: UntypedValue;\n    errors?: string[];\n  }) {\n    this.dbAvailable = dbAvailable;\n    this.isMigrating = isMigrating;\n    this.message = message;\n    this.round = ensureBigInt(round);\n    this.version = version;\n    this.data = data;\n    this.errors = errors;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return HealthCheck.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['db-available', this.dbAvailable],\n      ['is-migrating', this.isMigrating],\n      ['message', this.message],\n      ['round', this.round],\n      ['version', this.version],\n      [\n        'data',\n        typeof this.data !== 'undefined'\n          ? this.data.toEncodingData()\n          : undefined,\n      ],\n      ['errors', this.errors],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): HealthCheck {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded HealthCheck: ${data}`);\n    }\n    return new HealthCheck({\n      dbAvailable: data.get('db-available'),\n      isMigrating: data.get('is-migrating'),\n      message: data.get('message'),\n      round: data.get('round'),\n      version: data.get('version'),\n      data:\n        typeof data.get('data') !== 'undefined'\n          ? UntypedValue.fromEncodingData(data.get('data'))\n          : undefined,\n      errors: data.get('errors'),\n    });\n  }\n}\n\nexport class IndexerStateProofMessage implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'block-headers-commitment',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'first-attested-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'latest-attested-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'ln-proven-weight',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'voters-commitment',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (b)\n   */\n  public blockHeadersCommitment?: Uint8Array;\n\n  /**\n   * (f)\n   */\n  public firstAttestedRound?: bigint;\n\n  /**\n   * (l)\n   */\n  public latestAttestedRound?: bigint;\n\n  /**\n   * (P)\n   */\n  public lnProvenWeight?: bigint;\n\n  /**\n   * (v)\n   */\n  public votersCommitment?: Uint8Array;\n\n  /**\n   * Creates a new `IndexerStateProofMessage` object.\n   * @param blockHeadersCommitment - (b)\n   * @param firstAttestedRound - (f)\n   * @param latestAttestedRound - (l)\n   * @param lnProvenWeight - (P)\n   * @param votersCommitment - (v)\n   */\n  constructor({\n    blockHeadersCommitment,\n    firstAttestedRound,\n    latestAttestedRound,\n    lnProvenWeight,\n    votersCommitment,\n  }: {\n    blockHeadersCommitment?: string | Uint8Array;\n    firstAttestedRound?: number | bigint;\n    latestAttestedRound?: number | bigint;\n    lnProvenWeight?: number | bigint;\n    votersCommitment?: string | Uint8Array;\n  }) {\n    this.blockHeadersCommitment =\n      typeof blockHeadersCommitment === 'string'\n        ? base64ToBytes(blockHeadersCommitment)\n        : blockHeadersCommitment;\n    this.firstAttestedRound =\n      typeof firstAttestedRound === 'undefined'\n        ? undefined\n        : ensureBigInt(firstAttestedRound);\n    this.latestAttestedRound =\n      typeof latestAttestedRound === 'undefined'\n        ? undefined\n        : ensureBigInt(latestAttestedRound);\n    this.lnProvenWeight =\n      typeof lnProvenWeight === 'undefined'\n        ? undefined\n        : ensureBigInt(lnProvenWeight);\n    this.votersCommitment =\n      typeof votersCommitment === 'string'\n        ? base64ToBytes(votersCommitment)\n        : votersCommitment;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return IndexerStateProofMessage.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['block-headers-commitment', this.blockHeadersCommitment],\n      ['first-attested-round', this.firstAttestedRound],\n      ['latest-attested-round', this.latestAttestedRound],\n      ['ln-proven-weight', this.lnProvenWeight],\n      ['voters-commitment', this.votersCommitment],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): IndexerStateProofMessage {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded IndexerStateProofMessage: ${data}`);\n    }\n    return new IndexerStateProofMessage({\n      blockHeadersCommitment: data.get('block-headers-commitment'),\n      firstAttestedRound: data.get('first-attested-round'),\n      latestAttestedRound: data.get('latest-attested-round'),\n      lnProvenWeight: data.get('ln-proven-weight'),\n      votersCommitment: data.get('voters-commitment'),\n    });\n  }\n}\n\nexport class MerkleArrayProof implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'hash-factory',\n          valueSchema: new OptionalSchema(HashFactory.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'path',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(new ByteArraySchema())\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'tree-depth',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public hashFactory?: HashFactory;\n\n  /**\n   * (pth)\n   */\n  public path?: Uint8Array[];\n\n  /**\n   * (td)\n   */\n  public treeDepth?: number;\n\n  /**\n   * Creates a new `MerkleArrayProof` object.\n   * @param hashFactory -\n   * @param path - (pth)\n   * @param treeDepth - (td)\n   */\n  constructor({\n    hashFactory,\n    path,\n    treeDepth,\n  }: {\n    hashFactory?: HashFactory;\n    path?: Uint8Array[];\n    treeDepth?: number | bigint;\n  }) {\n    this.hashFactory = hashFactory;\n    this.path = path;\n    this.treeDepth =\n      typeof treeDepth === 'undefined'\n        ? undefined\n        : ensureSafeInteger(treeDepth);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return MerkleArrayProof.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'hash-factory',\n        typeof this.hashFactory !== 'undefined'\n          ? this.hashFactory.toEncodingData()\n          : undefined,\n      ],\n      ['path', this.path],\n      ['tree-depth', this.treeDepth],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): MerkleArrayProof {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded MerkleArrayProof: ${data}`);\n    }\n    return new MerkleArrayProof({\n      hashFactory:\n        typeof data.get('hash-factory') !== 'undefined'\n          ? HashFactory.fromEncodingData(data.get('hash-factory'))\n          : undefined,\n      path: data.get('path'),\n      treeDepth: data.get('tree-depth'),\n    });\n  }\n}\n\n/**\n * A simplified version of AssetHolding\n */\nexport class MiniAssetHolding implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'address', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'is-frozen', valueSchema: new BooleanSchema(), omitEmpty: true },\n        {\n          key: 'deleted',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'opted-in-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'opted-out-at-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public address: string;\n\n  public amount: bigint;\n\n  public isFrozen: boolean;\n\n  /**\n   * Whether or not this asset holding is currently deleted from its account.\n   */\n  public deleted?: boolean;\n\n  /**\n   * Round during which the account opted into the asset.\n   */\n  public optedInAtRound?: bigint;\n\n  /**\n   * Round during which the account opted out of the asset.\n   */\n  public optedOutAtRound?: bigint;\n\n  /**\n   * Creates a new `MiniAssetHolding` object.\n   * @param address -\n   * @param amount -\n   * @param isFrozen -\n   * @param deleted - Whether or not this asset holding is currently deleted from its account.\n   * @param optedInAtRound - Round during which the account opted into the asset.\n   * @param optedOutAtRound - Round during which the account opted out of the asset.\n   */\n  constructor({\n    address,\n    amount,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound,\n  }: {\n    address: string;\n    amount: number | bigint;\n    isFrozen: boolean;\n    deleted?: boolean;\n    optedInAtRound?: number | bigint;\n    optedOutAtRound?: number | bigint;\n  }) {\n    this.address = address;\n    this.amount = ensureBigInt(amount);\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound =\n      typeof optedInAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(optedInAtRound);\n    this.optedOutAtRound =\n      typeof optedOutAtRound === 'undefined'\n        ? undefined\n        : ensureBigInt(optedOutAtRound);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return MiniAssetHolding.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['address', this.address],\n      ['amount', this.amount],\n      ['is-frozen', this.isFrozen],\n      ['deleted', this.deleted],\n      ['opted-in-at-round', this.optedInAtRound],\n      ['opted-out-at-round', this.optedOutAtRound],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): MiniAssetHolding {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded MiniAssetHolding: ${data}`);\n    }\n    return new MiniAssetHolding({\n      address: data.get('address'),\n      amount: data.get('amount'),\n      isFrozen: data.get('is-frozen'),\n      deleted: data.get('deleted'),\n      optedInAtRound: data.get('opted-in-at-round'),\n      optedOutAtRound: data.get('opted-out-at-round'),\n    });\n  }\n}\n\n/**\n * Participation account data that needs to be checked/acted on by the network.\n */\nexport class ParticipationUpdates implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'absent-participation-accounts',\n          valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'expired-participation-accounts',\n          valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (partupabs) a list of online accounts that need to be suspended.\n   */\n  public absentParticipationAccounts?: string[];\n\n  /**\n   * (partupdrmv) a list of online accounts that needs to be converted to offline\n   * since their participation key expired.\n   */\n  public expiredParticipationAccounts?: string[];\n\n  /**\n   * Creates a new `ParticipationUpdates` object.\n   * @param absentParticipationAccounts - (partupabs) a list of online accounts that need to be suspended.\n   * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\n   * since their participation key expired.\n   */\n  constructor({\n    absentParticipationAccounts,\n    expiredParticipationAccounts,\n  }: {\n    absentParticipationAccounts?: string[];\n    expiredParticipationAccounts?: string[];\n  }) {\n    this.absentParticipationAccounts = absentParticipationAccounts;\n    this.expiredParticipationAccounts = expiredParticipationAccounts;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return ParticipationUpdates.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['absent-participation-accounts', this.absentParticipationAccounts],\n      ['expired-participation-accounts', this.expiredParticipationAccounts],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): ParticipationUpdates {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded ParticipationUpdates: ${data}`);\n    }\n    return new ParticipationUpdates({\n      absentParticipationAccounts: data.get('absent-participation-accounts'),\n      expiredParticipationAccounts: data.get('expired-participation-accounts'),\n    });\n  }\n}\n\n/**\n * (sp) represents a state proof.\n * Definition:\n * crypto/stateproof/structs.go : StateProof\n */\nexport class StateProofFields implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'part-proofs',\n          valueSchema: new OptionalSchema(MerkleArrayProof.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'positions-to-reveal',\n          valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'reveals',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(StateProofReveal.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'salt-version',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'sig-commit',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'sig-proofs',\n          valueSchema: new OptionalSchema(MerkleArrayProof.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'signed-weight',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (P)\n   */\n  public partProofs?: MerkleArrayProof;\n\n  /**\n   * (pr) Sequence of reveal positions.\n   */\n  public positionsToReveal?: bigint[];\n\n  /**\n   * (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n   * msgp\n   */\n  public reveals?: StateProofReveal[];\n\n  /**\n   * (v) Salt version of the merkle signature.\n   */\n  public saltVersion?: number;\n\n  /**\n   * (c)\n   */\n  public sigCommit?: Uint8Array;\n\n  /**\n   * (S)\n   */\n  public sigProofs?: MerkleArrayProof;\n\n  /**\n   * (w)\n   */\n  public signedWeight?: bigint;\n\n  /**\n   * Creates a new `StateProofFields` object.\n   * @param partProofs - (P)\n   * @param positionsToReveal - (pr) Sequence of reveal positions.\n   * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n   * msgp\n   * @param saltVersion - (v) Salt version of the merkle signature.\n   * @param sigCommit - (c)\n   * @param sigProofs - (S)\n   * @param signedWeight - (w)\n   */\n  constructor({\n    partProofs,\n    positionsToReveal,\n    reveals,\n    saltVersion,\n    sigCommit,\n    sigProofs,\n    signedWeight,\n  }: {\n    partProofs?: MerkleArrayProof;\n    positionsToReveal?: (number | bigint)[];\n    reveals?: StateProofReveal[];\n    saltVersion?: number | bigint;\n    sigCommit?: string | Uint8Array;\n    sigProofs?: MerkleArrayProof;\n    signedWeight?: number | bigint;\n  }) {\n    this.partProofs = partProofs;\n    this.positionsToReveal =\n      typeof positionsToReveal === 'undefined'\n        ? undefined\n        : positionsToReveal.map(ensureBigInt);\n    this.reveals = reveals;\n    this.saltVersion =\n      typeof saltVersion === 'undefined'\n        ? undefined\n        : ensureSafeInteger(saltVersion);\n    this.sigCommit =\n      typeof sigCommit === 'string' ? base64ToBytes(sigCommit) : sigCommit;\n    this.sigProofs = sigProofs;\n    this.signedWeight =\n      typeof signedWeight === 'undefined'\n        ? undefined\n        : ensureBigInt(signedWeight);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return StateProofFields.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'part-proofs',\n        typeof this.partProofs !== 'undefined'\n          ? this.partProofs.toEncodingData()\n          : undefined,\n      ],\n      ['positions-to-reveal', this.positionsToReveal],\n      [\n        'reveals',\n        typeof this.reveals !== 'undefined'\n          ? this.reveals.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['salt-version', this.saltVersion],\n      ['sig-commit', this.sigCommit],\n      [\n        'sig-proofs',\n        typeof this.sigProofs !== 'undefined'\n          ? this.sigProofs.toEncodingData()\n          : undefined,\n      ],\n      ['signed-weight', this.signedWeight],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): StateProofFields {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofFields: ${data}`);\n    }\n    return new StateProofFields({\n      partProofs:\n        typeof data.get('part-proofs') !== 'undefined'\n          ? MerkleArrayProof.fromEncodingData(data.get('part-proofs'))\n          : undefined,\n      positionsToReveal: data.get('positions-to-reveal'),\n      reveals:\n        typeof data.get('reveals') !== 'undefined'\n          ? data\n              .get('reveals')\n              .map((v: unknown) => StateProofReveal.fromEncodingData(v))\n          : undefined,\n      saltVersion: data.get('salt-version'),\n      sigCommit: data.get('sig-commit'),\n      sigProofs:\n        typeof data.get('sig-proofs') !== 'undefined'\n          ? MerkleArrayProof.fromEncodingData(data.get('sig-proofs'))\n          : undefined,\n      signedWeight: data.get('signed-weight'),\n    });\n  }\n}\n\nexport class StateProofParticipant implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'verifier',\n          valueSchema: new OptionalSchema(StateProofVerifier.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'weight',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (p)\n   */\n  public verifier?: StateProofVerifier;\n\n  /**\n   * (w)\n   */\n  public weight?: bigint;\n\n  /**\n   * Creates a new `StateProofParticipant` object.\n   * @param verifier - (p)\n   * @param weight - (w)\n   */\n  constructor({\n    verifier,\n    weight,\n  }: {\n    verifier?: StateProofVerifier;\n    weight?: number | bigint;\n  }) {\n    this.verifier = verifier;\n    this.weight =\n      typeof weight === 'undefined' ? undefined : ensureBigInt(weight);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return StateProofParticipant.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'verifier',\n        typeof this.verifier !== 'undefined'\n          ? this.verifier.toEncodingData()\n          : undefined,\n      ],\n      ['weight', this.weight],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): StateProofParticipant {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofParticipant: ${data}`);\n    }\n    return new StateProofParticipant({\n      verifier:\n        typeof data.get('verifier') !== 'undefined'\n          ? StateProofVerifier.fromEncodingData(data.get('verifier'))\n          : undefined,\n      weight: data.get('weight'),\n    });\n  }\n}\n\nexport class StateProofReveal implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'participant',\n          valueSchema: new OptionalSchema(StateProofParticipant.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'position',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'sig-slot',\n          valueSchema: new OptionalSchema(StateProofSigSlot.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (p)\n   */\n  public participant?: StateProofParticipant;\n\n  /**\n   * The position in the signature and participants arrays corresponding to this\n   * entry.\n   */\n  public position?: bigint;\n\n  /**\n   * (s)\n   */\n  public sigSlot?: StateProofSigSlot;\n\n  /**\n   * Creates a new `StateProofReveal` object.\n   * @param participant - (p)\n   * @param position - The position in the signature and participants arrays corresponding to this\n   * entry.\n   * @param sigSlot - (s)\n   */\n  constructor({\n    participant,\n    position,\n    sigSlot,\n  }: {\n    participant?: StateProofParticipant;\n    position?: number | bigint;\n    sigSlot?: StateProofSigSlot;\n  }) {\n    this.participant = participant;\n    this.position =\n      typeof position === 'undefined' ? undefined : ensureBigInt(position);\n    this.sigSlot = sigSlot;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return StateProofReveal.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'participant',\n        typeof this.participant !== 'undefined'\n          ? this.participant.toEncodingData()\n          : undefined,\n      ],\n      ['position', this.position],\n      [\n        'sig-slot',\n        typeof this.sigSlot !== 'undefined'\n          ? this.sigSlot.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): StateProofReveal {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofReveal: ${data}`);\n    }\n    return new StateProofReveal({\n      participant:\n        typeof data.get('participant') !== 'undefined'\n          ? StateProofParticipant.fromEncodingData(data.get('participant'))\n          : undefined,\n      position: data.get('position'),\n      sigSlot:\n        typeof data.get('sig-slot') !== 'undefined'\n          ? StateProofSigSlot.fromEncodingData(data.get('sig-slot'))\n          : undefined,\n    });\n  }\n}\n\nexport class StateProofSigSlot implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'lower-sig-weight',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'signature',\n          valueSchema: new OptionalSchema(StateProofSignature.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (l) The total weight of signatures in the lower-numbered slots.\n   */\n  public lowerSigWeight?: bigint;\n\n  public signature?: StateProofSignature;\n\n  /**\n   * Creates a new `StateProofSigSlot` object.\n   * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\n   * @param signature -\n   */\n  constructor({\n    lowerSigWeight,\n    signature,\n  }: {\n    lowerSigWeight?: number | bigint;\n    signature?: StateProofSignature;\n  }) {\n    this.lowerSigWeight =\n      typeof lowerSigWeight === 'undefined'\n        ? undefined\n        : ensureBigInt(lowerSigWeight);\n    this.signature = signature;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return StateProofSigSlot.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['lower-sig-weight', this.lowerSigWeight],\n      [\n        'signature',\n        typeof this.signature !== 'undefined'\n          ? this.signature.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): StateProofSigSlot {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofSigSlot: ${data}`);\n    }\n    return new StateProofSigSlot({\n      lowerSigWeight: data.get('lower-sig-weight'),\n      signature:\n        typeof data.get('signature') !== 'undefined'\n          ? StateProofSignature.fromEncodingData(data.get('signature'))\n          : undefined,\n    });\n  }\n}\n\nexport class StateProofSignature implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'falcon-signature',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'merkle-array-index',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'proof',\n          valueSchema: new OptionalSchema(MerkleArrayProof.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'verifying-key',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public falconSignature?: Uint8Array;\n\n  public merkleArrayIndex?: number;\n\n  public proof?: MerkleArrayProof;\n\n  /**\n   * (vkey)\n   */\n  public verifyingKey?: Uint8Array;\n\n  /**\n   * Creates a new `StateProofSignature` object.\n   * @param falconSignature -\n   * @param merkleArrayIndex -\n   * @param proof -\n   * @param verifyingKey - (vkey)\n   */\n  constructor({\n    falconSignature,\n    merkleArrayIndex,\n    proof,\n    verifyingKey,\n  }: {\n    falconSignature?: string | Uint8Array;\n    merkleArrayIndex?: number | bigint;\n    proof?: MerkleArrayProof;\n    verifyingKey?: string | Uint8Array;\n  }) {\n    this.falconSignature =\n      typeof falconSignature === 'string'\n        ? base64ToBytes(falconSignature)\n        : falconSignature;\n    this.merkleArrayIndex =\n      typeof merkleArrayIndex === 'undefined'\n        ? undefined\n        : ensureSafeInteger(merkleArrayIndex);\n    this.proof = proof;\n    this.verifyingKey =\n      typeof verifyingKey === 'string'\n        ? base64ToBytes(verifyingKey)\n        : verifyingKey;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return StateProofSignature.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['falcon-signature', this.falconSignature],\n      ['merkle-array-index', this.merkleArrayIndex],\n      [\n        'proof',\n        typeof this.proof !== 'undefined'\n          ? this.proof.toEncodingData()\n          : undefined,\n      ],\n      ['verifying-key', this.verifyingKey],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): StateProofSignature {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofSignature: ${data}`);\n    }\n    return new StateProofSignature({\n      falconSignature: data.get('falcon-signature'),\n      merkleArrayIndex: data.get('merkle-array-index'),\n      proof:\n        typeof data.get('proof') !== 'undefined'\n          ? MerkleArrayProof.fromEncodingData(data.get('proof'))\n          : undefined,\n      verifyingKey: data.get('verifying-key'),\n    });\n  }\n}\n\nexport class StateProofTracking implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'next-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'online-total-weight',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'type',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'voters-commitment',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (n) Next round for which we will accept a state proof transaction.\n   */\n  public nextRound?: bigint;\n\n  /**\n   * (t) The total number of microalgos held by the online accounts during the\n   * StateProof round.\n   */\n  public onlineTotalWeight?: bigint;\n\n  /**\n   * State Proof Type. Note the raw object uses map with this as key.\n   */\n  public type?: number;\n\n  /**\n   * (v) Root of a vector commitment containing online accounts that will help sign\n   * the proof.\n   */\n  public votersCommitment?: Uint8Array;\n\n  /**\n   * Creates a new `StateProofTracking` object.\n   * @param nextRound - (n) Next round for which we will accept a state proof transaction.\n   * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\n   * StateProof round.\n   * @param type - State Proof Type. Note the raw object uses map with this as key.\n   * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\n   * the proof.\n   */\n  constructor({\n    nextRound,\n    onlineTotalWeight,\n    type,\n    votersCommitment,\n  }: {\n    nextRound?: number | bigint;\n    onlineTotalWeight?: number | bigint;\n    type?: number | bigint;\n    votersCommitment?: string | Uint8Array;\n  }) {\n    this.nextRound =\n      typeof nextRound === 'undefined' ? undefined : ensureBigInt(nextRound);\n    this.onlineTotalWeight =\n      typeof onlineTotalWeight === 'undefined'\n        ? undefined\n        : ensureBigInt(onlineTotalWeight);\n    this.type =\n      typeof type === 'undefined' ? undefined : ensureSafeInteger(type);\n    this.votersCommitment =\n      typeof votersCommitment === 'string'\n        ? base64ToBytes(votersCommitment)\n        : votersCommitment;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return StateProofTracking.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['next-round', this.nextRound],\n      ['online-total-weight', this.onlineTotalWeight],\n      ['type', this.type],\n      ['voters-commitment', this.votersCommitment],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): StateProofTracking {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofTracking: ${data}`);\n    }\n    return new StateProofTracking({\n      nextRound: data.get('next-round'),\n      onlineTotalWeight: data.get('online-total-weight'),\n      type: data.get('type'),\n      votersCommitment: data.get('voters-commitment'),\n    });\n  }\n}\n\nexport class StateProofVerifier implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'commitment',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'key-lifetime',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (cmt) Represents the root of the vector commitment tree.\n   */\n  public commitment?: Uint8Array;\n\n  /**\n   * (lf) Key lifetime.\n   */\n  public keyLifetime?: bigint;\n\n  /**\n   * Creates a new `StateProofVerifier` object.\n   * @param commitment - (cmt) Represents the root of the vector commitment tree.\n   * @param keyLifetime - (lf) Key lifetime.\n   */\n  constructor({\n    commitment,\n    keyLifetime,\n  }: {\n    commitment?: string | Uint8Array;\n    keyLifetime?: number | bigint;\n  }) {\n    this.commitment =\n      typeof commitment === 'string' ? base64ToBytes(commitment) : commitment;\n    this.keyLifetime =\n      typeof keyLifetime === 'undefined'\n        ? undefined\n        : ensureBigInt(keyLifetime);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return StateProofVerifier.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['commitment', this.commitment],\n      ['key-lifetime', this.keyLifetime],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): StateProofVerifier {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateProofVerifier: ${data}`);\n    }\n    return new StateProofVerifier({\n      commitment: data.get('commitment'),\n      keyLifetime: data.get('key-lifetime'),\n    });\n  }\n}\n\n/**\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n * determine how much storage may be used in a local-state or global-state for an\n * application. The more space used, the larger minimum balance must be maintained\n * in the account holding the data.\n */\nexport class StateSchema implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'num-byte-slice',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        { key: 'num-uint', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Maximum number of TEAL byte slices that may be stored in the key/value store.\n   */\n  public numByteSlice: number;\n\n  /**\n   * Maximum number of TEAL uints that may be stored in the key/value store.\n   */\n  public numUint: number;\n\n  /**\n   * Creates a new `StateSchema` object.\n   * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\n   * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\n   */\n  constructor({\n    numByteSlice,\n    numUint,\n  }: {\n    numByteSlice: number | bigint;\n    numUint: number | bigint;\n  }) {\n    this.numByteSlice = ensureSafeInteger(numByteSlice);\n    this.numUint = ensureSafeInteger(numUint);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return StateSchema.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['num-byte-slice', this.numByteSlice],\n      ['num-uint', this.numUint],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): StateSchema {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded StateSchema: ${data}`);\n    }\n    return new StateSchema({\n      numByteSlice: data.get('num-byte-slice'),\n      numUint: data.get('num-uint'),\n    });\n  }\n}\n\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'key', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        { key: 'value', valueSchema: TealValue.encodingSchema, omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  public key: Uint8Array;\n\n  /**\n   * Represents a TEAL value.\n   */\n  public value: TealValue;\n\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor({ key, value }: { key: string | Uint8Array; value: TealValue }) {\n    this.key = typeof key === 'string' ? base64ToBytes(key) : key;\n    this.value = value;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TealKeyValue.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['key', this.key],\n      ['value', this.value.toEncodingData()],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TealKeyValue {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TealKeyValue: ${data}`);\n    }\n    return new TealKeyValue({\n      key: data.get('key'),\n      value: TealValue.fromEncodingData(data.get('value') ?? new Map()),\n    });\n  }\n}\n\n/**\n * Represents a TEAL value.\n */\nexport class TealValue implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'bytes', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        { key: 'type', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'uint', valueSchema: new Uint64Schema(), omitEmpty: true }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * bytes value.\n   */\n  public bytes: Uint8Array;\n\n  /**\n   * type of the value. Value `1` refers to **bytes**, value `2` refers to **uint**\n   */\n  public type: number;\n\n  /**\n   * uint value.\n   */\n  public uint: bigint;\n\n  /**\n   * Creates a new `TealValue` object.\n   * @param bytes - bytes value.\n   * @param type - type of the value. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param uint - uint value.\n   */\n  constructor({\n    bytes,\n    type,\n    uint,\n  }: {\n    bytes: string | Uint8Array;\n    type: number | bigint;\n    uint: number | bigint;\n  }) {\n    this.bytes = typeof bytes === 'string' ? base64ToBytes(bytes) : bytes;\n    this.type = ensureSafeInteger(type);\n    this.uint = ensureBigInt(uint);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TealValue.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['bytes', this.bytes],\n      ['type', this.type],\n      ['uint', this.uint],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TealValue {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TealValue: ${data}`);\n    }\n    return new TealValue({\n      bytes: data.get('bytes'),\n      type: data.get('type'),\n      uint: data.get('uint'),\n    });\n  }\n}\n\n/**\n * Contains all fields common to all transactions and serves as an envelope to all\n * transactions type. Represents both regular and inner transactions.\n * Definition:\n * data/transactions/signedtxn.go : SignedTxn\n * data/transactions/transaction.go : Transaction\n */\nexport class Transaction implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'fee', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'first-valid',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        { key: 'last-valid', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'sender', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'application-transaction',\n          valueSchema: new OptionalSchema(\n            TransactionApplication.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'asset-config-transaction',\n          valueSchema: new OptionalSchema(\n            TransactionAssetConfig.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'asset-freeze-transaction',\n          valueSchema: new OptionalSchema(\n            TransactionAssetFreeze.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'asset-transfer-transaction',\n          valueSchema: new OptionalSchema(\n            TransactionAssetTransfer.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'auth-addr',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'close-rewards',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'closing-amount',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'confirmed-round',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'created-application-index',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'created-asset-index',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'genesis-hash',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'genesis-id',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'global-state-delta',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(EvalDeltaKeyValue.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'group',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'heartbeat-transaction',\n          valueSchema: new OptionalSchema(TransactionHeartbeat.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'id',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'inner-txns',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(Transaction.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'intra-round-offset',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'keyreg-transaction',\n          valueSchema: new OptionalSchema(TransactionKeyreg.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'lease',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'local-state-delta',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(AccountStateDelta.encodingSchema)\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'logs',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(new ByteArraySchema())\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'note',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'payment-transaction',\n          valueSchema: new OptionalSchema(TransactionPayment.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'receiver-rewards',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'rekey-to',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'round-time',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'sender-rewards',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'signature',\n          valueSchema: new OptionalSchema(TransactionSignature.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'state-proof-transaction',\n          valueSchema: new OptionalSchema(TransactionStateProof.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'tx-type',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (fee) Transaction fee.\n   */\n  public fee: bigint;\n\n  /**\n   * (fv) First valid round for this transaction.\n   */\n  public firstValid: bigint;\n\n  /**\n   * (lv) Last valid round for this transaction.\n   */\n  public lastValid: bigint;\n\n  /**\n   * (snd) Sender's address.\n   */\n  public sender: string;\n\n  /**\n   * Fields for application transactions.\n   * Definition:\n   * data/transactions/application.go : ApplicationCallTxnFields\n   */\n  public applicationTransaction?: TransactionApplication;\n\n  /**\n   * Fields for asset allocation, re-configuration, and destruction.\n   * A zero value for asset-id indicates asset creation.\n   * A zero value for the params indicates asset destruction.\n   * Definition:\n   * data/transactions/asset.go : AssetConfigTxnFields\n   */\n  public assetConfigTransaction?: TransactionAssetConfig;\n\n  /**\n   * Fields for an asset freeze transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetFreezeTxnFields\n   */\n  public assetFreezeTransaction?: TransactionAssetFreeze;\n\n  /**\n   * Fields for an asset transfer transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetTransferTxnFields\n   */\n  public assetTransferTransaction?: TransactionAssetTransfer;\n\n  /**\n   * (sgnr) this is included with signed transactions when the signing address does\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\n   * to the accounts auth addr.\n   */\n  public authAddr?: Address;\n\n  /**\n   * (rc) rewards applied to close-remainder-to account.\n   */\n  public closeRewards?: bigint;\n\n  /**\n   * (ca) closing amount for transaction.\n   */\n  public closingAmount?: bigint;\n\n  /**\n   * Round when the transaction was confirmed.\n   */\n  public confirmedRound?: bigint;\n\n  /**\n   * Specifies an application index (ID) if an application was created with this\n   * transaction.\n   */\n  public createdApplicationIndex?: bigint;\n\n  /**\n   * Specifies an asset index (ID) if an asset was created with this transaction.\n   */\n  public createdAssetIndex?: bigint;\n\n  /**\n   * (gh) Hash of genesis block.\n   */\n  public genesisHash?: Uint8Array;\n\n  /**\n   * (gen) genesis block ID.\n   */\n  public genesisId?: string;\n\n  /**\n   * (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public globalStateDelta?: EvalDeltaKeyValue[];\n\n  /**\n   * (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n   * that this transaction is part of a transaction group and the value is the\n   * sha512/256 hash of the transactions in that group.\n   */\n  public group?: Uint8Array;\n\n  /**\n   * Fields for a heartbeat transaction.\n   * Definition:\n   * data/transactions/heartbeat.go : HeartbeatTxnFields\n   */\n  public heartbeatTransaction?: TransactionHeartbeat;\n\n  /**\n   * Transaction ID\n   */\n  public id?: string;\n\n  /**\n   * Inner transactions produced by application execution.\n   */\n  public innerTxns?: Transaction[];\n\n  /**\n   * Offset into the round where this transaction was confirmed.\n   */\n  public intraRoundOffset?: number;\n\n  /**\n   * Fields for a keyreg transaction.\n   * Definition:\n   * data/transactions/keyreg.go : KeyregTxnFields\n   */\n  public keyregTransaction?: TransactionKeyreg;\n\n  /**\n   * (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n   * until the LastValid round passes. While this transaction possesses the lease, no\n   * other transaction specifying this lease can be confirmed.\n   */\n  public lease?: Uint8Array;\n\n  /**\n   * (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public localStateDelta?: AccountStateDelta[];\n\n  /**\n   * (lg) Logs for the application being executed by this transaction.\n   */\n  public logs?: Uint8Array[];\n\n  /**\n   * (note) Free form data.\n   */\n  public note?: Uint8Array;\n\n  /**\n   * Fields for a payment transaction.\n   * Definition:\n   * data/transactions/payment.go : PaymentTxnFields\n   */\n  public paymentTransaction?: TransactionPayment;\n\n  /**\n   * (rr) rewards applied to receiver account.\n   */\n  public receiverRewards?: bigint;\n\n  /**\n   * (rekey) when included in a valid transaction, the accounts auth addr will be\n   * updated with this value and future signatures must be signed with the key\n   * represented by this address.\n   */\n  public rekeyTo?: Address;\n\n  /**\n   * Time when the block this transaction is in was confirmed.\n   */\n  public roundTime?: number;\n\n  /**\n   * (rs) rewards applied to sender account.\n   */\n  public senderRewards?: bigint;\n\n  /**\n   * Validation signature associated with some data. Only one of the signatures\n   * should be provided.\n   */\n  public signature?: TransactionSignature;\n\n  /**\n   * Fields for a state proof transaction.\n   * Definition:\n   * data/transactions/stateproof.go : StateProofTxnFields\n   */\n  public stateProofTransaction?: TransactionStateProof;\n\n  /**\n   * (type) Indicates what type of transaction this is. Different types have\n   * different fields.\n   * Valid types, and where their fields are stored:\n   * * (pay) payment-transaction\n   * * (keyreg) keyreg-transaction\n   * * (acfg) asset-config-transaction\n   * * (axfer) asset-transfer-transaction\n   * * (afrz) asset-freeze-transaction\n   * * (appl) application-transaction\n   * * (stpf) state-proof-transaction\n   * * (hb) heartbeat-transaction\n   */\n  public txType?: string;\n\n  /**\n   * Creates a new `Transaction` object.\n   * @param fee - (fee) Transaction fee.\n   * @param firstValid - (fv) First valid round for this transaction.\n   * @param lastValid - (lv) Last valid round for this transaction.\n   * @param sender - (snd) Sender's address.\n   * @param applicationTransaction - Fields for application transactions.\n   * Definition:\n   * data/transactions/application.go : ApplicationCallTxnFields\n   * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\n   * A zero value for asset-id indicates asset creation.\n   * A zero value for the params indicates asset destruction.\n   * Definition:\n   * data/transactions/asset.go : AssetConfigTxnFields\n   * @param assetFreezeTransaction - Fields for an asset freeze transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetFreezeTxnFields\n   * @param assetTransferTransaction - Fields for an asset transfer transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetTransferTxnFields\n   * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\n   * to the accounts auth addr.\n   * @param closeRewards - (rc) rewards applied to close-remainder-to account.\n   * @param closingAmount - (ca) closing amount for transaction.\n   * @param confirmedRound - Round when the transaction was confirmed.\n   * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\n   * transaction.\n   * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\n   * @param genesisHash - (gh) Hash of genesis block.\n   * @param genesisId - (gen) genesis block ID.\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n   * that this transaction is part of a transaction group and the value is the\n   * sha512/256 hash of the transactions in that group.\n   * @param heartbeatTransaction - Fields for a heartbeat transaction.\n   * Definition:\n   * data/transactions/heartbeat.go : HeartbeatTxnFields\n   * @param id - Transaction ID\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\n   * @param keyregTransaction - Fields for a keyreg transaction.\n   * Definition:\n   * data/transactions/keyreg.go : KeyregTxnFields\n   * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n   * until the LastValid round passes. While this transaction possesses the lease, no\n   * other transaction specifying this lease can be confirmed.\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - (lg) Logs for the application being executed by this transaction.\n   * @param note - (note) Free form data.\n   * @param paymentTransaction - Fields for a payment transaction.\n   * Definition:\n   * data/transactions/payment.go : PaymentTxnFields\n   * @param receiverRewards - (rr) rewards applied to receiver account.\n   * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\n   * updated with this value and future signatures must be signed with the key\n   * represented by this address.\n   * @param roundTime - Time when the block this transaction is in was confirmed.\n   * @param senderRewards - (rs) rewards applied to sender account.\n   * @param signature - Validation signature associated with some data. Only one of the signatures\n   * should be provided.\n   * @param stateProofTransaction - Fields for a state proof transaction.\n   * Definition:\n   * data/transactions/stateproof.go : StateProofTxnFields\n   * @param txType - (type) Indicates what type of transaction this is. Different types have\n   * different fields.\n   * Valid types, and where their fields are stored:\n   * * (pay) payment-transaction\n   * * (keyreg) keyreg-transaction\n   * * (acfg) asset-config-transaction\n   * * (axfer) asset-transfer-transaction\n   * * (afrz) asset-freeze-transaction\n   * * (appl) application-transaction\n   * * (stpf) state-proof-transaction\n   * * (hb) heartbeat-transaction\n   */\n  constructor({\n    fee,\n    firstValid,\n    lastValid,\n    sender,\n    applicationTransaction,\n    assetConfigTransaction,\n    assetFreezeTransaction,\n    assetTransferTransaction,\n    authAddr,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    createdApplicationIndex,\n    createdAssetIndex,\n    genesisHash,\n    genesisId,\n    globalStateDelta,\n    group,\n    heartbeatTransaction,\n    id,\n    innerTxns,\n    intraRoundOffset,\n    keyregTransaction,\n    lease,\n    localStateDelta,\n    logs,\n    note,\n    paymentTransaction,\n    receiverRewards,\n    rekeyTo,\n    roundTime,\n    senderRewards,\n    signature,\n    stateProofTransaction,\n    txType,\n  }: {\n    fee: number | bigint;\n    firstValid: number | bigint;\n    lastValid: number | bigint;\n    sender: string;\n    applicationTransaction?: TransactionApplication;\n    assetConfigTransaction?: TransactionAssetConfig;\n    assetFreezeTransaction?: TransactionAssetFreeze;\n    assetTransferTransaction?: TransactionAssetTransfer;\n    authAddr?: Address | string;\n    closeRewards?: number | bigint;\n    closingAmount?: number | bigint;\n    confirmedRound?: number | bigint;\n    createdApplicationIndex?: number | bigint;\n    createdAssetIndex?: number | bigint;\n    genesisHash?: string | Uint8Array;\n    genesisId?: string;\n    globalStateDelta?: EvalDeltaKeyValue[];\n    group?: string | Uint8Array;\n    heartbeatTransaction?: TransactionHeartbeat;\n    id?: string;\n    innerTxns?: Transaction[];\n    intraRoundOffset?: number | bigint;\n    keyregTransaction?: TransactionKeyreg;\n    lease?: string | Uint8Array;\n    localStateDelta?: AccountStateDelta[];\n    logs?: Uint8Array[];\n    note?: string | Uint8Array;\n    paymentTransaction?: TransactionPayment;\n    receiverRewards?: number | bigint;\n    rekeyTo?: Address | string;\n    roundTime?: number | bigint;\n    senderRewards?: number | bigint;\n    signature?: TransactionSignature;\n    stateProofTransaction?: TransactionStateProof;\n    txType?: string;\n  }) {\n    this.fee = ensureBigInt(fee);\n    this.firstValid = ensureBigInt(firstValid);\n    this.lastValid = ensureBigInt(lastValid);\n    this.sender = sender;\n    this.applicationTransaction = applicationTransaction;\n    this.assetConfigTransaction = assetConfigTransaction;\n    this.assetFreezeTransaction = assetFreezeTransaction;\n    this.assetTransferTransaction = assetTransferTransaction;\n    this.authAddr =\n      typeof authAddr === 'string' ? Address.fromString(authAddr) : authAddr;\n    this.closeRewards =\n      typeof closeRewards === 'undefined'\n        ? undefined\n        : ensureBigInt(closeRewards);\n    this.closingAmount =\n      typeof closingAmount === 'undefined'\n        ? undefined\n        : ensureBigInt(closingAmount);\n    this.confirmedRound =\n      typeof confirmedRound === 'undefined'\n        ? undefined\n        : ensureBigInt(confirmedRound);\n    this.createdApplicationIndex =\n      typeof createdApplicationIndex === 'undefined'\n        ? undefined\n        : ensureBigInt(createdApplicationIndex);\n    this.createdAssetIndex =\n      typeof createdAssetIndex === 'undefined'\n        ? undefined\n        : ensureBigInt(createdAssetIndex);\n    this.genesisHash =\n      typeof genesisHash === 'string'\n        ? base64ToBytes(genesisHash)\n        : genesisHash;\n    this.genesisId = genesisId;\n    this.globalStateDelta = globalStateDelta;\n    this.group = typeof group === 'string' ? base64ToBytes(group) : group;\n    this.heartbeatTransaction = heartbeatTransaction;\n    this.id = id;\n    this.innerTxns = innerTxns;\n    this.intraRoundOffset =\n      typeof intraRoundOffset === 'undefined'\n        ? undefined\n        : ensureSafeInteger(intraRoundOffset);\n    this.keyregTransaction = keyregTransaction;\n    this.lease = typeof lease === 'string' ? base64ToBytes(lease) : lease;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.note = typeof note === 'string' ? base64ToBytes(note) : note;\n    this.paymentTransaction = paymentTransaction;\n    this.receiverRewards =\n      typeof receiverRewards === 'undefined'\n        ? undefined\n        : ensureBigInt(receiverRewards);\n    this.rekeyTo =\n      typeof rekeyTo === 'string' ? Address.fromString(rekeyTo) : rekeyTo;\n    this.roundTime =\n      typeof roundTime === 'undefined'\n        ? undefined\n        : ensureSafeInteger(roundTime);\n    this.senderRewards =\n      typeof senderRewards === 'undefined'\n        ? undefined\n        : ensureBigInt(senderRewards);\n    this.signature = signature;\n    this.stateProofTransaction = stateProofTransaction;\n    this.txType = txType;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return Transaction.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['fee', this.fee],\n      ['first-valid', this.firstValid],\n      ['last-valid', this.lastValid],\n      ['sender', this.sender],\n      [\n        'application-transaction',\n        typeof this.applicationTransaction !== 'undefined'\n          ? this.applicationTransaction.toEncodingData()\n          : undefined,\n      ],\n      [\n        'asset-config-transaction',\n        typeof this.assetConfigTransaction !== 'undefined'\n          ? this.assetConfigTransaction.toEncodingData()\n          : undefined,\n      ],\n      [\n        'asset-freeze-transaction',\n        typeof this.assetFreezeTransaction !== 'undefined'\n          ? this.assetFreezeTransaction.toEncodingData()\n          : undefined,\n      ],\n      [\n        'asset-transfer-transaction',\n        typeof this.assetTransferTransaction !== 'undefined'\n          ? this.assetTransferTransaction.toEncodingData()\n          : undefined,\n      ],\n      [\n        'auth-addr',\n        typeof this.authAddr !== 'undefined'\n          ? this.authAddr.toString()\n          : undefined,\n      ],\n      ['close-rewards', this.closeRewards],\n      ['closing-amount', this.closingAmount],\n      ['confirmed-round', this.confirmedRound],\n      ['created-application-index', this.createdApplicationIndex],\n      ['created-asset-index', this.createdAssetIndex],\n      ['genesis-hash', this.genesisHash],\n      ['genesis-id', this.genesisId],\n      [\n        'global-state-delta',\n        typeof this.globalStateDelta !== 'undefined'\n          ? this.globalStateDelta.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['group', this.group],\n      [\n        'heartbeat-transaction',\n        typeof this.heartbeatTransaction !== 'undefined'\n          ? this.heartbeatTransaction.toEncodingData()\n          : undefined,\n      ],\n      ['id', this.id],\n      [\n        'inner-txns',\n        typeof this.innerTxns !== 'undefined'\n          ? this.innerTxns.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['intra-round-offset', this.intraRoundOffset],\n      [\n        'keyreg-transaction',\n        typeof this.keyregTransaction !== 'undefined'\n          ? this.keyregTransaction.toEncodingData()\n          : undefined,\n      ],\n      ['lease', this.lease],\n      [\n        'local-state-delta',\n        typeof this.localStateDelta !== 'undefined'\n          ? this.localStateDelta.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['logs', this.logs],\n      ['note', this.note],\n      [\n        'payment-transaction',\n        typeof this.paymentTransaction !== 'undefined'\n          ? this.paymentTransaction.toEncodingData()\n          : undefined,\n      ],\n      ['receiver-rewards', this.receiverRewards],\n      [\n        'rekey-to',\n        typeof this.rekeyTo !== 'undefined'\n          ? this.rekeyTo.toString()\n          : undefined,\n      ],\n      ['round-time', this.roundTime],\n      ['sender-rewards', this.senderRewards],\n      [\n        'signature',\n        typeof this.signature !== 'undefined'\n          ? this.signature.toEncodingData()\n          : undefined,\n      ],\n      [\n        'state-proof-transaction',\n        typeof this.stateProofTransaction !== 'undefined'\n          ? this.stateProofTransaction.toEncodingData()\n          : undefined,\n      ],\n      ['tx-type', this.txType],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): Transaction {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded Transaction: ${data}`);\n    }\n    return new Transaction({\n      fee: data.get('fee'),\n      firstValid: data.get('first-valid'),\n      lastValid: data.get('last-valid'),\n      sender: data.get('sender'),\n      applicationTransaction:\n        typeof data.get('application-transaction') !== 'undefined'\n          ? TransactionApplication.fromEncodingData(\n              data.get('application-transaction')\n            )\n          : undefined,\n      assetConfigTransaction:\n        typeof data.get('asset-config-transaction') !== 'undefined'\n          ? TransactionAssetConfig.fromEncodingData(\n              data.get('asset-config-transaction')\n            )\n          : undefined,\n      assetFreezeTransaction:\n        typeof data.get('asset-freeze-transaction') !== 'undefined'\n          ? TransactionAssetFreeze.fromEncodingData(\n              data.get('asset-freeze-transaction')\n            )\n          : undefined,\n      assetTransferTransaction:\n        typeof data.get('asset-transfer-transaction') !== 'undefined'\n          ? TransactionAssetTransfer.fromEncodingData(\n              data.get('asset-transfer-transaction')\n            )\n          : undefined,\n      authAddr: data.get('auth-addr'),\n      closeRewards: data.get('close-rewards'),\n      closingAmount: data.get('closing-amount'),\n      confirmedRound: data.get('confirmed-round'),\n      createdApplicationIndex: data.get('created-application-index'),\n      createdAssetIndex: data.get('created-asset-index'),\n      genesisHash: data.get('genesis-hash'),\n      genesisId: data.get('genesis-id'),\n      globalStateDelta:\n        typeof data.get('global-state-delta') !== 'undefined'\n          ? data\n              .get('global-state-delta')\n              .map((v: unknown) => EvalDeltaKeyValue.fromEncodingData(v))\n          : undefined,\n      group: data.get('group'),\n      heartbeatTransaction:\n        typeof data.get('heartbeat-transaction') !== 'undefined'\n          ? TransactionHeartbeat.fromEncodingData(\n              data.get('heartbeat-transaction')\n            )\n          : undefined,\n      id: data.get('id'),\n      innerTxns:\n        typeof data.get('inner-txns') !== 'undefined'\n          ? data\n              .get('inner-txns')\n              .map((v: unknown) => Transaction.fromEncodingData(v))\n          : undefined,\n      intraRoundOffset: data.get('intra-round-offset'),\n      keyregTransaction:\n        typeof data.get('keyreg-transaction') !== 'undefined'\n          ? TransactionKeyreg.fromEncodingData(data.get('keyreg-transaction'))\n          : undefined,\n      lease: data.get('lease'),\n      localStateDelta:\n        typeof data.get('local-state-delta') !== 'undefined'\n          ? data\n              .get('local-state-delta')\n              .map((v: unknown) => AccountStateDelta.fromEncodingData(v))\n          : undefined,\n      logs: data.get('logs'),\n      note: data.get('note'),\n      paymentTransaction:\n        typeof data.get('payment-transaction') !== 'undefined'\n          ? TransactionPayment.fromEncodingData(data.get('payment-transaction'))\n          : undefined,\n      receiverRewards: data.get('receiver-rewards'),\n      rekeyTo: data.get('rekey-to'),\n      roundTime: data.get('round-time'),\n      senderRewards: data.get('sender-rewards'),\n      signature:\n        typeof data.get('signature') !== 'undefined'\n          ? TransactionSignature.fromEncodingData(data.get('signature'))\n          : undefined,\n      stateProofTransaction:\n        typeof data.get('state-proof-transaction') !== 'undefined'\n          ? TransactionStateProof.fromEncodingData(\n              data.get('state-proof-transaction')\n            )\n          : undefined,\n      txType: data.get('tx-type'),\n    });\n  }\n}\n\n/**\n * Fields for application transactions.\n * Definition:\n * data/transactions/application.go : ApplicationCallTxnFields\n */\nexport class TransactionApplication implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'application-id',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'accounts',\n          valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'application-args',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(new ByteArraySchema())\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'approval-program',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'clear-state-program',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'extra-program-pages',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'foreign-apps',\n          valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'foreign-assets',\n          valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),\n          omitEmpty: true,\n        },\n        {\n          key: 'global-state-schema',\n          valueSchema: new OptionalSchema(StateSchema.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'local-state-schema',\n          valueSchema: new OptionalSchema(StateSchema.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'on-completion',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (apid) ID of the application being configured or empty if creating.\n   */\n  public applicationId: bigint;\n\n  /**\n   * (apat) List of accounts in addition to the sender that may be accessed from the\n   * application's approval-program and clear-state-program.\n   */\n  public accounts?: Address[];\n\n  /**\n   * (apaa) transaction specific arguments accessed from the application's\n   * approval-program and clear-state-program.\n   */\n  public applicationArgs?: Uint8Array[];\n\n  /**\n   * (apap) Logic executed for every application transaction, except when\n   * on-completion is set to \"clear\". It can read and write global state for the\n   * application, as well as account-specific local state. Approval programs may\n   * reject the transaction.\n   */\n  public approvalProgram?: Uint8Array;\n\n  /**\n   * (apsu) Logic executed for application transactions with on-completion set to\n   * \"clear\". It can read and write global state for the application, as well as\n   * account-specific local state. Clear state programs cannot reject the\n   * transaction.\n   */\n  public clearStateProgram?: Uint8Array;\n\n  /**\n   * (epp) specifies the additional app program len requested in pages.\n   */\n  public extraProgramPages?: number;\n\n  /**\n   * (apfa) Lists the applications in addition to the application-id whose global\n   * states may be accessed by this application's approval-program and\n   * clear-state-program. The access is read-only.\n   */\n  public foreignApps?: bigint[];\n\n  /**\n   * (apas) lists the assets whose parameters may be accessed by this application's\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\n   */\n  public foreignAssets?: bigint[];\n\n  /**\n   * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   */\n  public globalStateSchema?: StateSchema;\n\n  /**\n   * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   */\n  public localStateSchema?: StateSchema;\n\n  /**\n   * (apan) defines the what additional actions occur with the transaction.\n   * Valid types:\n   * * noop\n   * * optin\n   * * closeout\n   * * clear\n   * * update\n   * * update\n   * * delete\n   */\n  public onCompletion?: string;\n\n  /**\n   * Creates a new `TransactionApplication` object.\n   * @param applicationId - (apid) ID of the application being configured or empty if creating.\n   * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\n   * application's approval-program and clear-state-program.\n   * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\n   * approval-program and clear-state-program.\n   * @param approvalProgram - (apap) Logic executed for every application transaction, except when\n   * on-completion is set to \"clear\". It can read and write global state for the\n   * application, as well as account-specific local state. Approval programs may\n   * reject the transaction.\n   * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\n   * \"clear\". It can read and write global state for the application, as well as\n   * account-specific local state. Clear state programs cannot reject the\n   * transaction.\n   * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\n   * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\n   * states may be accessed by this application's approval-program and\n   * clear-state-program. The access is read-only.\n   * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\n   * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n   * determine how much storage may be used in a local-state or global-state for an\n   * application. The more space used, the larger minimum balance must be maintained\n   * in the account holding the data.\n   * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\n   * Valid types:\n   * * noop\n   * * optin\n   * * closeout\n   * * clear\n   * * update\n   * * update\n   * * delete\n   */\n  constructor({\n    applicationId,\n    accounts,\n    applicationArgs,\n    approvalProgram,\n    clearStateProgram,\n    extraProgramPages,\n    foreignApps,\n    foreignAssets,\n    globalStateSchema,\n    localStateSchema,\n    onCompletion,\n  }: {\n    applicationId: number | bigint;\n    accounts?: (Address | string)[];\n    applicationArgs?: Uint8Array[];\n    approvalProgram?: string | Uint8Array;\n    clearStateProgram?: string | Uint8Array;\n    extraProgramPages?: number | bigint;\n    foreignApps?: (number | bigint)[];\n    foreignAssets?: (number | bigint)[];\n    globalStateSchema?: StateSchema;\n    localStateSchema?: StateSchema;\n    onCompletion?: string;\n  }) {\n    this.applicationId = ensureBigInt(applicationId);\n    this.accounts =\n      typeof accounts !== 'undefined'\n        ? accounts.map((addr) =>\n            typeof addr === 'string' ? Address.fromString(addr) : addr\n          )\n        : undefined;\n    this.applicationArgs = applicationArgs;\n    this.approvalProgram =\n      typeof approvalProgram === 'string'\n        ? base64ToBytes(approvalProgram)\n        : approvalProgram;\n    this.clearStateProgram =\n      typeof clearStateProgram === 'string'\n        ? base64ToBytes(clearStateProgram)\n        : clearStateProgram;\n    this.extraProgramPages =\n      typeof extraProgramPages === 'undefined'\n        ? undefined\n        : ensureSafeInteger(extraProgramPages);\n    this.foreignApps =\n      typeof foreignApps === 'undefined'\n        ? undefined\n        : foreignApps.map(ensureBigInt);\n    this.foreignAssets =\n      typeof foreignAssets === 'undefined'\n        ? undefined\n        : foreignAssets.map(ensureBigInt);\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.onCompletion = onCompletion;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionApplication.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['application-id', this.applicationId],\n      [\n        'accounts',\n        typeof this.accounts !== 'undefined'\n          ? this.accounts.map((v) => v.toString())\n          : undefined,\n      ],\n      ['application-args', this.applicationArgs],\n      ['approval-program', this.approvalProgram],\n      ['clear-state-program', this.clearStateProgram],\n      ['extra-program-pages', this.extraProgramPages],\n      ['foreign-apps', this.foreignApps],\n      ['foreign-assets', this.foreignAssets],\n      [\n        'global-state-schema',\n        typeof this.globalStateSchema !== 'undefined'\n          ? this.globalStateSchema.toEncodingData()\n          : undefined,\n      ],\n      [\n        'local-state-schema',\n        typeof this.localStateSchema !== 'undefined'\n          ? this.localStateSchema.toEncodingData()\n          : undefined,\n      ],\n      ['on-completion', this.onCompletion],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionApplication {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionApplication: ${data}`);\n    }\n    return new TransactionApplication({\n      applicationId: data.get('application-id'),\n      accounts: data.get('accounts'),\n      applicationArgs: data.get('application-args'),\n      approvalProgram: data.get('approval-program'),\n      clearStateProgram: data.get('clear-state-program'),\n      extraProgramPages: data.get('extra-program-pages'),\n      foreignApps: data.get('foreign-apps'),\n      foreignAssets: data.get('foreign-assets'),\n      globalStateSchema:\n        typeof data.get('global-state-schema') !== 'undefined'\n          ? StateSchema.fromEncodingData(data.get('global-state-schema'))\n          : undefined,\n      localStateSchema:\n        typeof data.get('local-state-schema') !== 'undefined'\n          ? StateSchema.fromEncodingData(data.get('local-state-schema'))\n          : undefined,\n      onCompletion: data.get('on-completion'),\n    });\n  }\n}\n\n/**\n * Fields for asset allocation, re-configuration, and destruction.\n * A zero value for asset-id indicates asset creation.\n * A zero value for the params indicates asset destruction.\n * Definition:\n * data/transactions/asset.go : AssetConfigTxnFields\n */\nexport class TransactionAssetConfig implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'asset-id',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'params',\n          valueSchema: new OptionalSchema(AssetParams.encodingSchema),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (xaid) ID of the asset being configured or empty if creating.\n   */\n  public assetId?: bigint;\n\n  /**\n   * AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  public params?: AssetParams;\n\n  /**\n   * Creates a new `TransactionAssetConfig` object.\n   * @param assetId - (xaid) ID of the asset being configured or empty if creating.\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor({\n    assetId,\n    params,\n  }: {\n    assetId?: number | bigint;\n    params?: AssetParams;\n  }) {\n    this.assetId =\n      typeof assetId === 'undefined' ? undefined : ensureBigInt(assetId);\n    this.params = params;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionAssetConfig.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['asset-id', this.assetId],\n      [\n        'params',\n        typeof this.params !== 'undefined'\n          ? this.params.toEncodingData()\n          : undefined,\n      ],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionAssetConfig {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionAssetConfig: ${data}`);\n    }\n    return new TransactionAssetConfig({\n      assetId: data.get('asset-id'),\n      params:\n        typeof data.get('params') !== 'undefined'\n          ? AssetParams.fromEncodingData(data.get('params'))\n          : undefined,\n    });\n  }\n}\n\n/**\n * Fields for an asset freeze transaction.\n * Definition:\n * data/transactions/asset.go : AssetFreezeTxnFields\n */\nexport class TransactionAssetFreeze implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'address', valueSchema: new StringSchema(), omitEmpty: true },\n        { key: 'asset-id', valueSchema: new Uint64Schema(), omitEmpty: true },\n        {\n          key: 'new-freeze-status',\n          valueSchema: new BooleanSchema(),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (fadd) Address of the account whose asset is being frozen or thawed.\n   */\n  public address: string;\n\n  /**\n   * (faid) ID of the asset being frozen or thawed.\n   */\n  public assetId: bigint;\n\n  /**\n   * (afrz) The new freeze status.\n   */\n  public newFreezeStatus: boolean;\n\n  /**\n   * Creates a new `TransactionAssetFreeze` object.\n   * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\n   * @param assetId - (faid) ID of the asset being frozen or thawed.\n   * @param newFreezeStatus - (afrz) The new freeze status.\n   */\n  constructor({\n    address,\n    assetId,\n    newFreezeStatus,\n  }: {\n    address: string;\n    assetId: number | bigint;\n    newFreezeStatus: boolean;\n  }) {\n    this.address = address;\n    this.assetId = ensureBigInt(assetId);\n    this.newFreezeStatus = newFreezeStatus;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionAssetFreeze.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['address', this.address],\n      ['asset-id', this.assetId],\n      ['new-freeze-status', this.newFreezeStatus],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionAssetFreeze {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionAssetFreeze: ${data}`);\n    }\n    return new TransactionAssetFreeze({\n      address: data.get('address'),\n      assetId: data.get('asset-id'),\n      newFreezeStatus: data.get('new-freeze-status'),\n    });\n  }\n}\n\n/**\n * Fields for an asset transfer transaction.\n * Definition:\n * data/transactions/asset.go : AssetTransferTxnFields\n */\nexport class TransactionAssetTransfer implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'asset-id', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'receiver', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'close-amount',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'close-to',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'sender',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n   * that asset in the account's Assets map.\n   */\n  public amount: bigint;\n\n  /**\n   * (xaid) ID of the asset being transferred.\n   */\n  public assetId: bigint;\n\n  /**\n   * (arcv) Recipient address of the transfer.\n   */\n  public receiver: string;\n\n  /**\n   * Number of assets transferred to the close-to account as part of the transaction.\n   */\n  public closeAmount?: bigint;\n\n  /**\n   * (aclose) Indicates that the asset should be removed from the account's Assets\n   * map, and specifies where the remaining asset holdings should be transferred.\n   * It's always valid to transfer remaining asset holdings to the creator account.\n   */\n  public closeTo?: string;\n\n  /**\n   * (asnd) The effective sender during a clawback transactions. If this is not a\n   * zero value, the real transaction sender must be the Clawback address from the\n   * AssetParams.\n   */\n  public sender?: string;\n\n  /**\n   * Creates a new `TransactionAssetTransfer` object.\n   * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n   * that asset in the account's Assets map.\n   * @param assetId - (xaid) ID of the asset being transferred.\n   * @param receiver - (arcv) Recipient address of the transfer.\n   * @param closeAmount - Number of assets transferred to the close-to account as part of the transaction.\n   * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\n   * map, and specifies where the remaining asset holdings should be transferred.\n   * It's always valid to transfer remaining asset holdings to the creator account.\n   * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\n   * zero value, the real transaction sender must be the Clawback address from the\n   * AssetParams.\n   */\n  constructor({\n    amount,\n    assetId,\n    receiver,\n    closeAmount,\n    closeTo,\n    sender,\n  }: {\n    amount: number | bigint;\n    assetId: number | bigint;\n    receiver: string;\n    closeAmount?: number | bigint;\n    closeTo?: string;\n    sender?: string;\n  }) {\n    this.amount = ensureBigInt(amount);\n    this.assetId = ensureBigInt(assetId);\n    this.receiver = receiver;\n    this.closeAmount =\n      typeof closeAmount === 'undefined'\n        ? undefined\n        : ensureBigInt(closeAmount);\n    this.closeTo = closeTo;\n    this.sender = sender;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionAssetTransfer.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['amount', this.amount],\n      ['asset-id', this.assetId],\n      ['receiver', this.receiver],\n      ['close-amount', this.closeAmount],\n      ['close-to', this.closeTo],\n      ['sender', this.sender],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionAssetTransfer {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionAssetTransfer: ${data}`);\n    }\n    return new TransactionAssetTransfer({\n      amount: data.get('amount'),\n      assetId: data.get('asset-id'),\n      receiver: data.get('receiver'),\n      closeAmount: data.get('close-amount'),\n      closeTo: data.get('close-to'),\n      sender: data.get('sender'),\n    });\n  }\n}\n\n/**\n * Fields for a heartbeat transaction.\n * Definition:\n * data/transactions/heartbeat.go : HeartbeatTxnFields\n */\nexport class TransactionHeartbeat implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'hb-address', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'hb-key-dilution',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'hb-proof',\n          valueSchema: HbProofFields.encodingSchema,\n          omitEmpty: true,\n        },\n        { key: 'hb-seed', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        {\n          key: 'hb-vote-id',\n          valueSchema: new ByteArraySchema(),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (hbad) HbAddress is the account this txn is proving onlineness for.\n   */\n  public hbAddress: string;\n\n  /**\n   * (hbkd) HbKeyDilution must match HbAddress account's current KeyDilution.\n   */\n  public hbKeyDilution: bigint;\n\n  /**\n   * (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\n   * it is online.\n   */\n  public hbProof: HbProofFields;\n\n  /**\n   * (hbsd) HbSeed must be the block seed for the this transaction's firstValid\n   * block.\n   */\n  public hbSeed: Uint8Array;\n\n  /**\n   * (hbvid) HbVoteID must match the HbAddress account's current VoteID.\n   */\n  public hbVoteId: Uint8Array;\n\n  /**\n   * Creates a new `TransactionHeartbeat` object.\n   * @param hbAddress - (hbad) HbAddress is the account this txn is proving onlineness for.\n   * @param hbKeyDilution - (hbkd) HbKeyDilution must match HbAddress account's current KeyDilution.\n   * @param hbProof - (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\n   * it is online.\n   * @param hbSeed - (hbsd) HbSeed must be the block seed for the this transaction's firstValid\n   * block.\n   * @param hbVoteId - (hbvid) HbVoteID must match the HbAddress account's current VoteID.\n   */\n  constructor({\n    hbAddress,\n    hbKeyDilution,\n    hbProof,\n    hbSeed,\n    hbVoteId,\n  }: {\n    hbAddress: string;\n    hbKeyDilution: number | bigint;\n    hbProof: HbProofFields;\n    hbSeed: string | Uint8Array;\n    hbVoteId: string | Uint8Array;\n  }) {\n    this.hbAddress = hbAddress;\n    this.hbKeyDilution = ensureBigInt(hbKeyDilution);\n    this.hbProof = hbProof;\n    this.hbSeed = typeof hbSeed === 'string' ? base64ToBytes(hbSeed) : hbSeed;\n    this.hbVoteId =\n      typeof hbVoteId === 'string' ? base64ToBytes(hbVoteId) : hbVoteId;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionHeartbeat.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['hb-address', this.hbAddress],\n      ['hb-key-dilution', this.hbKeyDilution],\n      ['hb-proof', this.hbProof.toEncodingData()],\n      ['hb-seed', this.hbSeed],\n      ['hb-vote-id', this.hbVoteId],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionHeartbeat {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionHeartbeat: ${data}`);\n    }\n    return new TransactionHeartbeat({\n      hbAddress: data.get('hb-address'),\n      hbKeyDilution: data.get('hb-key-dilution'),\n      hbProof: HbProofFields.fromEncodingData(\n        data.get('hb-proof') ?? new Map()\n      ),\n      hbSeed: data.get('hb-seed'),\n      hbVoteId: data.get('hb-vote-id'),\n    });\n  }\n}\n\n/**\n * Fields for a keyreg transaction.\n * Definition:\n * data/transactions/keyreg.go : KeyregTxnFields\n */\nexport class TransactionKeyreg implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'non-participation',\n          valueSchema: new OptionalSchema(new BooleanSchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'selection-participation-key',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'state-proof-key',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-first-valid',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-key-dilution',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-last-valid',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'vote-participation-key',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (nonpart) Mark the account as participating or non-participating.\n   */\n  public nonParticipation?: boolean;\n\n  /**\n   * (selkey) Public key used with the Verified Random Function (VRF) result during\n   * committee selection.\n   */\n  public selectionParticipationKey?: Uint8Array;\n\n  /**\n   * (sprfkey) State proof key used in key registration transactions.\n   */\n  public stateProofKey?: Uint8Array;\n\n  /**\n   * (votefst) First round this participation key is valid.\n   */\n  public voteFirstValid?: bigint;\n\n  /**\n   * (votekd) Number of subkeys in each batch of participation keys.\n   */\n  public voteKeyDilution?: bigint;\n\n  /**\n   * (votelst) Last round this participation key is valid.\n   */\n  public voteLastValid?: bigint;\n\n  /**\n   * (votekey) Participation public key used in key registration transactions.\n   */\n  public voteParticipationKey?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionKeyreg` object.\n   * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\n   * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\n   * committee selection.\n   * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\n   * @param voteFirstValid - (votefst) First round this participation key is valid.\n   * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (votelst) Last round this participation key is valid.\n   * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\n   */\n  constructor({\n    nonParticipation,\n    selectionParticipationKey,\n    stateProofKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n  }: {\n    nonParticipation?: boolean;\n    selectionParticipationKey?: string | Uint8Array;\n    stateProofKey?: string | Uint8Array;\n    voteFirstValid?: number | bigint;\n    voteKeyDilution?: number | bigint;\n    voteLastValid?: number | bigint;\n    voteParticipationKey?: string | Uint8Array;\n  }) {\n    this.nonParticipation = nonParticipation;\n    this.selectionParticipationKey =\n      typeof selectionParticipationKey === 'string'\n        ? base64ToBytes(selectionParticipationKey)\n        : selectionParticipationKey;\n    this.stateProofKey =\n      typeof stateProofKey === 'string'\n        ? base64ToBytes(stateProofKey)\n        : stateProofKey;\n    this.voteFirstValid =\n      typeof voteFirstValid === 'undefined'\n        ? undefined\n        : ensureBigInt(voteFirstValid);\n    this.voteKeyDilution =\n      typeof voteKeyDilution === 'undefined'\n        ? undefined\n        : ensureBigInt(voteKeyDilution);\n    this.voteLastValid =\n      typeof voteLastValid === 'undefined'\n        ? undefined\n        : ensureBigInt(voteLastValid);\n    this.voteParticipationKey =\n      typeof voteParticipationKey === 'string'\n        ? base64ToBytes(voteParticipationKey)\n        : voteParticipationKey;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionKeyreg.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['non-participation', this.nonParticipation],\n      ['selection-participation-key', this.selectionParticipationKey],\n      ['state-proof-key', this.stateProofKey],\n      ['vote-first-valid', this.voteFirstValid],\n      ['vote-key-dilution', this.voteKeyDilution],\n      ['vote-last-valid', this.voteLastValid],\n      ['vote-participation-key', this.voteParticipationKey],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionKeyreg {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionKeyreg: ${data}`);\n    }\n    return new TransactionKeyreg({\n      nonParticipation: data.get('non-participation'),\n      selectionParticipationKey: data.get('selection-participation-key'),\n      stateProofKey: data.get('state-proof-key'),\n      voteFirstValid: data.get('vote-first-valid'),\n      voteKeyDilution: data.get('vote-key-dilution'),\n      voteLastValid: data.get('vote-last-valid'),\n      voteParticipationKey: data.get('vote-participation-key'),\n    });\n  }\n}\n\n/**\n * Fields for a payment transaction.\n * Definition:\n * data/transactions/payment.go : PaymentTxnFields\n */\nexport class TransactionPayment implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true },\n        { key: 'receiver', valueSchema: new StringSchema(), omitEmpty: true },\n        {\n          key: 'close-amount',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'close-remainder-to',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (amt) number of MicroAlgos intended to be transferred.\n   */\n  public amount: bigint;\n\n  /**\n   * (rcv) receiver's address.\n   */\n  public receiver: string;\n\n  /**\n   * Number of MicroAlgos that were sent to the close-remainder-to address when\n   * closing the sender account.\n   */\n  public closeAmount?: bigint;\n\n  /**\n   * (close) when set, indicates that the sending account should be closed and all\n   * remaining funds be transferred to this address.\n   */\n  public closeRemainderTo?: string;\n\n  /**\n   * Creates a new `TransactionPayment` object.\n   * @param amount - (amt) number of MicroAlgos intended to be transferred.\n   * @param receiver - (rcv) receiver's address.\n   * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\n   * closing the sender account.\n   * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\n   * remaining funds be transferred to this address.\n   */\n  constructor({\n    amount,\n    receiver,\n    closeAmount,\n    closeRemainderTo,\n  }: {\n    amount: number | bigint;\n    receiver: string;\n    closeAmount?: number | bigint;\n    closeRemainderTo?: string;\n  }) {\n    this.amount = ensureBigInt(amount);\n    this.receiver = receiver;\n    this.closeAmount =\n      typeof closeAmount === 'undefined'\n        ? undefined\n        : ensureBigInt(closeAmount);\n    this.closeRemainderTo = closeRemainderTo;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionPayment.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['amount', this.amount],\n      ['receiver', this.receiver],\n      ['close-amount', this.closeAmount],\n      ['close-remainder-to', this.closeRemainderTo],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionPayment {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionPayment: ${data}`);\n    }\n    return new TransactionPayment({\n      amount: data.get('amount'),\n      receiver: data.get('receiver'),\n      closeAmount: data.get('close-amount'),\n      closeRemainderTo: data.get('close-remainder-to'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class TransactionResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'transaction',\n          valueSchema: Transaction.encodingSchema,\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  /**\n   * Contains all fields common to all transactions and serves as an envelope to all\n   * transactions type. Represents both regular and inner transactions.\n   * Definition:\n   * data/transactions/signedtxn.go : SignedTxn\n   * data/transactions/transaction.go : Transaction\n   */\n  public transaction: Transaction;\n\n  /**\n   * Creates a new `TransactionResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\n   * transactions type. Represents both regular and inner transactions.\n   * Definition:\n   * data/transactions/signedtxn.go : SignedTxn\n   * data/transactions/transaction.go : Transaction\n   */\n  constructor({\n    currentRound,\n    transaction,\n  }: {\n    currentRound: number | bigint;\n    transaction: Transaction;\n  }) {\n    this.currentRound = ensureBigInt(currentRound);\n    this.transaction = transaction;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['current-round', this.currentRound],\n      ['transaction', this.transaction.toEncodingData()],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionResponse: ${data}`);\n    }\n    return new TransactionResponse({\n      currentRound: data.get('current-round'),\n      transaction: Transaction.fromEncodingData(\n        data.get('transaction') ?? new Map()\n      ),\n    });\n  }\n}\n\n/**\n * Validation signature associated with some data. Only one of the signatures\n * should be provided.\n */\nexport class TransactionSignature implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'logicsig',\n          valueSchema: new OptionalSchema(\n            TransactionSignatureLogicsig.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'multisig',\n          valueSchema: new OptionalSchema(\n            TransactionSignatureMultisig.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'sig',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (lsig) Programatic transaction signature.\n   * Definition:\n   * data/transactions/logicsig.go\n   */\n  public logicsig?: TransactionSignatureLogicsig;\n\n  /**\n   * (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   */\n  public multisig?: TransactionSignatureMultisig;\n\n  /**\n   * (sig) Standard ed25519 signature.\n   */\n  public sig?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionSignature` object.\n   * @param logicsig - (lsig) Programatic transaction signature.\n   * Definition:\n   * data/transactions/logicsig.go\n   * @param multisig - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param sig - (sig) Standard ed25519 signature.\n   */\n  constructor({\n    logicsig,\n    multisig,\n    sig,\n  }: {\n    logicsig?: TransactionSignatureLogicsig;\n    multisig?: TransactionSignatureMultisig;\n    sig?: string | Uint8Array;\n  }) {\n    this.logicsig = logicsig;\n    this.multisig = multisig;\n    this.sig = typeof sig === 'string' ? base64ToBytes(sig) : sig;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionSignature.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'logicsig',\n        typeof this.logicsig !== 'undefined'\n          ? this.logicsig.toEncodingData()\n          : undefined,\n      ],\n      [\n        'multisig',\n        typeof this.multisig !== 'undefined'\n          ? this.multisig.toEncodingData()\n          : undefined,\n      ],\n      ['sig', this.sig],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionSignature {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionSignature: ${data}`);\n    }\n    return new TransactionSignature({\n      logicsig:\n        typeof data.get('logicsig') !== 'undefined'\n          ? TransactionSignatureLogicsig.fromEncodingData(data.get('logicsig'))\n          : undefined,\n      multisig:\n        typeof data.get('multisig') !== 'undefined'\n          ? TransactionSignatureMultisig.fromEncodingData(data.get('multisig'))\n          : undefined,\n      sig: data.get('sig'),\n    });\n  }\n}\n\n/**\n * (lsig) Programatic transaction signature.\n * Definition:\n * data/transactions/logicsig.go\n */\nexport class TransactionSignatureLogicsig implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        { key: 'logic', valueSchema: new ByteArraySchema(), omitEmpty: true },\n        {\n          key: 'args',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(new ByteArraySchema())\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'multisig-signature',\n          valueSchema: new OptionalSchema(\n            TransactionSignatureMultisig.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'signature',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (l) Program signed by a signature or multi signature, or hashed to be the\n   * address of ana ccount. Base64 encoded TEAL program.\n   */\n  public logic: Uint8Array;\n\n  /**\n   * (arg) Logic arguments, base64 encoded.\n   */\n  public args?: Uint8Array[];\n\n  /**\n   * (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   */\n  public multisigSignature?: TransactionSignatureMultisig;\n\n  /**\n   * (sig) ed25519 signature.\n   */\n  public signature?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionSignatureLogicsig` object.\n   * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\n   * address of ana ccount. Base64 encoded TEAL program.\n   * @param args - (arg) Logic arguments, base64 encoded.\n   * @param multisigSignature - (msig) structure holding multiple subsignatures.\n   * Definition:\n   * crypto/multisig.go : MultisigSig\n   * @param signature - (sig) ed25519 signature.\n   */\n  constructor({\n    logic,\n    args,\n    multisigSignature,\n    signature,\n  }: {\n    logic: string | Uint8Array;\n    args?: Uint8Array[];\n    multisigSignature?: TransactionSignatureMultisig;\n    signature?: string | Uint8Array;\n  }) {\n    this.logic = typeof logic === 'string' ? base64ToBytes(logic) : logic;\n    this.args = args;\n    this.multisigSignature = multisigSignature;\n    this.signature =\n      typeof signature === 'string' ? base64ToBytes(signature) : signature;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionSignatureLogicsig.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['logic', this.logic],\n      ['args', this.args],\n      [\n        'multisig-signature',\n        typeof this.multisigSignature !== 'undefined'\n          ? this.multisigSignature.toEncodingData()\n          : undefined,\n      ],\n      ['signature', this.signature],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionSignatureLogicsig {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionSignatureLogicsig: ${data}`);\n    }\n    return new TransactionSignatureLogicsig({\n      logic: data.get('logic'),\n      args: data.get('args'),\n      multisigSignature:\n        typeof data.get('multisig-signature') !== 'undefined'\n          ? TransactionSignatureMultisig.fromEncodingData(\n              data.get('multisig-signature')\n            )\n          : undefined,\n      signature: data.get('signature'),\n    });\n  }\n}\n\n/**\n * (msig) structure holding multiple subsignatures.\n * Definition:\n * crypto/multisig.go : MultisigSig\n */\nexport class TransactionSignatureMultisig implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'subsignature',\n          valueSchema: new OptionalSchema(\n            new ArraySchema(\n              TransactionSignatureMultisigSubsignature.encodingSchema\n            )\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'threshold',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'version',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (subsig) holds pairs of public key and signatures.\n   */\n  public subsignature?: TransactionSignatureMultisigSubsignature[];\n\n  /**\n   * (thr)\n   */\n  public threshold?: number;\n\n  /**\n   * (v)\n   */\n  public version?: number;\n\n  /**\n   * Creates a new `TransactionSignatureMultisig` object.\n   * @param subsignature - (subsig) holds pairs of public key and signatures.\n   * @param threshold - (thr)\n   * @param version - (v)\n   */\n  constructor({\n    subsignature,\n    threshold,\n    version,\n  }: {\n    subsignature?: TransactionSignatureMultisigSubsignature[];\n    threshold?: number | bigint;\n    version?: number | bigint;\n  }) {\n    this.subsignature = subsignature;\n    this.threshold =\n      typeof threshold === 'undefined'\n        ? undefined\n        : ensureSafeInteger(threshold);\n    this.version =\n      typeof version === 'undefined' ? undefined : ensureSafeInteger(version);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionSignatureMultisig.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'subsignature',\n        typeof this.subsignature !== 'undefined'\n          ? this.subsignature.map((v) => v.toEncodingData())\n          : undefined,\n      ],\n      ['threshold', this.threshold],\n      ['version', this.version],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionSignatureMultisig {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionSignatureMultisig: ${data}`);\n    }\n    return new TransactionSignatureMultisig({\n      subsignature:\n        typeof data.get('subsignature') !== 'undefined'\n          ? data\n              .get('subsignature')\n              .map((v: unknown) =>\n                TransactionSignatureMultisigSubsignature.fromEncodingData(v)\n              )\n          : undefined,\n      threshold: data.get('threshold'),\n      version: data.get('version'),\n    });\n  }\n}\n\nexport class TransactionSignatureMultisigSubsignature implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'public-key',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        },\n        {\n          key: 'signature',\n          valueSchema: new OptionalSchema(new ByteArraySchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (pk)\n   */\n  public publicKey?: Uint8Array;\n\n  /**\n   * (s)\n   */\n  public signature?: Uint8Array;\n\n  /**\n   * Creates a new `TransactionSignatureMultisigSubsignature` object.\n   * @param publicKey - (pk)\n   * @param signature - (s)\n   */\n  constructor({\n    publicKey,\n    signature,\n  }: {\n    publicKey?: string | Uint8Array;\n    signature?: string | Uint8Array;\n  }) {\n    this.publicKey =\n      typeof publicKey === 'string' ? base64ToBytes(publicKey) : publicKey;\n    this.signature =\n      typeof signature === 'string' ? base64ToBytes(signature) : signature;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionSignatureMultisigSubsignature.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['public-key', this.publicKey],\n      ['signature', this.signature],\n    ]);\n  }\n\n  static fromEncodingData(\n    data: unknown\n  ): TransactionSignatureMultisigSubsignature {\n    if (!(data instanceof Map)) {\n      throw new Error(\n        `Invalid decoded TransactionSignatureMultisigSubsignature: ${data}`\n      );\n    }\n    return new TransactionSignatureMultisigSubsignature({\n      publicKey: data.get('public-key'),\n      signature: data.get('signature'),\n    });\n  }\n}\n\n/**\n * Fields for a state proof transaction.\n * Definition:\n * data/transactions/stateproof.go : StateProofTxnFields\n */\nexport class TransactionStateProof implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'message',\n          valueSchema: new OptionalSchema(\n            IndexerStateProofMessage.encodingSchema\n          ),\n          omitEmpty: true,\n        },\n        {\n          key: 'state-proof',\n          valueSchema: new OptionalSchema(StateProofFields.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'state-proof-type',\n          valueSchema: new OptionalSchema(new Uint64Schema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * (spmsg)\n   */\n  public message?: IndexerStateProofMessage;\n\n  /**\n   * (sp) represents a state proof.\n   * Definition:\n   * crypto/stateproof/structs.go : StateProof\n   */\n  public stateProof?: StateProofFields;\n\n  /**\n   * (sptype) Type of the state proof. Integer representing an entry defined in\n   * protocol/stateproof.go\n   */\n  public stateProofType?: number;\n\n  /**\n   * Creates a new `TransactionStateProof` object.\n   * @param message - (spmsg)\n   * @param stateProof - (sp) represents a state proof.\n   * Definition:\n   * crypto/stateproof/structs.go : StateProof\n   * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\n   * protocol/stateproof.go\n   */\n  constructor({\n    message,\n    stateProof,\n    stateProofType,\n  }: {\n    message?: IndexerStateProofMessage;\n    stateProof?: StateProofFields;\n    stateProofType?: number | bigint;\n  }) {\n    this.message = message;\n    this.stateProof = stateProof;\n    this.stateProofType =\n      typeof stateProofType === 'undefined'\n        ? undefined\n        : ensureSafeInteger(stateProofType);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionStateProof.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      [\n        'message',\n        typeof this.message !== 'undefined'\n          ? this.message.toEncodingData()\n          : undefined,\n      ],\n      [\n        'state-proof',\n        typeof this.stateProof !== 'undefined'\n          ? this.stateProof.toEncodingData()\n          : undefined,\n      ],\n      ['state-proof-type', this.stateProofType],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionStateProof {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionStateProof: ${data}`);\n    }\n    return new TransactionStateProof({\n      message:\n        typeof data.get('message') !== 'undefined'\n          ? IndexerStateProofMessage.fromEncodingData(data.get('message'))\n          : undefined,\n      stateProof:\n        typeof data.get('state-proof') !== 'undefined'\n          ? StateProofFields.fromEncodingData(data.get('state-proof'))\n          : undefined,\n      stateProofType: data.get('state-proof-type'),\n    });\n  }\n}\n\n/**\n *\n */\nexport class TransactionsResponse implements Encodable {\n  private static encodingSchemaValue: Schema | undefined;\n\n  static get encodingSchema(): Schema {\n    if (!this.encodingSchemaValue) {\n      this.encodingSchemaValue = new NamedMapSchema([]);\n      (this.encodingSchemaValue as NamedMapSchema).pushEntries(\n        {\n          key: 'current-round',\n          valueSchema: new Uint64Schema(),\n          omitEmpty: true,\n        },\n        {\n          key: 'transactions',\n          valueSchema: new ArraySchema(Transaction.encodingSchema),\n          omitEmpty: true,\n        },\n        {\n          key: 'next-token',\n          valueSchema: new OptionalSchema(new StringSchema()),\n          omitEmpty: true,\n        }\n      );\n    }\n    return this.encodingSchemaValue;\n  }\n\n  /**\n   * Round at which the results were computed.\n   */\n  public currentRound: bigint;\n\n  public transactions: Transaction[];\n\n  /**\n   * Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  public nextToken?: string;\n\n  /**\n   * Creates a new `TransactionsResponse` object.\n   * @param currentRound - Round at which the results were computed.\n   * @param transactions -\n   * @param nextToken - Used for pagination, when making another request provide this token with the\n   * next parameter.\n   */\n  constructor({\n    currentRound,\n    transactions,\n    nextToken,\n  }: {\n    currentRound: number | bigint;\n    transactions: Transaction[];\n    nextToken?: string;\n  }) {\n    this.currentRound = ensureBigInt(currentRound);\n    this.transactions = transactions;\n    this.nextToken = nextToken;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEncodingSchema(): Schema {\n    return TransactionsResponse.encodingSchema;\n  }\n\n  toEncodingData(): Map<string, unknown> {\n    return new Map<string, unknown>([\n      ['current-round', this.currentRound],\n      ['transactions', this.transactions.map((v) => v.toEncodingData())],\n      ['next-token', this.nextToken],\n    ]);\n  }\n\n  static fromEncodingData(data: unknown): TransactionsResponse {\n    if (!(data instanceof Map)) {\n      throw new Error(`Invalid decoded TransactionsResponse: ${data}`);\n    }\n    return new TransactionsResponse({\n      currentRound: data.get('current-round'),\n      transactions: (data.get('transactions') ?? []).map((v: unknown) =>\n        Transaction.fromEncodingData(v)\n      ),\n      nextToken: data.get('next-token'),\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}