{"ast":null,"code":"import JSONRequest from '../jsonrequest.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport { TransactionParametersResponse } from './models/types.js';\n/**\n * Returns the common needed parameters for a new transaction, in a format the transaction builder expects\n */\nexport default class SuggestedParamsRequest extends JSONRequest {\n  /* eslint-disable class-methods-use-this */\n  path() {\n    return '/v2/transactions/params';\n  }\n  prepare(response) {\n    const params = decodeJSON(response.getJSONText(), TransactionParametersResponse);\n    return {\n      flatFee: false,\n      fee: params.fee,\n      firstValid: params.lastRound,\n      lastValid: params.lastRound + BigInt(1000),\n      genesisID: params.genesisId,\n      genesisHash: params.genesisHash,\n      minFee: params.minFee,\n      consensusVersion: params.consensusVersion\n    };\n  }\n}","map":{"version":3,"names":["JSONRequest","decodeJSON","TransactionParametersResponse","SuggestedParamsRequest","path","prepare","response","params","getJSONText","flatFee","fee","firstValid","lastRound","lastValid","BigInt","genesisID","genesisId","genesisHash","minFee","consensusVersion"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\algod\\suggestedParams.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest.js';\nimport { HTTPClientResponse } from '../../client.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport { TransactionParametersResponse } from './models/types.js';\nimport { SuggestedParams } from '../../../types/transactions/base.js';\n\n/**\n * SuggestedParamsFromAlgod contains the suggested parameters for a new transaction, as returned by\n * the algod REST API.\n *\n * This exists because the SuggestedParams interface is purposefully general (e.g. fee can be a\n * number or a bigint), and compared to that the algod API returns a narrower type.\n */\nexport interface SuggestedParamsFromAlgod extends SuggestedParams {\n  flatFee: boolean;\n  fee: bigint;\n  minFee: bigint;\n  firstValid: bigint;\n  lastValid: bigint;\n  genesisID: string;\n  genesisHash: Uint8Array;\n\n  /**\n   * ConsensusVersion indicates the consensus protocol version as of the last round.\n   */\n  consensusVersion: string;\n}\n\n/**\n * Returns the common needed parameters for a new transaction, in a format the transaction builder expects\n */\nexport default class SuggestedParamsRequest extends JSONRequest<SuggestedParamsFromAlgod> {\n  /* eslint-disable class-methods-use-this */\n  path() {\n    return '/v2/transactions/params';\n  }\n\n  prepare(response: HTTPClientResponse): SuggestedParamsFromAlgod {\n    const params = decodeJSON(\n      response.getJSONText(),\n      TransactionParametersResponse\n    );\n    return {\n      flatFee: false,\n      fee: params.fee,\n      firstValid: params.lastRound,\n      lastValid: params.lastRound + BigInt(1000),\n      genesisID: params.genesisId,\n      genesisHash: params.genesisHash,\n      minFee: params.minFee,\n      consensusVersion: params.consensusVersion,\n    };\n  }\n  /* eslint-enable class-methods-use-this */\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAE3C,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,SAASC,6BAA6B,QAAQ,mBAAmB;AAyBjE;;;AAGA,eAAc,MAAOC,sBAAuB,SAAQH,WAAqC;EACvF;EACAI,IAAIA,CAAA;IACF,OAAO,yBAAyB;EAClC;EAEAC,OAAOA,CAACC,QAA4B;IAClC,MAAMC,MAAM,GAAGN,UAAU,CACvBK,QAAQ,CAACE,WAAW,EAAE,EACtBN,6BAA6B,CAC9B;IACD,OAAO;MACLO,OAAO,EAAE,KAAK;MACdC,GAAG,EAAEH,MAAM,CAACG,GAAG;MACfC,UAAU,EAAEJ,MAAM,CAACK,SAAS;MAC5BC,SAAS,EAAEN,MAAM,CAACK,SAAS,GAAGE,MAAM,CAAC,IAAI,CAAC;MAC1CC,SAAS,EAAER,MAAM,CAACS,SAAS;MAC3BC,WAAW,EAAEV,MAAM,CAACU,WAAW;MAC/BC,MAAM,EAAEX,MAAM,CAACW,MAAM;MACrBC,gBAAgB,EAAEZ,MAAM,CAACY;KAC1B;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}