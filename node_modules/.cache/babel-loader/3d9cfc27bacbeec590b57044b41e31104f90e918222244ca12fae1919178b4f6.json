{"ast":null,"code":"import { isNode } from '../utils/utils.js';\n/**\n * Convert a base64 string to a Uint8Array for Node.js and browser environments.\n * @returns A Uint8Array\n */\nexport function base64ToBytes(base64String) {\n  if (isNode()) {\n    return new Uint8Array(Buffer.from(base64String, 'base64'));\n  }\n  /* eslint-env browser */\n  const binString = atob(base64String);\n  return Uint8Array.from(binString, m => m.codePointAt(0));\n}\n/**\n * Convert a Uint8Array to a base64 string for Node.js and browser environments.\n * @returns A base64 string\n */\nexport function bytesToBase64(byteArray) {\n  if (isNode()) {\n    return Buffer.from(byteArray).toString('base64');\n  }\n  /* eslint-env browser */\n  const binString = Array.from(byteArray, x => String.fromCodePoint(x)).join('');\n  return btoa(binString);\n}\n/**\n * Convert a byte array to a UTF-8 string. Warning: not all byte arrays are valid UTF-8.\n * @returns A decoded string\n */\nexport function bytesToString(byteArray) {\n  return new TextDecoder().decode(byteArray);\n}\n/**\n * Returns a Uint8Array given an input string or Uint8Array.\n * @returns A base64 string\n */\nexport function coerceToBytes(input) {\n  if (typeof input === 'string') {\n    return new TextEncoder().encode(input);\n  }\n  return input;\n}\n/**\n * Convert a Uint8Array to a hex string for Node.js and browser environments.\n * @returns A hex string\n */\nexport function bytesToHex(byteArray) {\n  if (isNode()) {\n    return Buffer.from(byteArray).toString('hex');\n  }\n  return Array.from(byteArray).map(i => i.toString(16).padStart(2, '0')).join('');\n}\n/**\n * Convert a hex string to Uint8Array for Node.js and browser environments.\n * @returns A Uint8Array\n */\nexport function hexToBytes(hexString) {\n  if (isNode()) {\n    return Buffer.from(hexString, 'hex');\n  }\n  let hex = hexString;\n  if (hexString.length % 2 !== 0) {\n    hex = hexString.padStart(1, '0');\n  }\n  const byteArray = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length / 2; i++) {\n    byteArray[i] = parseInt(hex.slice(2 * i, 2 * i + 2), 16);\n  }\n  return byteArray;\n}","map":{"version":3,"names":["isNode","base64ToBytes","base64String","Uint8Array","Buffer","from","binString","atob","m","codePointAt","bytesToBase64","byteArray","toString","Array","x","String","fromCodePoint","join","btoa","bytesToString","TextDecoder","decode","coerceToBytes","input","TextEncoder","encode","bytesToHex","map","i","padStart","hexToBytes","hexString","hex","length","parseInt","slice"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\encoding\\binarydata.ts"],"sourcesContent":["import { isNode } from '../utils/utils.js';\n\n/**\n * Convert a base64 string to a Uint8Array for Node.js and browser environments.\n * @returns A Uint8Array\n */\nexport function base64ToBytes(base64String: string): Uint8Array {\n  if (isNode()) {\n    return new Uint8Array(Buffer.from(base64String, 'base64'));\n  }\n  /* eslint-env browser */\n  const binString = atob(base64String);\n  return Uint8Array.from(binString, (m) => m.codePointAt(0)!);\n}\n\n/**\n * Convert a Uint8Array to a base64 string for Node.js and browser environments.\n * @returns A base64 string\n */\nexport function bytesToBase64(byteArray: Uint8Array): string {\n  if (isNode()) {\n    return Buffer.from(byteArray).toString('base64');\n  }\n  /* eslint-env browser */\n  const binString = Array.from(byteArray, (x) => String.fromCodePoint(x)).join(\n    ''\n  );\n  return btoa(binString);\n}\n\n/**\n * Convert a byte array to a UTF-8 string. Warning: not all byte arrays are valid UTF-8.\n * @returns A decoded string\n */\nexport function bytesToString(byteArray: Uint8Array): string {\n  return new TextDecoder().decode(byteArray);\n}\n\n/**\n * Returns a Uint8Array given an input string or Uint8Array.\n * @returns A base64 string\n */\nexport function coerceToBytes(input: Uint8Array | string): Uint8Array {\n  if (typeof input === 'string') {\n    return new TextEncoder().encode(input);\n  }\n  return input;\n}\n\n/**\n * Convert a Uint8Array to a hex string for Node.js and browser environments.\n * @returns A hex string\n */\nexport function bytesToHex(byteArray: Uint8Array): string {\n  if (isNode()) {\n    return Buffer.from(byteArray).toString('hex');\n  }\n  return Array.from(byteArray)\n    .map((i) => i.toString(16).padStart(2, '0'))\n    .join('');\n}\n\n/**\n * Convert a hex string to Uint8Array for Node.js and browser environments.\n * @returns A Uint8Array\n */\nexport function hexToBytes(hexString: string): Uint8Array {\n  if (isNode()) {\n    return Buffer.from(hexString, 'hex');\n  }\n  let hex = hexString;\n  if (hexString.length % 2 !== 0) {\n    hex = hexString.padStart(1, '0');\n  }\n  const byteArray = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length / 2; i++) {\n    byteArray[i] = parseInt(hex.slice(2 * i, 2 * i + 2), 16);\n  }\n  return byteArray;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,mBAAmB;AAE1C;;;;AAIA,OAAM,SAAUC,aAAaA,CAACC,YAAoB;EAChD,IAAIF,MAAM,EAAE,EAAE;IACZ,OAAO,IAAIG,UAAU,CAACC,MAAM,CAACC,IAAI,CAACH,YAAY,EAAE,QAAQ,CAAC,CAAC;EAC5D;EACA;EACA,MAAMI,SAAS,GAAGC,IAAI,CAACL,YAAY,CAAC;EACpC,OAAOC,UAAU,CAACE,IAAI,CAACC,SAAS,EAAGE,CAAC,IAAKA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAE,CAAC;AAC7D;AAEA;;;;AAIA,OAAM,SAAUC,aAAaA,CAACC,SAAqB;EACjD,IAAIX,MAAM,EAAE,EAAE;IACZ,OAAOI,MAAM,CAACC,IAAI,CAACM,SAAS,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;EAClD;EACA;EACA,MAAMN,SAAS,GAAGO,KAAK,CAACR,IAAI,CAACM,SAAS,EAAGG,CAAC,IAAKC,MAAM,CAACC,aAAa,CAACF,CAAC,CAAC,CAAC,CAACG,IAAI,CAC1E,EAAE,CACH;EACD,OAAOC,IAAI,CAACZ,SAAS,CAAC;AACxB;AAEA;;;;AAIA,OAAM,SAAUa,aAAaA,CAACR,SAAqB;EACjD,OAAO,IAAIS,WAAW,EAAE,CAACC,MAAM,CAACV,SAAS,CAAC;AAC5C;AAEA;;;;AAIA,OAAM,SAAUW,aAAaA,CAACC,KAA0B;EACtD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACF,KAAK,CAAC;EACxC;EACA,OAAOA,KAAK;AACd;AAEA;;;;AAIA,OAAM,SAAUG,UAAUA,CAACf,SAAqB;EAC9C,IAAIX,MAAM,EAAE,EAAE;IACZ,OAAOI,MAAM,CAACC,IAAI,CAACM,SAAS,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;EAC/C;EACA,OAAOC,KAAK,CAACR,IAAI,CAACM,SAAS,CAAC,CACzBgB,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAChB,QAAQ,CAAC,EAAE,CAAC,CAACiB,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAC3CZ,IAAI,CAAC,EAAE,CAAC;AACb;AAEA;;;;AAIA,OAAM,SAAUa,UAAUA,CAACC,SAAiB;EAC1C,IAAI/B,MAAM,EAAE,EAAE;IACZ,OAAOI,MAAM,CAACC,IAAI,CAAC0B,SAAS,EAAE,KAAK,CAAC;EACtC;EACA,IAAIC,GAAG,GAAGD,SAAS;EACnB,IAAIA,SAAS,CAACE,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC9BD,GAAG,GAAGD,SAAS,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAClC;EACA,MAAMlB,SAAS,GAAG,IAAIR,UAAU,CAAC6B,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC;EAChD,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,GAAG,CAACC,MAAM,GAAG,CAAC,EAAEL,CAAC,EAAE,EAAE;IACvCjB,SAAS,CAACiB,CAAC,CAAC,GAAGM,QAAQ,CAACF,GAAG,CAACG,KAAK,CAAC,CAAC,GAAGP,CAAC,EAAE,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;EAC1D;EACA,OAAOjB,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}