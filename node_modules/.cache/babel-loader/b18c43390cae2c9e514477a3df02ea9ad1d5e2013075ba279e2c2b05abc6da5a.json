{"ast":null,"code":"import { bytesToBase64 } from '../../../encoding/binarydata.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport JSONRequest from '../jsonrequest.js';\nimport { Box } from './models/types.js';\nexport default class LookupApplicationBoxByIDandName extends JSONRequest {\n  /**\n   * Returns information about indexed application boxes.\n   *\n   * #### Example\n   * ```typescript\n   * const boxName = Buffer.from(\"foo\");\n   * const boxResponse = await indexerClient\n   *        .LookupApplicationBoxByIDandName(1234, boxName)\n   *        .do();\n   * const boxValue = boxResponse.value;\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n   * @oaram index - application index.\n   * @category GET\n   */\n  constructor(c, index, boxName) {\n    super(c);\n    this.index = BigInt(index);\n    // Encode query in base64 format and append the encoding prefix.\n    const encodedName = bytesToBase64(boxName);\n    this.query.name = encodeURI(`b64:${encodedName}`);\n  }\n  /**\n   * @returns `/v2/applications/${index}/box`\n   */\n  path() {\n    return `/v2/applications/${this.index}/box`;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response) {\n    return decodeJSON(response.getJSONText(), Box);\n  }\n}","map":{"version":3,"names":["bytesToBase64","decodeJSON","JSONRequest","Box","LookupApplicationBoxByIDandName","constructor","c","index","boxName","BigInt","encodedName","query","name","encodeURI","path","prepare","response","getJSONText"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\indexer\\lookupApplicationBoxByIDandName.ts"],"sourcesContent":["import { bytesToBase64 } from '../../../encoding/binarydata.js';\nimport { HTTPClient, HTTPClientResponse } from '../../client.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport JSONRequest from '../jsonrequest.js';\nimport { Box } from './models/types.js';\n\nexport default class LookupApplicationBoxByIDandName extends JSONRequest<Box> {\n  private index: bigint;\n\n  /**\n   * Returns information about indexed application boxes.\n   *\n   * #### Example\n   * ```typescript\n   * const boxName = Buffer.from(\"foo\");\n   * const boxResponse = await indexerClient\n   *        .LookupApplicationBoxByIDandName(1234, boxName)\n   *        .do();\n   * const boxValue = boxResponse.value;\n   * ```\n   *\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n   * @oaram index - application index.\n   * @category GET\n   */\n  constructor(c: HTTPClient, index: number | bigint, boxName: Uint8Array) {\n    super(c);\n    this.index = BigInt(index);\n    // Encode query in base64 format and append the encoding prefix.\n    const encodedName = bytesToBase64(boxName);\n    this.query.name = encodeURI(`b64:${encodedName}`);\n  }\n\n  /**\n   * @returns `/v2/applications/${index}/box`\n   */\n  path() {\n    return `/v2/applications/${this.index}/box`;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response: HTTPClientResponse): Box {\n    return decodeJSON(response.getJSONText(), Box);\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iCAAiC;AAE/D,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,SAASC,GAAG,QAAQ,mBAAmB;AAEvC,eAAc,MAAOC,+BAAgC,SAAQF,WAAgB;EAG3E;;;;;;;;;;;;;;;;EAgBAG,YAAYC,CAAa,EAAEC,KAAsB,EAAEC,OAAmB;IACpE,KAAK,CAACF,CAAC,CAAC;IACR,IAAI,CAACC,KAAK,GAAGE,MAAM,CAACF,KAAK,CAAC;IAC1B;IACA,MAAMG,WAAW,GAAGV,aAAa,CAACQ,OAAO,CAAC;IAC1C,IAAI,CAACG,KAAK,CAACC,IAAI,GAAGC,SAAS,CAAC,OAAOH,WAAW,EAAE,CAAC;EACnD;EAEA;;;EAGAI,IAAIA,CAAA;IACF,OAAO,oBAAoB,IAAI,CAACP,KAAK,MAAM;EAC7C;EAEA;EACAQ,OAAOA,CAACC,QAA4B;IAClC,OAAOf,UAAU,CAACe,QAAQ,CAACC,WAAW,EAAE,EAAEd,GAAG,CAAC;EAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}