{"ast":null,"code":"import JSONRequest from '../jsonrequest.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport { AssetsResponse } from './models/types.js';\n/**\n * Returns information about indexed assets.\n *\n * #### Example\n * ```typescript\n * const assets = await indexerClient.searchForAssets().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\n * @category GET\n */\nexport default class SearchForAssets extends JSONRequest {\n  /**\n   * @returns `/v2/assets`\n   */\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/assets';\n  }\n  /**\n   * Limit results for pagination.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit - maximum number of results to return.\n   * @category query\n   */\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  /**\n   * Filter just assets with the given creator address.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .creator(address)\n   *        .do();\n   * ```\n   *\n   * @param creator\n   * @category query\n   */\n  creator(creator) {\n    this.query.creator = creator.toString();\n    return this;\n  }\n  /**\n   * Filter just assets with the given name.\n   *\n   * #### Example\n   * ```typescript\n   * const name = \"Test Token\";\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .name(name)\n   *        .do();\n   * ```\n   *\n   * @param name\n   * @category query\n   */\n  name(name) {\n    this.query.name = name;\n    return this;\n  }\n  /**\n   * Filter just assets with the given unit.\n   *\n   * #### Example\n   * ```typescript\n   * const unit = \"test\";\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .unit(unit)\n   *        .do();\n   * ```\n   *\n   * @param unit\n   * @category query\n   */\n  unit(unit) {\n    this.query.unit = unit;\n    return this;\n  }\n  /**\n   * Asset ID for filter, as int.\n   *\n   * #### Example\n   * ```typescript\n   * const assetId = 163650;\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .index(assetId)\n   *        .do();\n   * ```\n   * @remarks Alternatively, use `indexerClient.lookupAssetByID(assetId).do();`\n   * @param index\n   * @category query\n   */\n  index(index) {\n    this.query['asset-id'] = index;\n    return this;\n  }\n  /**\n   * Specify the next page of results.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   *\n   * const assetsPage1 = await indexerClient\n   *        .searchForAssets()\n   *        .limit(maxResults)\n   *        .do();\n   *\n   * const assetsPage2 = await indexerClient\n   *        .searchForAssets()\n   *        .limit(maxResults)\n   *        .nextToken(assetsPage1[\"next-token\"])\n   *        .do();\n   * ```\n   * @param nextToken - provided by the previous results.\n   * @category query\n   */\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n  /**\n   * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n   *\n   * #### Example 1\n   * ```typescript\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .includeAll(false)\n   *        .do();\n   * ```\n   *\n   * #### Example 2\n   * ```typescript\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .includeAll()\n   *        .do();\n   * ```\n   *\n   * @param value - default true when called without passing a value\n   * @category query\n   */\n  includeAll(value = true) {\n    this.query['include-all'] = value;\n    return this;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response) {\n    return decodeJSON(response.getJSONText(), AssetsResponse);\n  }\n}","map":{"version":3,"names":["JSONRequest","decodeJSON","AssetsResponse","SearchForAssets","path","limit","query","creator","toString","name","unit","index","nextToken","next","includeAll","value","prepare","response","getJSONText"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\indexer\\searchForAssets.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest.js';\nimport { HTTPClientResponse } from '../../client.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport { Address } from '../../../encoding/address.js';\nimport { AssetsResponse } from './models/types.js';\n\n/**\n * Returns information about indexed assets.\n *\n * #### Example\n * ```typescript\n * const assets = await indexerClient.searchForAssets().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\n * @category GET\n */\nexport default class SearchForAssets extends JSONRequest<AssetsResponse> {\n  /**\n   * @returns `/v2/assets`\n   */\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/assets';\n  }\n\n  /**\n   * Limit results for pagination.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit - maximum number of results to return.\n   * @category query\n   */\n  limit(limit: number) {\n    this.query.limit = limit;\n    return this;\n  }\n\n  /**\n   * Filter just assets with the given creator address.\n   *\n   * #### Example\n   * ```typescript\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .creator(address)\n   *        .do();\n   * ```\n   *\n   * @param creator\n   * @category query\n   */\n  creator(creator: string | Address) {\n    this.query.creator = creator.toString();\n    return this;\n  }\n\n  /**\n   * Filter just assets with the given name.\n   *\n   * #### Example\n   * ```typescript\n   * const name = \"Test Token\";\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .name(name)\n   *        .do();\n   * ```\n   *\n   * @param name\n   * @category query\n   */\n  name(name: string) {\n    this.query.name = name;\n    return this;\n  }\n\n  /**\n   * Filter just assets with the given unit.\n   *\n   * #### Example\n   * ```typescript\n   * const unit = \"test\";\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .unit(unit)\n   *        .do();\n   * ```\n   *\n   * @param unit\n   * @category query\n   */\n  unit(unit: string) {\n    this.query.unit = unit;\n    return this;\n  }\n\n  /**\n   * Asset ID for filter, as int.\n   *\n   * #### Example\n   * ```typescript\n   * const assetId = 163650;\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .index(assetId)\n   *        .do();\n   * ```\n   * @remarks Alternatively, use `indexerClient.lookupAssetByID(assetId).do();`\n   * @param index\n   * @category query\n   */\n  index(index: number | bigint) {\n    this.query['asset-id'] = index;\n    return this;\n  }\n\n  /**\n   * Specify the next page of results.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 20;\n   *\n   * const assetsPage1 = await indexerClient\n   *        .searchForAssets()\n   *        .limit(maxResults)\n   *        .do();\n   *\n   * const assetsPage2 = await indexerClient\n   *        .searchForAssets()\n   *        .limit(maxResults)\n   *        .nextToken(assetsPage1[\"next-token\"])\n   *        .do();\n   * ```\n   * @param nextToken - provided by the previous results.\n   * @category query\n   */\n  nextToken(nextToken: string) {\n    this.query.next = nextToken;\n    return this;\n  }\n\n  /**\n   * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n   *\n   * #### Example 1\n   * ```typescript\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .includeAll(false)\n   *        .do();\n   * ```\n   *\n   * #### Example 2\n   * ```typescript\n   * const assets = await indexerClient\n   *        .searchForAssets()\n   *        .includeAll()\n   *        .do();\n   * ```\n   *\n   * @param value - default true when called without passing a value\n   * @category query\n   */\n  includeAll(value = true) {\n    this.query['include-all'] = value;\n    return this;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response: HTTPClientResponse): AssetsResponse {\n    return decodeJSON(response.getJSONText(), AssetsResponse);\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAE3C,SAASC,UAAU,QAAQ,+BAA+B;AAE1D,SAASC,cAAc,QAAQ,mBAAmB;AAElD;;;;;;;;;;;AAWA,eAAc,MAAOC,eAAgB,SAAQH,WAA2B;EACtE;;;EAGA;EACAI,IAAIA,CAAA;IACF,OAAO,YAAY;EACrB;EAEA;;;;;;;;;;;;;;;EAeAC,KAAKA,CAACA,KAAa;IACjB,IAAI,CAACC,KAAK,CAACD,KAAK,GAAGA,KAAK;IACxB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAE,OAAOA,CAACA,OAAyB;IAC/B,IAAI,CAACD,KAAK,CAACC,OAAO,GAAGA,OAAO,CAACC,QAAQ,EAAE;IACvC,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,IAAIA,CAACA,IAAY;IACf,IAAI,CAACH,KAAK,CAACG,IAAI,GAAGA,IAAI;IACtB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,IAAIA,CAACA,IAAY;IACf,IAAI,CAACJ,KAAK,CAACI,IAAI,GAAGA,IAAI;IACtB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,KAAKA,CAACA,KAAsB;IAC1B,IAAI,CAACL,KAAK,CAAC,UAAU,CAAC,GAAGK,KAAK;IAC9B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;EAqBAC,SAASA,CAACA,SAAiB;IACzB,IAAI,CAACN,KAAK,CAACO,IAAI,GAAGD,SAAS;IAC3B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBAE,UAAUA,CAACC,KAAK,GAAG,IAAI;IACrB,IAAI,CAACT,KAAK,CAAC,aAAa,CAAC,GAAGS,KAAK;IACjC,OAAO,IAAI;EACb;EAEA;EACAC,OAAOA,CAACC,QAA4B;IAClC,OAAOhB,UAAU,CAACgB,QAAQ,CAACC,WAAW,EAAE,EAAEhB,cAAc,CAAC;EAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}