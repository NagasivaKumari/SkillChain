{"ast":null,"code":"/**\n * Base abstract class for JSON requests.\n *\n * Data: The type returned from the `do()` method\n *\n * Body: The structure of the response's body\n */\nexport default class JSONRequest {\n  /**\n   * @param client - HTTPClient object.\n   */\n  constructor(client) {\n    this.c = client;\n    this.query = {};\n  }\n  /**\n   * Execute the request\n   */\n  executeRequest(headers, customOptions) {\n    return this.c.get({\n      relativePath: this.path(),\n      query: this.query,\n      requestHeaders: headers,\n      customOptions\n    });\n  }\n  /**\n   * Execute the request and decode the response.\n   * @param headers - Additional headers to send in the request. Optional.\n   * @param customOptions - Additional options to pass to the underlying BaseHTTPClient. For\n   *   {@link URLTokenBaseHTTPClient}, which is the default client, this will be treated as\n   *   additional options to pass to the network `fetch` method.\n   * @returns A promise which resolves to the parsed response object.\n   * @category JSONRequest\n   */\n  async do(headers, customOptions) {\n    const res = await this.executeRequest(headers, customOptions);\n    return this.prepare(res);\n  }\n  /**\n   * Execute the request, but do not process the response data in any way.\n   * @param headers - Additional headers to send in the request. Optional.\n   * @param customOptions - Additional options to pass to the underlying BaseHTTPClient. For\n   *   {@link URLTokenBaseHTTPClient}, which is the default client, this will be treated as\n   *   additional options to pass to the network `fetch` method.\n   * @returns A promise which resolves to the raw response data, exactly as returned by the server.\n   * @category JSONRequest\n   */\n  async doRaw(headers, customOptions) {\n    const res = await this.executeRequest(headers, customOptions);\n    return res.body;\n  }\n}","map":{"version":3,"names":["JSONRequest","constructor","client","c","query","executeRequest","headers","customOptions","get","relativePath","path","requestHeaders","do","res","prepare","doRaw","body"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\jsonrequest.ts"],"sourcesContent":["import { HTTPClient, HTTPClientResponse } from '../client.js';\n\n/**\n * Base abstract class for JSON requests.\n *\n * Data: The type returned from the `do()` method\n *\n * Body: The structure of the response's body\n */\nexport default abstract class JSONRequest<Data> {\n  c: HTTPClient;\n  query: Record<string, any>;\n\n  /**\n   * @param client - HTTPClient object.\n   */\n  constructor(client: HTTPClient) {\n    this.c = client;\n    this.query = {};\n  }\n\n  /**\n   * @returns The path of this request.\n   * @category JSONRequest\n   */\n  abstract path(): string;\n\n  /**\n   * Prepare a JSON response before returning it.\n   *\n   * Use this method to unpack response ata as needed after receiving it from the `do()` method.\n   * @param response - Response body received\n   * @category JSONRequest\n   */\n  abstract prepare(response: HTTPClientResponse): Data;\n\n  /**\n   * Execute the request\n   */\n  protected executeRequest(\n    headers?: Record<string, string>,\n    customOptions?: Record<string, unknown>\n  ): Promise<HTTPClientResponse> {\n    return this.c.get({\n      relativePath: this.path(),\n      query: this.query,\n      requestHeaders: headers,\n      customOptions,\n    });\n  }\n\n  /**\n   * Execute the request and decode the response.\n   * @param headers - Additional headers to send in the request. Optional.\n   * @param customOptions - Additional options to pass to the underlying BaseHTTPClient. For\n   *   {@link URLTokenBaseHTTPClient}, which is the default client, this will be treated as\n   *   additional options to pass to the network `fetch` method.\n   * @returns A promise which resolves to the parsed response object.\n   * @category JSONRequest\n   */\n  async do(\n    headers?: Record<string, string>,\n    customOptions?: Record<string, unknown>\n  ): Promise<Data> {\n    const res = await this.executeRequest(headers, customOptions);\n    return this.prepare(res);\n  }\n\n  /**\n   * Execute the request, but do not process the response data in any way.\n   * @param headers - Additional headers to send in the request. Optional.\n   * @param customOptions - Additional options to pass to the underlying BaseHTTPClient. For\n   *   {@link URLTokenBaseHTTPClient}, which is the default client, this will be treated as\n   *   additional options to pass to the network `fetch` method.\n   * @returns A promise which resolves to the raw response data, exactly as returned by the server.\n   * @category JSONRequest\n   */\n  async doRaw(\n    headers?: Record<string, string>,\n    customOptions?: Record<string, unknown>\n  ): Promise<Uint8Array> {\n    const res = await this.executeRequest(headers, customOptions);\n    return res.body;\n  }\n}\n"],"mappings":"AAEA;;;;;;;AAOA,eAAc,MAAgBA,WAAW;EAIvC;;;EAGAC,YAAYC,MAAkB;IAC5B,IAAI,CAACC,CAAC,GAAGD,MAAM;IACf,IAAI,CAACE,KAAK,GAAG,EAAE;EACjB;EAiBA;;;EAGUC,cAAcA,CACtBC,OAAgC,EAChCC,aAAuC;IAEvC,OAAO,IAAI,CAACJ,CAAC,CAACK,GAAG,CAAC;MAChBC,YAAY,EAAE,IAAI,CAACC,IAAI,EAAE;MACzBN,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBO,cAAc,EAAEL,OAAO;MACvBC;KACD,CAAC;EACJ;EAEA;;;;;;;;;EASA,MAAMK,EAAEA,CACNN,OAAgC,EAChCC,aAAuC;IAEvC,MAAMM,GAAG,GAAG,MAAM,IAAI,CAACR,cAAc,CAACC,OAAO,EAAEC,aAAa,CAAC;IAC7D,OAAO,IAAI,CAACO,OAAO,CAACD,GAAG,CAAC;EAC1B;EAEA;;;;;;;;;EASA,MAAME,KAAKA,CACTT,OAAgC,EAChCC,aAAuC;IAEvC,MAAMM,GAAG,GAAG,MAAM,IAAI,CAACR,cAAc,CAACC,OAAO,EAAEC,aAAa,CAAC;IAC7D,OAAOM,GAAG,CAACG,IAAI;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}