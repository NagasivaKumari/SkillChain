{"ast":null,"code":"import JSONRequest from '../jsonrequest.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport { BlockHeadersResponse } from './models/types.js';\n/**\n * Returns information about indexed block headers.\n *\n * #### Example\n * ```typescript\n * const bhs = await indexerClient.searchForBlockHeaders().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)\n * @category GET\n */\nexport default class SearchForBlockHeaders extends JSONRequest {\n  /**\n   * @returns `/v2/block-headers`\n   */\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/block-headers';\n  }\n  /**\n   * Accounts marked as absent in the block header's participation updates.\n   *\n   * #### Example\n   * ```typescript\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .absent([address1,address2])\n   *        .do();\n   * ```\n   *\n   * @param absent - a comma separated list of addresses\n   * @category query\n   */\n  absent(absent) {\n    this.query.absent = absent;\n    return this;\n  }\n  /**\n   * Include results after the given time.\n   *\n   * #### Example\n   * ```typescript\n   * const afterTime = \"2022-10-21T00:00:11.55Z\";\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .afterTime(afterTime)\n   *        .do();\n   * ```\n   *\n   * @param after - rfc3339 string or Date object\n   * @category query\n   */\n  afterTime(after) {\n    this.query['after-time'] = after instanceof Date ? after.toISOString() : after;\n    return this;\n  }\n  /**\n   * Include results before the given time.\n   *\n   * #### Example\n   * ```typescript\n   * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .beforeTime(beforeTime)\n   *        .do();\n   * ```\n   *\n   * @param before - rfc3339 string or Date object\n   * @category query\n   */\n  beforeTime(before) {\n    this.query['before-time'] = before instanceof Date ? before.toISOString() : before;\n    return this;\n  }\n  /**\n   * Accounts marked as expired in the block header's participation updates.\n   *\n   * #### Example\n   * ```typescript\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .expired([address1,address2])\n   *        .do();\n   * ```\n   *\n   * @param expired - - a comma separated list of addresses\n   * @category query\n   */\n  expired(expired) {\n    this.query.expired = expired;\n    return this;\n  }\n  /**\n   * Maximum number of results to return.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 25;\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit\n   * @category query\n   */\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  /**\n   * Include results at or before the specified max-round.\n   *\n   * #### Example\n   * ```typescript\n   * const maxRound = 18309917;\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .maxRound(maxRound)\n   *        .do();\n   * ```\n   *\n   * @param round\n   * @category query\n   */\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  }\n  /**\n   * Include results at or after the specified min-round.\n   *\n   * #### Example\n   * ```typescript\n   * const minRound = 18309917;\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .minRound(minRound)\n   *        .do();\n   * ```\n   *\n   * @param round\n   * @category query\n   */\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  }\n  /**\n   * The next page of results.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 25;\n   *\n   * const bh1 = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .limit(maxResults)\n   *        .do();\n   *\n   * const bh2 = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .limit(maxResults)\n   *        .nextToken(bh1[\"next-token\"])\n   *        .do();\n   * ```\n   *\n   * @param nextToken - provided by the previous results\n   * @category query\n   */\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n  /**\n   * Accounts marked as proposer in the block header's participation updates.\n   *\n   * #### Example\n   * ```typescript\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .proposers([address1,address2])\n   *        .do();\n   * ```\n   *\n   * @param proposers - a comma separated list of addresses\n   * @category query\n   */\n  proposers(proposers) {\n    this.query.proposers = proposers;\n    return this;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response) {\n    return decodeJSON(response.getJSONText(), BlockHeadersResponse);\n  }\n}","map":{"version":3,"names":["JSONRequest","decodeJSON","BlockHeadersResponse","SearchForBlockHeaders","path","absent","query","afterTime","after","Date","toISOString","beforeTime","before","expired","limit","maxRound","round","minRound","nextToken","next","proposers","prepare","response","getJSONText"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\indexer\\searchForBlockHeaders.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest.js';\nimport { HTTPClientResponse } from '../../client.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport { Address } from '../../../encoding/address.js';\nimport { BlockHeadersResponse } from './models/types.js';\n\n/**\n * Returns information about indexed block headers.\n *\n * #### Example\n * ```typescript\n * const bhs = await indexerClient.searchForBlockHeaders().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)\n * @category GET\n */\nexport default class SearchForBlockHeaders extends JSONRequest<BlockHeadersResponse> {\n  /**\n   * @returns `/v2/block-headers`\n   */\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/block-headers';\n  }\n\n  /**\n   * Accounts marked as absent in the block header's participation updates.\n   *\n   * #### Example\n   * ```typescript\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .absent([address1,address2])\n   *        .do();\n   * ```\n   *\n   * @param absent - a comma separated list of addresses\n   * @category query\n   */\n  absent(absent: (string | Address)[]) {\n    this.query.absent = absent;\n    return this;\n  }\n\n  /**\n   * Include results after the given time.\n   *\n   * #### Example\n   * ```typescript\n   * const afterTime = \"2022-10-21T00:00:11.55Z\";\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .afterTime(afterTime)\n   *        .do();\n   * ```\n   *\n   * @param after - rfc3339 string or Date object\n   * @category query\n   */\n  afterTime(after: string | Date) {\n    this.query['after-time'] =\n      after instanceof Date ? after.toISOString() : after;\n    return this;\n  }\n\n  /**\n   * Include results before the given time.\n   *\n   * #### Example\n   * ```typescript\n   * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .beforeTime(beforeTime)\n   *        .do();\n   * ```\n   *\n   * @param before - rfc3339 string or Date object\n   * @category query\n   */\n  beforeTime(before: string | Date) {\n    this.query['before-time'] =\n      before instanceof Date ? before.toISOString() : before;\n    return this;\n  }\n\n  /**\n   * Accounts marked as expired in the block header's participation updates.\n   *\n   * #### Example\n   * ```typescript\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .expired([address1,address2])\n   *        .do();\n   * ```\n   *\n   * @param expired - - a comma separated list of addresses\n   * @category query\n   */\n  expired(expired: (string | Address)[]) {\n    this.query.expired = expired;\n    return this;\n  }\n\n  /**\n   * Maximum number of results to return.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 25;\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .limit(maxResults)\n   *        .do();\n   * ```\n   *\n   * @param limit\n   * @category query\n   */\n  limit(limit: number) {\n    this.query.limit = limit;\n    return this;\n  }\n\n  /**\n   * Include results at or before the specified max-round.\n   *\n   * #### Example\n   * ```typescript\n   * const maxRound = 18309917;\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .maxRound(maxRound)\n   *        .do();\n   * ```\n   *\n   * @param round\n   * @category query\n   */\n  maxRound(round: number | bigint) {\n    this.query['max-round'] = round;\n    return this;\n  }\n\n  /**\n   * Include results at or after the specified min-round.\n   *\n   * #### Example\n   * ```typescript\n   * const minRound = 18309917;\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .minRound(minRound)\n   *        .do();\n   * ```\n   *\n   * @param round\n   * @category query\n   */\n  minRound(round: number | bigint) {\n    this.query['min-round'] = round;\n    return this;\n  }\n\n  /**\n   * The next page of results.\n   *\n   * #### Example\n   * ```typescript\n   * const maxResults = 25;\n   *\n   * const bh1 = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .limit(maxResults)\n   *        .do();\n   *\n   * const bh2 = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .limit(maxResults)\n   *        .nextToken(bh1[\"next-token\"])\n   *        .do();\n   * ```\n   *\n   * @param nextToken - provided by the previous results\n   * @category query\n   */\n  nextToken(nextToken: string) {\n    this.query.next = nextToken;\n    return this;\n  }\n\n  /**\n   * Accounts marked as proposer in the block header's participation updates.\n   *\n   * #### Example\n   * ```typescript\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\n   * const bhs = await indexerClient\n   *        .searchForBlockHeaders()\n   *        .proposers([address1,address2])\n   *        .do();\n   * ```\n   *\n   * @param proposers - a comma separated list of addresses\n   * @category query\n   */\n  proposers(proposers: (string | Address)[]) {\n    this.query.proposers = proposers;\n    return this;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response: HTTPClientResponse): BlockHeadersResponse {\n    return decodeJSON(response.getJSONText(), BlockHeadersResponse);\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAE3C,SAASC,UAAU,QAAQ,+BAA+B;AAE1D,SAASC,oBAAoB,QAAQ,mBAAmB;AAExD;;;;;;;;;;;AAWA,eAAc,MAAOC,qBAAsB,SAAQH,WAAiC;EAClF;;;EAGA;EACAI,IAAIA,CAAA;IACF,OAAO,mBAAmB;EAC5B;EAEA;;;;;;;;;;;;;;;;EAgBAC,MAAMA,CAACA,MAA4B;IACjC,IAAI,CAACC,KAAK,CAACD,MAAM,GAAGA,MAAM;IAC1B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAE,SAASA,CAACC,KAAoB;IAC5B,IAAI,CAACF,KAAK,CAAC,YAAY,CAAC,GACtBE,KAAK,YAAYC,IAAI,GAAGD,KAAK,CAACE,WAAW,EAAE,GAAGF,KAAK;IACrD,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAG,UAAUA,CAACC,MAAqB;IAC9B,IAAI,CAACN,KAAK,CAAC,aAAa,CAAC,GACvBM,MAAM,YAAYH,IAAI,GAAGG,MAAM,CAACF,WAAW,EAAE,GAAGE,MAAM;IACxD,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;EAgBAC,OAAOA,CAACA,OAA6B;IACnC,IAAI,CAACP,KAAK,CAACO,OAAO,GAAGA,OAAO;IAC5B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,KAAKA,CAACA,KAAa;IACjB,IAAI,CAACR,KAAK,CAACQ,KAAK,GAAGA,KAAK;IACxB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,QAAQA,CAACC,KAAsB;IAC7B,IAAI,CAACV,KAAK,CAAC,WAAW,CAAC,GAAGU,KAAK;IAC/B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,QAAQA,CAACD,KAAsB;IAC7B,IAAI,CAACV,KAAK,CAAC,WAAW,CAAC,GAAGU,KAAK;IAC/B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBAE,SAASA,CAACA,SAAiB;IACzB,IAAI,CAACZ,KAAK,CAACa,IAAI,GAAGD,SAAS;IAC3B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;EAgBAE,SAASA,CAACA,SAA+B;IACvC,IAAI,CAACd,KAAK,CAACc,SAAS,GAAGA,SAAS;IAChC,OAAO,IAAI;EACb;EAEA;EACAC,OAAOA,CAACC,QAA4B;IAClC,OAAOrB,UAAU,CAACqB,QAAQ,CAACC,WAAW,EAAE,EAAErB,oBAAoB,CAAC;EACjE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}