{"ast":null,"code":"import { bytesToBase64 } from '../../../encoding/binarydata.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport JSONRequest from '../jsonrequest.js';\nimport { Box } from './models/types.js';\n/**\n * Given an application ID and the box name (key), return the value stored in the box.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxName = Buffer.from(\"foo\");\n * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\n * const boxValue = boxResponse.value;\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)\n * @param index - The application ID to look up.\n * @category GET\n */\nexport default class GetApplicationBoxByName extends JSONRequest {\n  constructor(c, index, name) {\n    super(c);\n    this.index = BigInt(index);\n    // Encode name in base64 format and append the encoding prefix.\n    const encodedName = bytesToBase64(name);\n    this.query.name = encodeURI(`b64:${encodedName}`);\n  }\n  /**\n   * @returns `/v2/applications/${index}/box`\n   */\n  path() {\n    return `/v2/applications/${this.index}/box`;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response) {\n    return decodeJSON(response.getJSONText(), Box);\n  }\n}","map":{"version":3,"names":["bytesToBase64","decodeJSON","JSONRequest","Box","GetApplicationBoxByName","constructor","c","index","name","BigInt","encodedName","query","encodeURI","path","prepare","response","getJSONText"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\client\\v2\\algod\\getApplicationBoxByName.ts"],"sourcesContent":["import { bytesToBase64 } from '../../../encoding/binarydata.js';\nimport { HTTPClient, HTTPClientResponse } from '../../client.js';\nimport { decodeJSON } from '../../../encoding/encoding.js';\nimport JSONRequest from '../jsonrequest.js';\nimport { Box } from './models/types.js';\n\n/**\n * Given an application ID and the box name (key), return the value stored in the box.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxName = Buffer.from(\"foo\");\n * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\n * const boxValue = boxResponse.value;\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)\n * @param index - The application ID to look up.\n * @category GET\n */\nexport default class GetApplicationBoxByName extends JSONRequest<Box> {\n  private index: bigint;\n\n  constructor(c: HTTPClient, index: number | bigint, name: Uint8Array) {\n    super(c);\n    this.index = BigInt(index);\n    // Encode name in base64 format and append the encoding prefix.\n    const encodedName = bytesToBase64(name);\n    this.query.name = encodeURI(`b64:${encodedName}`);\n  }\n\n  /**\n   * @returns `/v2/applications/${index}/box`\n   */\n  path() {\n    return `/v2/applications/${this.index}/box`;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(response: HTTPClientResponse): Box {\n    return decodeJSON(response.getJSONText(), Box);\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iCAAiC;AAE/D,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,SAASC,GAAG,QAAQ,mBAAmB;AAEvC;;;;;;;;;;;;;;;AAeA,eAAc,MAAOC,uBAAwB,SAAQF,WAAgB;EAGnEG,YAAYC,CAAa,EAAEC,KAAsB,EAAEC,IAAgB;IACjE,KAAK,CAACF,CAAC,CAAC;IACR,IAAI,CAACC,KAAK,GAAGE,MAAM,CAACF,KAAK,CAAC;IAC1B;IACA,MAAMG,WAAW,GAAGV,aAAa,CAACQ,IAAI,CAAC;IACvC,IAAI,CAACG,KAAK,CAACH,IAAI,GAAGI,SAAS,CAAC,OAAOF,WAAW,EAAE,CAAC;EACnD;EAEA;;;EAGAG,IAAIA,CAAA;IACF,OAAO,oBAAoB,IAAI,CAACN,KAAK,MAAM;EAC7C;EAEA;EACAO,OAAOA,CAACC,QAA4B;IAClC,OAAOd,UAAU,CAACc,QAAQ,CAACC,WAAW,EAAE,EAAEb,GAAG,CAAC;EAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}