{"ast":null,"code":"import { Transaction } from './transaction.js';\nimport { OnApplicationComplete, TransactionType } from './types/transactions/base.js';\n/**\n * Create a new payment transaction\n *\n * @param options - Payment transaction parameters\n */\nexport function makePaymentTxnWithSuggestedParamsFromObject({\n  sender,\n  receiver,\n  amount,\n  closeRemainderTo,\n  suggestedParams,\n  note,\n  lease,\n  rekeyTo\n}) {\n  return new Transaction({\n    type: TransactionType.pay,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    paymentParams: {\n      receiver,\n      amount,\n      closeRemainderTo\n    }\n  });\n}\n/**\n * Create a new key registration transaction\n *\n * @param options - Key registration transaction parameters\n */\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject({\n  sender,\n  voteKey,\n  selectionKey,\n  stateProofKey,\n  voteFirst,\n  voteLast,\n  voteKeyDilution,\n  nonParticipation,\n  suggestedParams,\n  note,\n  lease,\n  rekeyTo\n}) {\n  return new Transaction({\n    type: TransactionType.keyreg,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    keyregParams: {\n      voteKey,\n      selectionKey,\n      stateProofKey,\n      voteFirst,\n      voteLast,\n      voteKeyDilution,\n      nonParticipation\n    }\n  });\n}\n/**\n * Base function for creating any type of asset config transaction.\n *\n * @param options - Asset config transaction parameters\n */\nexport function makeBaseAssetConfigTxn({\n  sender,\n  assetIndex,\n  total,\n  decimals,\n  defaultFrozen,\n  manager,\n  reserve,\n  freeze,\n  clawback,\n  unitName,\n  assetName,\n  assetURL,\n  assetMetadataHash,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  return new Transaction({\n    type: TransactionType.acfg,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    assetConfigParams: {\n      assetIndex,\n      total,\n      decimals,\n      defaultFrozen,\n      manager,\n      reserve,\n      freeze,\n      clawback,\n      unitName,\n      assetName,\n      assetURL,\n      assetMetadataHash\n    }\n  });\n}\n/**\n * Create a new asset creation transaction\n *\n * @param options - Asset creation transaction parameters\n */\nexport function makeAssetCreateTxnWithSuggestedParamsFromObject({\n  sender,\n  total,\n  decimals,\n  defaultFrozen,\n  manager,\n  reserve,\n  freeze,\n  clawback,\n  unitName,\n  assetName,\n  assetURL,\n  assetMetadataHash,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  return makeBaseAssetConfigTxn({\n    sender,\n    total,\n    decimals,\n    defaultFrozen,\n    manager,\n    reserve,\n    freeze,\n    clawback,\n    unitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams\n  });\n}\n/**\n * Create a new asset config transaction. This transaction can be issued by the asset manager to\n * change the manager, reserve, freeze, or clawback address.\n *\n * You must respecify existing addresses to keep them the same; leaving a field blank is the same as\n * turning that feature off for this asset.\n *\n * @param options - Asset modification transaction parameters\n */\nexport function makeAssetConfigTxnWithSuggestedParamsFromObject({\n  sender,\n  assetIndex,\n  manager,\n  reserve,\n  freeze,\n  clawback,\n  strictEmptyAddressChecking,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  if (!assetIndex) {\n    throw Error('assetIndex must be provided');\n  }\n  const strictChecking = strictEmptyAddressChecking ?? true;\n  if (strictChecking && (manager == null || reserve == null || freeze == null || clawback == null)) {\n    throw Error('strictEmptyAddressChecking is enabled, but an address is empty. If this is intentional, set strictEmptyAddressChecking to false.');\n  }\n  return makeBaseAssetConfigTxn({\n    sender,\n    assetIndex,\n    manager,\n    reserve,\n    freeze,\n    clawback,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams\n  });\n}\n/**\n * Create a new asset destroy transaction. This will allow the asset's manager to remove this asset\n * from the ledger, provided all outstanding assets are held by the creator.\n *\n * @param options - Asset destroy transaction parameters\n */\nexport function makeAssetDestroyTxnWithSuggestedParamsFromObject({\n  sender,\n  assetIndex,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  if (!assetIndex) {\n    throw Error('assetIndex must be provided');\n  }\n  return makeBaseAssetConfigTxn({\n    sender,\n    assetIndex,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams\n  });\n}\n/**\n * Create a new asset freeze transaction. This transaction allows the asset's freeze manager to\n * freeze or un-freeze an account, blocking or allowing asset transfers to and from the targeted\n * account.\n *\n * @param options - Asset freeze transaction parameters\n */\nexport function makeAssetFreezeTxnWithSuggestedParamsFromObject({\n  sender,\n  assetIndex,\n  freezeTarget,\n  frozen,\n  suggestedParams,\n  note,\n  lease,\n  rekeyTo\n}) {\n  return new Transaction({\n    type: TransactionType.afrz,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    assetFreezeParams: {\n      assetIndex,\n      freezeTarget,\n      frozen\n    }\n  });\n}\n/**\n * Create a new asset transfer transaction.\n *\n * Special case: to opt into an assets, set amount=0 and sender=receiver.\n *\n * @param options - Asset transfer transaction parameters\n */\nexport function makeAssetTransferTxnWithSuggestedParamsFromObject({\n  sender,\n  receiver,\n  amount,\n  closeRemainderTo,\n  assetSender,\n  note,\n  assetIndex,\n  suggestedParams,\n  rekeyTo,\n  lease\n}) {\n  if (!assetIndex) {\n    throw Error('assetIndex must be provided');\n  }\n  return new Transaction({\n    type: TransactionType.axfer,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    assetTransferParams: {\n      assetIndex,\n      receiver,\n      amount,\n      assetSender,\n      closeRemainderTo\n    }\n  });\n}\n/**\n * Base function for creating any application call transaction.\n *\n * @param options - Application call transaction parameters\n */\nexport function makeApplicationCallTxnFromObject({\n  sender,\n  appIndex,\n  onComplete,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  approvalProgram,\n  clearProgram,\n  numLocalInts,\n  numLocalByteSlices,\n  numGlobalInts,\n  numGlobalByteSlices,\n  extraPages,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  if (onComplete == null) {\n    throw Error('onComplete must be provided');\n  }\n  return new Transaction({\n    type: TransactionType.appl,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    appCallParams: {\n      appIndex,\n      onComplete,\n      appArgs,\n      accounts,\n      foreignAssets,\n      foreignApps,\n      boxes,\n      approvalProgram,\n      clearProgram,\n      numLocalInts,\n      numLocalByteSlices,\n      numGlobalInts,\n      numGlobalByteSlices,\n      extraPages\n    }\n  });\n}\n/**\n * Make a transaction that will create an application.\n *\n * @param options - Application creation transaction parameters\n */\nexport function makeApplicationCreateTxnFromObject({\n  sender,\n  onComplete,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  approvalProgram,\n  clearProgram,\n  numLocalInts,\n  numLocalByteSlices,\n  numGlobalInts,\n  numGlobalByteSlices,\n  extraPages,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  if (!approvalProgram || !clearProgram) {\n    throw Error('approvalProgram and clearProgram must be provided');\n  }\n  if (onComplete == null) {\n    throw Error('onComplete must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex: 0,\n    onComplete,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    approvalProgram,\n    clearProgram,\n    numLocalInts,\n    numLocalByteSlices,\n    numGlobalInts,\n    numGlobalByteSlices,\n    extraPages,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams\n  });\n}\n/**\n * Make a transaction that changes an application's approval and clear programs\n *\n * @param options - Application update transaction parameters\n */\nexport function makeApplicationUpdateTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  approvalProgram,\n  clearProgram,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  if (!approvalProgram || !clearProgram) {\n    throw Error('approvalProgram and clearProgram must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.UpdateApplicationOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    approvalProgram,\n    clearProgram,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams\n  });\n}\n/**\n * Make a transaction that deletes an application\n *\n * @param options - Application deletion transaction parameters\n */\nexport function makeApplicationDeleteTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.DeleteApplicationOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams\n  });\n}\n/**\n * Make a transaction that opts in to use an application\n *\n * @param options - Application opt-in transaction parameters\n */\nexport function makeApplicationOptInTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.OptInOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams\n  });\n}\n/**\n * Make a transaction that closes out a user's state in an application\n *\n * @param options - Application close-out transaction parameters\n */\nexport function makeApplicationCloseOutTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.CloseOutOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams\n  });\n}\n/**\n * Make a transaction that clears a user's state in an application\n *\n * @param options - Application clear state transaction parameters\n */\nexport function makeApplicationClearStateTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.ClearStateOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams\n  });\n}\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n *\n * @param options - Application no-op transaction parameters\n */\nexport function makeApplicationNoOpTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams\n}) {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.NoOpOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams\n  });\n}","map":{"version":3,"names":["Transaction","OnApplicationComplete","TransactionType","makePaymentTxnWithSuggestedParamsFromObject","sender","receiver","amount","closeRemainderTo","suggestedParams","note","lease","rekeyTo","type","pay","paymentParams","makeKeyRegistrationTxnWithSuggestedParamsFromObject","voteKey","selectionKey","stateProofKey","voteFirst","voteLast","voteKeyDilution","nonParticipation","keyreg","keyregParams","makeBaseAssetConfigTxn","assetIndex","total","decimals","defaultFrozen","manager","reserve","freeze","clawback","unitName","assetName","assetURL","assetMetadataHash","acfg","assetConfigParams","makeAssetCreateTxnWithSuggestedParamsFromObject","makeAssetConfigTxnWithSuggestedParamsFromObject","strictEmptyAddressChecking","Error","strictChecking","makeAssetDestroyTxnWithSuggestedParamsFromObject","makeAssetFreezeTxnWithSuggestedParamsFromObject","freezeTarget","frozen","afrz","assetFreezeParams","makeAssetTransferTxnWithSuggestedParamsFromObject","assetSender","axfer","assetTransferParams","makeApplicationCallTxnFromObject","appIndex","onComplete","appArgs","accounts","foreignApps","foreignAssets","boxes","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","extraPages","appl","appCallParams","makeApplicationCreateTxnFromObject","makeApplicationUpdateTxnFromObject","UpdateApplicationOC","makeApplicationDeleteTxnFromObject","DeleteApplicationOC","makeApplicationOptInTxnFromObject","OptInOC","makeApplicationCloseOutTxnFromObject","CloseOutOC","makeApplicationClearStateTxnFromObject","ClearStateOC","makeApplicationNoOpTxnFromObject","NoOpOC"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\makeTxn.ts"],"sourcesContent":["import { Transaction } from './transaction.js';\nimport {\n  OnApplicationComplete,\n  TransactionType,\n  SuggestedParams,\n  PaymentTransactionParams,\n  KeyRegistrationTransactionParams,\n  AssetConfigurationTransactionParams,\n  AssetTransferTransactionParams,\n  AssetFreezeTransactionParams,\n  ApplicationCallTransactionParams,\n} from './types/transactions/base.js';\nimport { Address } from './encoding/address.js';\n\n/** Contains parameters common to every transaction type */\nexport interface CommonTransactionParams {\n  /** Algorand address of sender */\n  sender: string | Address;\n  /** Suggested parameters relevant to the network that will accept this transaction */\n  suggestedParams: SuggestedParams;\n  /** Optional, arbitrary data to be stored in the transaction's note field */\n  note?: Uint8Array;\n  /**\n   * Optional, 32-byte lease to associate with this transaction.\n   *\n   * The sender cannot send another transaction with the same lease until the last round of original\n   * transaction has passed.\n   */\n  lease?: Uint8Array;\n  /** The Algorand address that will be used to authorize all future transactions from the sender, if provided. */\n  rekeyTo?: string | Address;\n}\n\n/**\n * Create a new payment transaction\n *\n * @param options - Payment transaction parameters\n */\nexport function makePaymentTxnWithSuggestedParamsFromObject({\n  sender,\n  receiver,\n  amount,\n  closeRemainderTo,\n  suggestedParams,\n  note,\n  lease,\n  rekeyTo,\n}: PaymentTransactionParams & CommonTransactionParams): Transaction {\n  return new Transaction({\n    type: TransactionType.pay,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    paymentParams: {\n      receiver,\n      amount,\n      closeRemainderTo,\n    },\n  });\n}\n\n/**\n * Create a new key registration transaction\n *\n * @param options - Key registration transaction parameters\n */\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject({\n  sender,\n  voteKey,\n  selectionKey,\n  stateProofKey,\n  voteFirst,\n  voteLast,\n  voteKeyDilution,\n  nonParticipation,\n  suggestedParams,\n  note,\n  lease,\n  rekeyTo,\n}: KeyRegistrationTransactionParams & CommonTransactionParams): Transaction {\n  return new Transaction({\n    type: TransactionType.keyreg,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    keyregParams: {\n      voteKey,\n      selectionKey,\n      stateProofKey,\n      voteFirst,\n      voteLast,\n      voteKeyDilution,\n      nonParticipation,\n    },\n  });\n}\n\n/**\n * Base function for creating any type of asset config transaction.\n *\n * @param options - Asset config transaction parameters\n */\nexport function makeBaseAssetConfigTxn({\n  sender,\n  assetIndex,\n  total,\n  decimals,\n  defaultFrozen,\n  manager,\n  reserve,\n  freeze,\n  clawback,\n  unitName,\n  assetName,\n  assetURL,\n  assetMetadataHash,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: AssetConfigurationTransactionParams & CommonTransactionParams): Transaction {\n  return new Transaction({\n    type: TransactionType.acfg,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    assetConfigParams: {\n      assetIndex,\n      total,\n      decimals,\n      defaultFrozen,\n      manager,\n      reserve,\n      freeze,\n      clawback,\n      unitName,\n      assetName,\n      assetURL,\n      assetMetadataHash,\n    },\n  });\n}\n\n/**\n * Create a new asset creation transaction\n *\n * @param options - Asset creation transaction parameters\n */\nexport function makeAssetCreateTxnWithSuggestedParamsFromObject({\n  sender,\n  total,\n  decimals,\n  defaultFrozen,\n  manager,\n  reserve,\n  freeze,\n  clawback,\n  unitName,\n  assetName,\n  assetURL,\n  assetMetadataHash,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: Omit<AssetConfigurationTransactionParams, 'assetIndex'> &\n  CommonTransactionParams): Transaction {\n  return makeBaseAssetConfigTxn({\n    sender,\n    total,\n    decimals,\n    defaultFrozen,\n    manager,\n    reserve,\n    freeze,\n    clawback,\n    unitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n  });\n}\n\n/** Contains asset modification transaction parameters */\nexport interface AssetModificationTransactionParams {\n  /**\n   * The unique ID of the asset to be modified\n   */\n  assetIndex: number | bigint;\n\n  /**\n   * The Algorand address in charge of reserve, freeze, clawback, destruction, etc.\n   *\n   * If empty, this role will be irrevocably removed from this asset.\n   */\n  manager?: string | Address;\n\n  /**\n   * The Algorand address representing asset reserve.\n   *\n   * If empty, this role will be irrevocably removed from this asset.\n   */\n  reserve?: string | Address;\n\n  /**\n   * The Algorand address with power to freeze/unfreeze asset holdings.\n   *\n   * If empty, this role will be irrevocably removed from this asset.\n   */\n  freeze?: string | Address;\n\n  /**\n   * The Algorand address with power to revoke asset holdings.\n   *\n   * If empty, this role will be irrevocably removed from this asset.\n   */\n  clawback?: string | Address;\n\n  /**\n   * This is a safety flag to prevent unintentionally removing a role from an asset. If undefined or\n   * true, an error will be thrown if any of assetManager, assetReserve, assetFreeze, or\n   * assetClawback are empty.\n   *\n   * Set this to false to allow removing roles by leaving the corresponding address empty.\n   */\n  strictEmptyAddressChecking?: boolean;\n}\n\n/**\n * Create a new asset config transaction. This transaction can be issued by the asset manager to\n * change the manager, reserve, freeze, or clawback address.\n *\n * You must respecify existing addresses to keep them the same; leaving a field blank is the same as\n * turning that feature off for this asset.\n *\n * @param options - Asset modification transaction parameters\n */\nexport function makeAssetConfigTxnWithSuggestedParamsFromObject({\n  sender,\n  assetIndex,\n  manager,\n  reserve,\n  freeze,\n  clawback,\n  strictEmptyAddressChecking,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: AssetModificationTransactionParams & CommonTransactionParams): Transaction {\n  if (!assetIndex) {\n    throw Error('assetIndex must be provided');\n  }\n  const strictChecking = strictEmptyAddressChecking ?? true;\n  if (\n    strictChecking &&\n    (manager == null || reserve == null || freeze == null || clawback == null)\n  ) {\n    throw Error(\n      'strictEmptyAddressChecking is enabled, but an address is empty. If this is intentional, set strictEmptyAddressChecking to false.'\n    );\n  }\n  return makeBaseAssetConfigTxn({\n    sender,\n    assetIndex,\n    manager,\n    reserve,\n    freeze,\n    clawback,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n  });\n}\n\n/**\n * Create a new asset destroy transaction. This will allow the asset's manager to remove this asset\n * from the ledger, provided all outstanding assets are held by the creator.\n *\n * @param options - Asset destroy transaction parameters\n */\nexport function makeAssetDestroyTxnWithSuggestedParamsFromObject({\n  sender,\n  assetIndex,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: Required<Pick<AssetConfigurationTransactionParams, 'assetIndex'>> &\n  CommonTransactionParams): Transaction {\n  if (!assetIndex) {\n    throw Error('assetIndex must be provided');\n  }\n  return makeBaseAssetConfigTxn({\n    sender,\n    assetIndex,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n  });\n}\n\n/**\n * Create a new asset freeze transaction. This transaction allows the asset's freeze manager to\n * freeze or un-freeze an account, blocking or allowing asset transfers to and from the targeted\n * account.\n *\n * @param options - Asset freeze transaction parameters\n */\nexport function makeAssetFreezeTxnWithSuggestedParamsFromObject({\n  sender,\n  assetIndex,\n  freezeTarget,\n  frozen,\n  suggestedParams,\n  note,\n  lease,\n  rekeyTo,\n}: AssetFreezeTransactionParams & CommonTransactionParams): Transaction {\n  return new Transaction({\n    type: TransactionType.afrz,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    assetFreezeParams: {\n      assetIndex,\n      freezeTarget,\n      frozen,\n    },\n  });\n}\n\n/**\n * Create a new asset transfer transaction.\n *\n * Special case: to opt into an assets, set amount=0 and sender=receiver.\n *\n * @param options - Asset transfer transaction parameters\n */\nexport function makeAssetTransferTxnWithSuggestedParamsFromObject({\n  sender,\n  receiver,\n  amount,\n  closeRemainderTo,\n  assetSender,\n  note,\n  assetIndex,\n  suggestedParams,\n  rekeyTo,\n  lease,\n}: AssetTransferTransactionParams & CommonTransactionParams): Transaction {\n  if (!assetIndex) {\n    throw Error('assetIndex must be provided');\n  }\n  return new Transaction({\n    type: TransactionType.axfer,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    assetTransferParams: {\n      assetIndex,\n      receiver,\n      amount,\n      assetSender,\n      closeRemainderTo,\n    },\n  });\n}\n\n/**\n * Base function for creating any application call transaction.\n *\n * @param options - Application call transaction parameters\n */\nexport function makeApplicationCallTxnFromObject({\n  sender,\n  appIndex,\n  onComplete,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  approvalProgram,\n  clearProgram,\n  numLocalInts,\n  numLocalByteSlices,\n  numGlobalInts,\n  numGlobalByteSlices,\n  extraPages,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: ApplicationCallTransactionParams & CommonTransactionParams): Transaction {\n  if (onComplete == null) {\n    throw Error('onComplete must be provided');\n  }\n  return new Transaction({\n    type: TransactionType.appl,\n    sender,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n    appCallParams: {\n      appIndex,\n      onComplete,\n      appArgs,\n      accounts,\n      foreignAssets,\n      foreignApps,\n      boxes,\n      approvalProgram,\n      clearProgram,\n      numLocalInts,\n      numLocalByteSlices,\n      numGlobalInts,\n      numGlobalByteSlices,\n      extraPages,\n    },\n  });\n}\n\n/**\n * Make a transaction that will create an application.\n *\n * @param options - Application creation transaction parameters\n */\nexport function makeApplicationCreateTxnFromObject({\n  sender,\n  onComplete,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  approvalProgram,\n  clearProgram,\n  numLocalInts,\n  numLocalByteSlices,\n  numGlobalInts,\n  numGlobalByteSlices,\n  extraPages,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: Omit<\n  ApplicationCallTransactionParams,\n  'appIndex' | 'approvalProgram' | 'clearProgram'\n> &\n  Required<\n    Pick<ApplicationCallTransactionParams, 'approvalProgram' | 'clearProgram'>\n  > &\n  CommonTransactionParams): Transaction {\n  if (!approvalProgram || !clearProgram) {\n    throw Error('approvalProgram and clearProgram must be provided');\n  }\n  if (onComplete == null) {\n    throw Error('onComplete must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex: 0,\n    onComplete,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    approvalProgram,\n    clearProgram,\n    numLocalInts,\n    numLocalByteSlices,\n    numGlobalInts,\n    numGlobalByteSlices,\n    extraPages,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n  });\n}\n\n/**\n * Make a transaction that changes an application's approval and clear programs\n *\n * @param options - Application update transaction parameters\n */\nexport function makeApplicationUpdateTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  approvalProgram,\n  clearProgram,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: Omit<\n  ApplicationCallTransactionParams,\n  | 'onComplete'\n  | 'numLocalInts'\n  | 'numLocalByteSlices'\n  | 'numGlobalInts'\n  | 'numGlobalByteSlices'\n  | 'extraPages'\n  | 'approvalProgram'\n  | 'clearProgram'\n> &\n  Required<\n    Pick<ApplicationCallTransactionParams, 'approvalProgram' | 'clearProgram'>\n  > &\n  CommonTransactionParams): Transaction {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  if (!approvalProgram || !clearProgram) {\n    throw Error('approvalProgram and clearProgram must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.UpdateApplicationOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    approvalProgram,\n    clearProgram,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n  });\n}\n\n/**\n * Make a transaction that deletes an application\n *\n * @param options - Application deletion transaction parameters\n */\nexport function makeApplicationDeleteTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: Omit<\n  ApplicationCallTransactionParams,\n  | 'onComplete'\n  | 'numLocalInts'\n  | 'numLocalByteSlices'\n  | 'numGlobalInts'\n  | 'numGlobalByteSlices'\n  | 'extraPages'\n  | 'approvalProgram'\n  | 'clearProgram'\n> &\n  CommonTransactionParams): Transaction {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.DeleteApplicationOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n  });\n}\n\n/**\n * Make a transaction that opts in to use an application\n *\n * @param options - Application opt-in transaction parameters\n */\nexport function makeApplicationOptInTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: Omit<\n  ApplicationCallTransactionParams,\n  | 'onComplete'\n  | 'numLocalInts'\n  | 'numLocalByteSlices'\n  | 'numGlobalInts'\n  | 'numGlobalByteSlices'\n  | 'extraPages'\n  | 'approvalProgram'\n  | 'clearProgram'\n> &\n  CommonTransactionParams): Transaction {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.OptInOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n  });\n}\n\n/**\n * Make a transaction that closes out a user's state in an application\n *\n * @param options - Application close-out transaction parameters\n */\nexport function makeApplicationCloseOutTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: Omit<\n  ApplicationCallTransactionParams,\n  | 'onComplete'\n  | 'numLocalInts'\n  | 'numLocalByteSlices'\n  | 'numGlobalInts'\n  | 'numGlobalByteSlices'\n  | 'extraPages'\n  | 'approvalProgram'\n  | 'clearProgram'\n> &\n  CommonTransactionParams): Transaction {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.CloseOutOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n  });\n}\n\n/**\n * Make a transaction that clears a user's state in an application\n *\n * @param options - Application clear state transaction parameters\n */\nexport function makeApplicationClearStateTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: Omit<\n  ApplicationCallTransactionParams,\n  | 'onComplete'\n  | 'numLocalInts'\n  | 'numLocalByteSlices'\n  | 'numGlobalInts'\n  | 'numGlobalByteSlices'\n  | 'extraPages'\n  | 'approvalProgram'\n  | 'clearProgram'\n> &\n  CommonTransactionParams): Transaction {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.ClearStateOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n  });\n}\n\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n *\n * @param options - Application no-op transaction parameters\n */\nexport function makeApplicationNoOpTxnFromObject({\n  sender,\n  appIndex,\n  appArgs,\n  accounts,\n  foreignApps,\n  foreignAssets,\n  boxes,\n  note,\n  lease,\n  rekeyTo,\n  suggestedParams,\n}: Omit<\n  ApplicationCallTransactionParams,\n  | 'onComplete'\n  | 'numLocalInts'\n  | 'numLocalByteSlices'\n  | 'numGlobalInts'\n  | 'numGlobalByteSlices'\n  | 'extraPages'\n  | 'approvalProgram'\n  | 'clearProgram'\n> &\n  CommonTransactionParams): Transaction {\n  if (!appIndex) {\n    throw Error('appIndex must be provided');\n  }\n  return makeApplicationCallTxnFromObject({\n    sender,\n    appIndex,\n    onComplete: OnApplicationComplete.NoOpOC,\n    appArgs,\n    accounts,\n    foreignApps,\n    foreignAssets,\n    boxes,\n    note,\n    lease,\n    rekeyTo,\n    suggestedParams,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}