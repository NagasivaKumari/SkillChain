{"ast":null,"code":"import { Schema } from '../encoding.js';\nimport { Address } from '../address.js';\n/* eslint-disable class-methods-use-this */\nexport class AddressSchema extends Schema {\n  defaultValue() {\n    return Address.zeroAddress();\n  }\n  isDefaultValue(data) {\n    // The equals method checks if the input is an Address\n    return Address.zeroAddress().equals(data);\n  }\n  prepareMsgpack(data) {\n    if (data instanceof Address) {\n      return data.publicKey;\n    }\n    throw new Error(`Invalid address: (${typeof data}) ${data}`);\n  }\n  fromPreparedMsgpack(encoded,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _rawStringProvider) {\n    // The Address constructor checks that the input is a Uint8Array\n    return new Address(encoded);\n  }\n  prepareJSON(data,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _options) {\n    if (data instanceof Address) {\n      return data.toString();\n    }\n    throw new Error(`Invalid address: (${typeof data}) ${data}`);\n  }\n  fromPreparedJSON(encoded) {\n    // The Address.fromString method checks that the input is a string\n    return Address.fromString(encoded);\n  }\n}","map":{"version":3,"names":["Schema","Address","AddressSchema","defaultValue","zeroAddress","isDefaultValue","data","equals","prepareMsgpack","publicKey","Error","fromPreparedMsgpack","encoded","_rawStringProvider","prepareJSON","_options","toString","fromPreparedJSON","fromString"],"sources":["C:\\Users\\naga shiva kumari\\OneDrive\\node_modules\\algosdk\\src\\encoding\\schema\\address.ts"],"sourcesContent":["import {\n  Schema,\n  MsgpackEncodingData,\n  MsgpackRawStringProvider,\n  JSONEncodingData,\n  PrepareJSONOptions,\n} from '../encoding.js';\nimport { Address } from '../address.js';\n\n/* eslint-disable class-methods-use-this */\n\nexport class AddressSchema extends Schema {\n  public defaultValue(): Address {\n    return Address.zeroAddress();\n  }\n\n  public isDefaultValue(data: unknown): boolean {\n    // The equals method checks if the input is an Address\n    return Address.zeroAddress().equals(data as Address);\n  }\n\n  public prepareMsgpack(data: unknown): MsgpackEncodingData {\n    if (data instanceof Address) {\n      return data.publicKey;\n    }\n    throw new Error(`Invalid address: (${typeof data}) ${data}`);\n  }\n\n  public fromPreparedMsgpack(\n    encoded: MsgpackEncodingData,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider: MsgpackRawStringProvider\n  ): Address {\n    // The Address constructor checks that the input is a Uint8Array\n    return new Address(encoded as Uint8Array);\n  }\n\n  public prepareJSON(\n    data: unknown,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options: PrepareJSONOptions\n  ): JSONEncodingData {\n    if (data instanceof Address) {\n      return data.toString();\n    }\n    throw new Error(`Invalid address: (${typeof data}) ${data}`);\n  }\n\n  public fromPreparedJSON(encoded: JSONEncodingData): Address {\n    // The Address.fromString method checks that the input is a string\n    return Address.fromString(encoded as string);\n  }\n}\n"],"mappings":"AAAA,SACEA,MAAM,QAKD,gBAAgB;AACvB,SAASC,OAAO,QAAQ,eAAe;AAEvC;AAEA,OAAM,MAAOC,aAAc,SAAQF,MAAM;EAChCG,YAAYA,CAAA;IACjB,OAAOF,OAAO,CAACG,WAAW,EAAE;EAC9B;EAEOC,cAAcA,CAACC,IAAa;IACjC;IACA,OAAOL,OAAO,CAACG,WAAW,EAAE,CAACG,MAAM,CAACD,IAAe,CAAC;EACtD;EAEOE,cAAcA,CAACF,IAAa;IACjC,IAAIA,IAAI,YAAYL,OAAO,EAAE;MAC3B,OAAOK,IAAI,CAACG,SAAS;IACvB;IACA,MAAM,IAAIC,KAAK,CAAC,qBAAqB,OAAOJ,IAAI,KAAKA,IAAI,EAAE,CAAC;EAC9D;EAEOK,mBAAmBA,CACxBC,OAA4B;EAC5B;EACAC,kBAA4C;IAE5C;IACA,OAAO,IAAIZ,OAAO,CAACW,OAAqB,CAAC;EAC3C;EAEOE,WAAWA,CAChBR,IAAa;EACb;EACAS,QAA4B;IAE5B,IAAIT,IAAI,YAAYL,OAAO,EAAE;MAC3B,OAAOK,IAAI,CAACU,QAAQ,EAAE;IACxB;IACA,MAAM,IAAIN,KAAK,CAAC,qBAAqB,OAAOJ,IAAI,KAAKA,IAAI,EAAE,CAAC;EAC9D;EAEOW,gBAAgBA,CAACL,OAAyB;IAC/C;IACA,OAAOX,OAAO,CAACiB,UAAU,CAACN,OAAiB,CAAC;EAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}